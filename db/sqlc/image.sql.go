// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: image.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images
(
    img_guid,
    image_type_id,
    name,
    url,
    base_url,
    user_id
)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id, image_type_id, name, url, created_at, base_url, img_guid, user_id
`

type CreateImageParams struct {
	ImgGuid   uuid.NullUUID  `json:"img_guid"`
	ImgTypeID sql.NullInt32  `json:"img_type_id"`
	Name      sql.NullString `json:"name"`
	Url       string         `json:"url"`
	BaseUrl   string         `json:"base_url"`
	UserID    int32          `json:"user_id"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.ImgGuid,
		arg.ImgTypeID,
		arg.Name,
		arg.Url,
		arg.BaseUrl,
		arg.UserID,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.BaseUrl,
		&i.ImgGuid,
		&i.UserID,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImageByGUID = `-- name: GetImageByGUID :one
SELECT id, image_type_id, name, url, created_at, base_url, img_guid, user_id FROM images WHERE img_guid = $1 LIMIT 1
`

func (q *Queries) GetImageByGUID(ctx context.Context, imgGuid uuid.NullUUID) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageByGUID, imgGuid)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.BaseUrl,
		&i.ImgGuid,
		&i.UserID,
	)
	return i, err
}

const getImageById = `-- name: GetImageById :one
SELECT id, image_type_id, name, url, created_at, base_url, img_guid, user_id FROM images WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImageById(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageById, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.BaseUrl,
		&i.ImgGuid,
		&i.UserID,
	)
	return i, err
}

const getImages = `-- name: GetImages :many
SELECT
    id, image_type_id, name, url, created_at, base_url, img_guid, user_id
FROM
    images
WHERE
    (user_id = COALESCE($1, user_id)) AND
    (image_type_id = COALESCE($2, image_type_id))
ORDER BY id DESC
LIMIT $4 OFFSET $3
`

type GetImagesParams struct {
	UserID      sql.NullInt32 `json:"user_id"`
	ImageTypeID sql.NullInt32 `json:"image_type_id"`
	PageOffset  int32         `json:"page_offset"`
	PageLimit   int32         `json:"page_limit"`
}

func (q *Queries) GetImages(ctx context.Context, arg GetImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImages,
		arg.UserID,
		arg.ImageTypeID,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.BaseUrl,
			&i.ImgGuid,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByImageTypeId = `-- name: GetImagesByImageTypeId :many
SELECT id, image_type_id, name, url, created_at, base_url, img_guid, user_id FROM images WHERE image_type_id = $1
`

func (q *Queries) GetImagesByImageTypeId(ctx context.Context, imgTypeID sql.NullInt32) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByImageTypeId, imgTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.BaseUrl,
			&i.ImgGuid,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesCount = `-- name: GetImagesCount :one
SELECT COUNT(*) FROM images
WHERE
    (user_id = COALESCE($1, user_id)) AND
    (image_type_id = COALESCE($2, image_type_id))
`

type GetImagesCountParams struct {
	UserID      sql.NullInt32 `json:"user_id"`
	ImageTypeID sql.NullInt32 `json:"image_type_id"`
}

func (q *Queries) GetImagesCount(ctx context.Context, arg GetImagesCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getImagesCount, arg.UserID, arg.ImageTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET
    img_guid = COALESCE($1, img_guid),
    image_type_id = COALESCE($2, image_type_id),
    name = COALESCE($3, name),
    url = COALESCE($4, url),
    base_url = COALESCE($5, base_url),
    user_id = COALESCE($6, user_id)
WHERE
    id = $7
RETURNING id, image_type_id, name, url, created_at, base_url, img_guid, user_id
`

type UpdateImageParams struct {
	ImgGuid     uuid.NullUUID  `json:"img_guid"`
	ImageTypeID sql.NullInt32  `json:"image_type_id"`
	Name        sql.NullString `json:"name"`
	Url         string         `json:"url"`
	BaseUrl     string         `json:"base_url"`
	UserID      int32          `json:"user_id"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage,
		arg.ImgGuid,
		arg.ImageTypeID,
		arg.Name,
		arg.Url,
		arg.BaseUrl,
		arg.UserID,
		arg.ID,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.BaseUrl,
		&i.ImgGuid,
		&i.UserID,
	)
	return i, err
}
