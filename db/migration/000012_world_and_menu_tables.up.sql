DROP VIEW IF EXISTS view_worlds;

DROP TABLE world_stats_history;
DROP TABLE world_stats;

-- Add `based_on` column to `worlds` table
ALTER TABLE worlds ADD COLUMN based_on varchar NOT NULL default '';
ALTER TABLE worlds RENAME COLUMN description TO short_description;
ALTER TABLE worlds ADD COLUMN description_post_id int;
ALTER TABLE worlds ADD CONSTRAINT worlds_description_post_id_fkey FOREIGN KEY(description_post_id) REFERENCES posts(id);

-- Add new fields to table `world_admins`
ALTER TABLE world_admins RENAME COLUMN is_main TO super_admin;
ALTER TABLE world_admins ADD COLUMN approved int NOT NULL default 2;
ALTER TABLE world_admins ADD COLUMN motivational_letter varchar NOT NULL default '';
ALTER TABLE world_admins ALTER COLUMN world_id SET NOT NULL;
ALTER TABLE world_admins ALTER COLUMN user_id SET NOT NULL;
COMMENT ON COLUMN "world_admins"."approved" IS '0 = NO, 1 = YES, 2 = PENDING';

-- Change fields in `world_images`
ALTER TABLE world_images RENAME COLUMN image_header TO header_img_id;
ALTER TABLE world_images ADD COLUMN thumbnail_img_id int;
ALTER TABLE world_images ADD COLUMN avatar_img_id int;
ALTER TABLE world_images ADD CONSTRAINT world_images_thumbnail_img_id_fkey FOREIGN KEY (thumbnail_img_id) REFERENCES images(id);
ALTER TABLE world_images ADD CONSTRAINT world_images_avatar_img_id_fkey FOREIGN KEY (avatar_img_id) REFERENCES images(id);

-- Create new table `world_tags_available`
CREATE TABLE world_tags_available (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tag varchar UNIQUE NOT NULL
);

-- Create new table `world_tags`
CREATE TABLE world_tags (
    "world_id" int NOT NULL,
    "tag_id" int NOT NULL
);

ALTER TABLE world_tags ADD CONSTRAINT world_tags_world_id_fkey FOREIGN KEY (world_id) REFERENCES worlds(id);
ALTER TABLE world_tags ADD CONSTRAINT world_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES world_tags_available(id);
ALTER TABLE "world_tags" ADD FOREIGN KEY ("tag_id") REFERENCES "world_tags_available" ("id") ON DELETE CASCADE;
CREATE UNIQUE INDEX world_tags_world_id_tag_id_uindex ON world_tags (world_id, tag_id);

-- Create new table `world_activity`
CREATE TABLE world_activity (
    world_id int NOT NULL,
    date date NOT NULL,
    post_count int NOT NULL,
    quest_count int NOT NULL,
    resource_count int NOT NULL
);
ALTER TABLE world_activity
    ADD CONSTRAINT world_activity_world_id_fkey FOREIGN KEY (world_id) REFERENCES worlds(id);
CREATE UNIQUE INDEX ON "world_activity" ("world_id", "date");

-- Create new tables `menus`, `menu_items` and `menu_item_posts`
CREATE TABLE menus (
   id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   menu_code varchar UNIQUE NOT NULL,
   menu_header_img_id int
);
ALTER TABLE menus
    ADD CONSTRAINT menus_menu_header_img_id_fkey FOREIGN KEY(menu_header_img_id) REFERENCES images(id);


-- Create new table `world_menu`
CREATE TABLE world_menu (
    "world_id" int NOT NULL,
    "menu_id" int NOT NULL
);

ALTER TABLE "world_menu" ADD FOREIGN KEY ("world_id") REFERENCES "worlds" ("id");
ALTER TABLE "world_menu" ADD FOREIGN KEY ("menu_id") REFERENCES "menus" ("id");
CREATE UNIQUE INDEX world_menu_world_id_menu_id_uindex ON world_menu (world_id, menu_id);

CREATE TABLE menu_items (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    menu_id int NOT NULL,
    menu_item_code varchar NOT NULL,
    name varchar NOT NULL,
    position int NOT NULL,
    is_main bool NOT NULL default false,
    description_post_id int
);

ALTER TABLE menu_items ADD CONSTRAINT menu_items_menu_id_fkey FOREIGN KEY(menu_id) REFERENCES menus(id);
ALTER TABLE menu_items ADD CONSTRAINT menu_items_description_post_id_fkey FOREIGN KEY(description_post_id) REFERENCES posts(id);

CREATE TABLE "menu_item_posts" (
   "menu_id" int NOT NULL,
   "menu_item_id" int,
   "post_id" int NOT NULL,
   "position" int NOT NULL
);

ALTER TABLE menu_item_posts ADD CONSTRAINT menu_item_posts_menu_item_id_fkey FOREIGN KEY(menu_item_id) REFERENCES menu_items(id);
ALTER TABLE menu_item_posts ADD CONSTRAINT menu_item_posts_post_id_fkey FOREIGN KEY(post_id) REFERENCES posts(id);
CREATE UNIQUE INDEX menu_item_posts_menu_item_id_post_id_uindex ON menu_item_posts (menu_item_id, post_id);

CREATE VIEW view_worlds AS
SELECT
    w.*,
    i_header.url as image_header,
    i_thumbnail.url as image_thumbnail,
    i_avatar.url as image_avatar,
    tags.tags AS tags,
    COALESCE(activity.activity_post_count, 0) AS activity_post_count,
    COALESCE(activity.activity_quest_count, 0) AS activity_quest_count,
    COALESCE(activity.activity_resource_count, 0) AS activity_resource_count,
    wm.menu_id as world_menu_id
FROM
    worlds w
    JOIN world_images wi ON w.id = wi.world_id
    JOIN world_menu wm ON w.id = wm.world_id
    LEFT JOIN (
        SELECT
            wa.world_id,
            cast(sum(wa.post_count) as integer) AS activity_post_count,
            cast(sum(wa.quest_count) as integer) AS activity_quest_count,
            cast(sum(wa.resource_count) as integer) AS activity_resource_count
        FROM
            world_activity wa
        WHERE
                wa.date >= (now() - interval '30 days')
        GROUP BY wa.world_id
    ) activity ON activity.world_id = w.id
        LEFT JOIN (
        SELECT
            wt.world_id,
            cast(array_agg(t.tag) as varchar[]) AS tags
        FROM
            world_tags wt
            LEFT JOIN world_tags_available t ON t.id = wt.tag_id
        GROUP BY wt.world_id
    ) tags ON tags.world_id = w.id
        LEFT JOIN images i_header on wi.header_img_id = i_header.id
        LEFT JOIN images i_thumbnail on wi.thumbnail_img_id = i_thumbnail.id
        LEFT JOIN images i_avatar on wi.avatar_img_id = i_avatar.id
;


BEGIN;
ALTER TYPE "image_variant" ADD VALUE '600x400';
ALTER TYPE "image_variant" ADD VALUE '400x600';
ALTER TYPE "image_variant" ADD VALUE '300x200';
ALTER TYPE "image_variant" ADD VALUE '200x300';
ALTER TYPE "image_variant" ADD VALUE '250x50';
COMMIT;


INSERT INTO "image_types" ("id", "name", "variant", "description") VALUES (1200, 'World thumbnail', '600x400', 'Image used as thumbnail for world');
INSERT INTO "image_types" ("id", "name", "variant", "description") VALUES (1300, 'Menu header', '250x50', 'Image used as header of menu section');

CREATE OR REPLACE PROCEDURE move_menu_item(p_id INT, p_target_position INT)
    LANGUAGE plpgsql AS $$
DECLARE
    v_old_position INT;
    v_menu_id INT;
    v_max_position INT;
BEGIN
    -- Get the current position and menu_id of the menu item
    SELECT "position", "menu_id" INTO v_old_position, v_menu_id
    FROM "menu_items"
    WHERE "id" = p_id;

    -- Get the maximum position within the menu
    SELECT MAX("position") INTO v_max_position
    FROM "menu_items"
    WHERE "menu_id" = v_menu_id;

    -- Check if the target position is valid
    IF p_target_position < 1 OR p_target_position > v_max_position THEN
        RAISE EXCEPTION 'Invalid target position';
    END IF;

    -- Update positions based on the move direction
    IF v_old_position < p_target_position THEN
        -- Move down
        UPDATE "menu_items"
        SET "position" = "position" - 1
        WHERE "menu_id" = v_menu_id
          AND "position" BETWEEN v_old_position + 1 AND p_target_position;

    ELSIF v_old_position > p_target_position THEN
        -- Move up
        UPDATE "menu_items"
        SET "position" = "position" + 1
        WHERE "menu_id" = v_menu_id
          AND "position" BETWEEN p_target_position AND v_old_position - 1;
    END IF;

    -- Set the new position of the menu item
    UPDATE "menu_items"
    SET "position" = p_target_position
    WHERE "id" = p_id;

END;
$$;


CREATE OR REPLACE PROCEDURE move_group_up(p_id INT)
    LANGUAGE plpgsql AS $$
DECLARE
    v_menu_id INT;
    v_target_group_start INT;
    v_target_group_end INT;
    v_prev_group_start INT;
    v_prev_group_end INT;
    v_target_group_size INT;
    v_prev_group_size INT;
    v_temp_offset INT := 1000;
BEGIN
    -- Get the menu_id and the position of the main item of the target group
    SELECT "menu_id", "position" INTO v_menu_id, v_target_group_start
    FROM "menu_items"
    WHERE "id" = p_id;

    -- Find the end position of the target group
    SELECT
        COALESCE(
                MIN("position"),
                (SELECT MAX(position) + 1 FROM menu_items WHERE menu_id = 2)
            ) - 1 INTO v_target_group_end
    FROM "menu_items"
    WHERE "menu_id" = v_menu_id
      AND "position" > v_target_group_start
      AND "is_main" = true;

    -- Find the end position of the previous group
    SELECT MAX("position") INTO v_prev_group_end
    FROM "menu_items"
    WHERE "menu_id" = v_menu_id
      AND "position" < v_target_group_start;

    -- If there's no previous group, exit the procedure
    IF v_prev_group_end IS NULL THEN
        RAISE NOTICE 'This group is already at the top';
        RETURN;
    END IF;

    -- Find the start position of the previous group
    SELECT COALESCE(MAX("position"), 0) INTO v_prev_group_start
    FROM "menu_items"
    WHERE "menu_id" = v_menu_id
      AND "position" <= v_prev_group_end
      AND "is_main" = true;


    -- If there's no group for previous item, exit the procedure
    IF v_prev_group_start = 0 THEN
        RAISE NOTICE 'Previous item has no group';
        RETURN;
    END IF;

    -- Calculate the size of both groups
    v_target_group_size := v_target_group_end - v_target_group_start + 1;
    v_prev_group_size := v_prev_group_end - v_prev_group_start + 1;

    -- Temporarily move the target group out of the way
    UPDATE "menu_items"
    SET "position" = "position" + v_temp_offset
    WHERE "menu_id" = v_menu_id
      AND "position" BETWEEN v_target_group_start AND v_target_group_end;

    -- Move the previous group down by the size of the target group
    UPDATE "menu_items"
    SET "position" = "position" + v_target_group_size
    WHERE "menu_id" = v_menu_id
      AND "position" BETWEEN v_prev_group_start AND v_prev_group_end;

    -- Move the target group up by the size of the previous group
    UPDATE "menu_items"
    SET "position" = "position" - v_prev_group_size - v_temp_offset
    WHERE "menu_id" = v_menu_id
      AND "position" BETWEEN v_target_group_start + v_temp_offset AND v_target_group_end + v_temp_offset;

END;
$$;

CREATE VIEW view_menus AS
SELECT
    m.*,
    i.url as header_image_url
FROM
    menus m
    LEFT JOIN images i ON m.menu_header_img_id = i.id
;

-- Alter the `posts` table
ALTER TABLE "posts"
    ADD COLUMN "description" varchar,
    ADD COLUMN "thumbnail_img_id" int;

-- Add foreign key constraint for `posts` table
ALTER TABLE "posts" ADD FOREIGN KEY ("thumbnail_img_id") REFERENCES "images" ("id");

-- Alter the `post_history` table
ALTER TABLE "post_history"
    ADD COLUMN "description" varchar,
    ADD COLUMN "thumbnail_img_id" int;

-- Add foreign key constraint for `post_history` table
ALTER TABLE "post_history" ADD FOREIGN KEY ("thumbnail_img_id") REFERENCES "images" ("id");

DROP VIEW view_posts;

CREATE VIEW view_posts AS
SELECT
    p.*,
    pt.name as post_type_name,
    pt.draftable as post_type_draftable,
    pt.privatable as post_type_privatable,
    i.url as thumbnail_img_url
FROM
    posts p
    JOIN post_types pt ON p.post_type_id = pt.id
    LEFT JOIN images i ON p.thumbnail_img_id = i.id
;