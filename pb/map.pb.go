// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.0
// source: services/maps/map.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PinShape int32

const (
	PinShape_SQUARE   PinShape = 0
	PinShape_TRIANGLE PinShape = 1
	PinShape_PIN      PinShape = 2
	PinShape_CIRCLE   PinShape = 3
	PinShape_HEXAGON  PinShape = 4
	PinShape_OCTAGON  PinShape = 5
	PinShape_STAR     PinShape = 6
	PinShape_DIAMOND  PinShape = 7
	PinShape_PENTAGON PinShape = 8
	PinShape_HEART    PinShape = 9
	PinShape_CLOUD    PinShape = 10
)

// Enum value maps for PinShape.
var (
	PinShape_name = map[int32]string{
		0:  "SQUARE",
		1:  "TRIANGLE",
		2:  "PIN",
		3:  "CIRCLE",
		4:  "HEXAGON",
		5:  "OCTAGON",
		6:  "STAR",
		7:  "DIAMOND",
		8:  "PENTAGON",
		9:  "HEART",
		10: "CLOUD",
	}
	PinShape_value = map[string]int32{
		"SQUARE":   0,
		"TRIANGLE": 1,
		"PIN":      2,
		"CIRCLE":   3,
		"HEXAGON":  4,
		"OCTAGON":  5,
		"STAR":     6,
		"DIAMOND":  7,
		"PENTAGON": 8,
		"HEART":    9,
		"CLOUD":    10,
	}
)

func (x PinShape) Enum() *PinShape {
	p := new(PinShape)
	*p = x
	return p
}

func (x PinShape) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PinShape) Descriptor() protoreflect.EnumDescriptor {
	return file_services_maps_map_proto_enumTypes[0].Descriptor()
}

func (PinShape) Type() protoreflect.EnumType {
	return &file_services_maps_map_proto_enumTypes[0]
}

func (x PinShape) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PinShape.Descriptor instead.
func (PinShape) EnumDescriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{0}
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Description      *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Width            int32   `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height           int32   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	ThumbnailImageId *int32  `protobuf:"varint,7,opt,name=thumbnailImageId,proto3,oneof" json:"thumbnailImageId,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{0}
}

func (x *Map) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Map) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Map) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Map) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Map) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Map) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Map) GetThumbnailImageId() int32 {
	if x != nil && x.ThumbnailImageId != nil {
		return *x.ThumbnailImageId
	}
	return 0
}

type ViewMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Description       *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Width             int32   `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height            int32   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	ThumbnailImageId  *int32  `protobuf:"varint,7,opt,name=thumbnailImageId,proto3,oneof" json:"thumbnailImageId,omitempty"`
	ThumbnailImageUrl *string `protobuf:"bytes,8,opt,name=thumbnailImageUrl,proto3,oneof" json:"thumbnailImageUrl,omitempty"`
}

func (x *ViewMap) Reset() {
	*x = ViewMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewMap) ProtoMessage() {}

func (x *ViewMap) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewMap.ProtoReflect.Descriptor instead.
func (*ViewMap) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{1}
}

func (x *ViewMap) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ViewMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ViewMap) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ViewMap) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ViewMap) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ViewMap) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ViewMap) GetThumbnailImageId() int32 {
	if x != nil && x.ThumbnailImageId != nil {
		return *x.ThumbnailImageId
	}
	return 0
}

func (x *ViewMap) GetThumbnailImageUrl() string {
	if x != nil && x.ThumbnailImageUrl != nil {
		return *x.ThumbnailImageUrl
	}
	return ""
}

type MapLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MapId    int32  `protobuf:"varint,3,opt,name=mapId,proto3" json:"mapId,omitempty"`
	ImageId  int32  `protobuf:"varint,4,opt,name=imageId,proto3" json:"imageId,omitempty"`
	IsMain   bool   `protobuf:"varint,5,opt,name=isMain,proto3" json:"isMain,omitempty"`
	Enabled  bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Sublayer bool   `protobuf:"varint,7,opt,name=sublayer,proto3" json:"sublayer,omitempty"`
}

func (x *MapLayer) Reset() {
	*x = MapLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLayer) ProtoMessage() {}

func (x *MapLayer) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLayer.ProtoReflect.Descriptor instead.
func (*MapLayer) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{2}
}

func (x *MapLayer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapLayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapLayer) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapLayer) GetImageId() int32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *MapLayer) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *MapLayer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MapLayer) GetSublayer() bool {
	if x != nil {
		return x.Sublayer
	}
	return false
}

type ViewMapLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MapId    int32  `protobuf:"varint,3,opt,name=mapId,proto3" json:"mapId,omitempty"`
	ImageId  int32  `protobuf:"varint,4,opt,name=imageId,proto3" json:"imageId,omitempty"`
	ImageUrl string `protobuf:"bytes,5,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	IsMain   bool   `protobuf:"varint,6,opt,name=isMain,proto3" json:"isMain,omitempty"`
	Enabled  bool   `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Sublayer bool   `protobuf:"varint,8,opt,name=sublayer,proto3" json:"sublayer,omitempty"`
}

func (x *ViewMapLayer) Reset() {
	*x = ViewMapLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewMapLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewMapLayer) ProtoMessage() {}

func (x *ViewMapLayer) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewMapLayer.ProtoReflect.Descriptor instead.
func (*ViewMapLayer) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{3}
}

func (x *ViewMapLayer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ViewMapLayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ViewMapLayer) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *ViewMapLayer) GetImageId() int32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ViewMapLayer) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ViewMapLayer) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *ViewMapLayer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ViewMapLayer) GetSublayer() bool {
	if x != nil {
		return x.Sublayer
	}
	return false
}

type MapPinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MapPinTypeGroupId int32    `protobuf:"varint,2,opt,name=mapPinTypeGroupId,proto3" json:"mapPinTypeGroupId,omitempty"`
	Shape             PinShape `protobuf:"varint,3,opt,name=shape,proto3,enum=pb.PinShape" json:"shape,omitempty"`
	BackgroundColor   string   `protobuf:"bytes,4,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	BorderColor       string   `protobuf:"bytes,5,opt,name=borderColor,proto3" json:"borderColor,omitempty"`
	IconColor         string   `protobuf:"bytes,6,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
	Icon              string   `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	IconSize          int32    `protobuf:"varint,8,opt,name=iconSize,proto3" json:"iconSize,omitempty"`
	Width             int32    `protobuf:"varint,9,opt,name=width,proto3" json:"width,omitempty"`
	Section           string   `protobuf:"bytes,10,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *MapPinType) Reset() {
	*x = MapPinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapPinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPinType) ProtoMessage() {}

func (x *MapPinType) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPinType.ProtoReflect.Descriptor instead.
func (*MapPinType) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{4}
}

func (x *MapPinType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapPinType) GetMapPinTypeGroupId() int32 {
	if x != nil {
		return x.MapPinTypeGroupId
	}
	return 0
}

func (x *MapPinType) GetShape() PinShape {
	if x != nil {
		return x.Shape
	}
	return PinShape_SQUARE
}

func (x *MapPinType) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *MapPinType) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *MapPinType) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *MapPinType) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MapPinType) GetIconSize() int32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *MapPinType) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MapPinType) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

type MapPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MapId        int32  `protobuf:"varint,3,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapPinTypeId *int32 `protobuf:"varint,4,opt,name=mapPinTypeId,proto3,oneof" json:"mapPinTypeId,omitempty"`
	LocationId   *int32 `protobuf:"varint,5,opt,name=locationId,proto3,oneof" json:"locationId,omitempty"`
	MapLayerId   *int32 `protobuf:"varint,6,opt,name=mapLayerId,proto3,oneof" json:"mapLayerId,omitempty"`
	X            int32  `protobuf:"varint,7,opt,name=x,proto3" json:"x,omitempty"`
	Y            int32  `protobuf:"varint,8,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *MapPin) Reset() {
	*x = MapPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPin) ProtoMessage() {}

func (x *MapPin) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPin.ProtoReflect.Descriptor instead.
func (*MapPin) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{5}
}

func (x *MapPin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapPin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapPin) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MapPin) GetMapPinTypeId() int32 {
	if x != nil && x.MapPinTypeId != nil {
		return *x.MapPinTypeId
	}
	return 0
}

func (x *MapPin) GetLocationId() int32 {
	if x != nil && x.LocationId != nil {
		return *x.LocationId
	}
	return 0
}

func (x *MapPin) GetMapLayerId() int32 {
	if x != nil && x.MapLayerId != nil {
		return *x.MapLayerId
	}
	return 0
}

func (x *MapPin) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapPin) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ViewMapPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MapId                     int32   `protobuf:"varint,3,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MapPinTypeId              *int32  `protobuf:"varint,4,opt,name=mapPinTypeId,proto3,oneof" json:"mapPinTypeId,omitempty"`
	LocationId                *int32  `protobuf:"varint,5,opt,name=locationId,proto3,oneof" json:"locationId,omitempty"`
	MapLayerId                *int32  `protobuf:"varint,6,opt,name=mapLayerId,proto3,oneof" json:"mapLayerId,omitempty"`
	X                         int32   `protobuf:"varint,7,opt,name=x,proto3" json:"x,omitempty"`
	Y                         int32   `protobuf:"varint,8,opt,name=y,proto3" json:"y,omitempty"`
	LocationName              *string `protobuf:"bytes,9,opt,name=locationName,proto3,oneof" json:"locationName,omitempty"`
	LocationPostId            *int32  `protobuf:"varint,10,opt,name=locationPostId,proto3,oneof" json:"locationPostId,omitempty"`
	LocationDescription       *string `protobuf:"bytes,11,opt,name=locationDescription,proto3,oneof" json:"locationDescription,omitempty"`
	LocationThumbnailImageId  *int32  `protobuf:"varint,12,opt,name=locationThumbnailImageId,proto3,oneof" json:"locationThumbnailImageId,omitempty"`
	LocationThumbnailImageUrl *string `protobuf:"bytes,13,opt,name=locationThumbnailImageUrl,proto3,oneof" json:"locationThumbnailImageUrl,omitempty"`
}

func (x *ViewMapPin) Reset() {
	*x = ViewMapPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_maps_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewMapPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewMapPin) ProtoMessage() {}

func (x *ViewMapPin) ProtoReflect() protoreflect.Message {
	mi := &file_services_maps_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewMapPin.ProtoReflect.Descriptor instead.
func (*ViewMapPin) Descriptor() ([]byte, []int) {
	return file_services_maps_map_proto_rawDescGZIP(), []int{6}
}

func (x *ViewMapPin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ViewMapPin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ViewMapPin) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *ViewMapPin) GetMapPinTypeId() int32 {
	if x != nil && x.MapPinTypeId != nil {
		return *x.MapPinTypeId
	}
	return 0
}

func (x *ViewMapPin) GetLocationId() int32 {
	if x != nil && x.LocationId != nil {
		return *x.LocationId
	}
	return 0
}

func (x *ViewMapPin) GetMapLayerId() int32 {
	if x != nil && x.MapLayerId != nil {
		return *x.MapLayerId
	}
	return 0
}

func (x *ViewMapPin) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ViewMapPin) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ViewMapPin) GetLocationName() string {
	if x != nil && x.LocationName != nil {
		return *x.LocationName
	}
	return ""
}

func (x *ViewMapPin) GetLocationPostId() int32 {
	if x != nil && x.LocationPostId != nil {
		return *x.LocationPostId
	}
	return 0
}

func (x *ViewMapPin) GetLocationDescription() string {
	if x != nil && x.LocationDescription != nil {
		return *x.LocationDescription
	}
	return ""
}

func (x *ViewMapPin) GetLocationThumbnailImageId() int32 {
	if x != nil && x.LocationThumbnailImageId != nil {
		return *x.LocationThumbnailImageId
	}
	return 0
}

func (x *ViewMapPin) GetLocationThumbnailImageUrl() string {
	if x != nil && x.LocationThumbnailImageUrl != nil {
		return *x.LocationThumbnailImageUrl
	}
	return ""
}

var File_services_maps_map_proto protoreflect.FileDescriptor

var file_services_maps_map_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f,
	0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xf6, 0x01,
	0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x07, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x11, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xac, 0x01, 0x0a,
	0x08, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x0c,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x0a, 0x4d,
	0x61, 0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x70,
	0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x50, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61,
	0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61,
	0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x05, 0x0a, 0x0a, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x50, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x2a, 0x8e, 0x01, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x49, 0x52, 0x43, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x58, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x43, 0x54, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x54, 0x41, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x41, 0x4d, 0x4f,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x4f, 0x4e,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x41, 0x52, 0x54, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x0a, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x6f, 0x2f,
	0x74, 0x61, 0x6c, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_maps_map_proto_rawDescOnce sync.Once
	file_services_maps_map_proto_rawDescData = file_services_maps_map_proto_rawDesc
)

func file_services_maps_map_proto_rawDescGZIP() []byte {
	file_services_maps_map_proto_rawDescOnce.Do(func() {
		file_services_maps_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_maps_map_proto_rawDescData)
	})
	return file_services_maps_map_proto_rawDescData
}

var file_services_maps_map_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_maps_map_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_services_maps_map_proto_goTypes = []interface{}{
	(PinShape)(0),        // 0: pb.PinShape
	(*Map)(nil),          // 1: pb.Map
	(*ViewMap)(nil),      // 2: pb.ViewMap
	(*MapLayer)(nil),     // 3: pb.MapLayer
	(*ViewMapLayer)(nil), // 4: pb.ViewMapLayer
	(*MapPinType)(nil),   // 5: pb.MapPinType
	(*MapPin)(nil),       // 6: pb.MapPin
	(*ViewMapPin)(nil),   // 7: pb.ViewMapPin
}
var file_services_maps_map_proto_depIdxs = []int32{
	0, // 0: pb.MapPinType.shape:type_name -> pb.PinShape
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_services_maps_map_proto_init() }
func file_services_maps_map_proto_init() {
	if File_services_maps_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_maps_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewMapLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapPinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_maps_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewMapPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_maps_map_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_services_maps_map_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_services_maps_map_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_services_maps_map_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_maps_map_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_maps_map_proto_goTypes,
		DependencyIndexes: file_services_maps_map_proto_depIdxs,
		EnumInfos:         file_services_maps_map_proto_enumTypes,
		MessageInfos:      file_services_maps_map_proto_msgTypes,
	}.Build()
	File_services_maps_map_proto = out.File
	file_services_maps_map_proto_rawDesc = nil
	file_services_maps_map_proto_goTypes = nil
	file_services_maps_map_proto_depIdxs = nil
}
