syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "services/locations/rpc_location.proto";
import "services/locations/location.proto";
import "google/protobuf/empty.proto";


option go_package = "github.com/the-medo/talebound-backend/pb";

service Locations {
  rpc UpdateLocation(UpdateLocationRequest) returns (ViewLocation) {
    option (google.api.http) = {
      patch: "/locations/{locationId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates location properties";
      summary: "Update location";
    };
  };

  rpc GetLocations(LocationPlacement) returns (GetLocationsResponse) {
    option (google.api.http) = {
      get: "/locations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns locations based on placement (world or quest)";
      summary: "Get locations";
    };
  };

  rpc CreateLocation(CreateLocationRequest) returns (ViewLocation) {
    option (google.api.http) = {
      post: "/locations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "creates a new location in the world or a quest";
      summary: "Create location";
    };
  };

  rpc DeleteLocation(DeleteLocationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/locations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes location from the world";
      summary: "Delete world location";
    };
  };
}