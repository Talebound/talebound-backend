// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: services/menus/service_menus.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Menus_UpdateMenu_FullMethodName                = "/pb.Menus/UpdateMenu"
	Menus_GetMenu_FullMethodName                   = "/pb.Menus/GetMenu"
	Menus_CreateMenuItem_FullMethodName            = "/pb.Menus/CreateMenuItem"
	Menus_UpdateMenuItem_FullMethodName            = "/pb.Menus/UpdateMenuItem"
	Menus_UpdateMenuItemMoveGroupUp_FullMethodName = "/pb.Menus/UpdateMenuItemMoveGroupUp"
	Menus_DeleteMenuItem_FullMethodName            = "/pb.Menus/DeleteMenuItem"
	Menus_GetMenuItems_FullMethodName              = "/pb.Menus/GetMenuItems"
	Menus_CreateMenuItemPost_FullMethodName        = "/pb.Menus/CreateMenuItemPost"
	Menus_UpdateMenuItemPost_FullMethodName        = "/pb.Menus/UpdateMenuItemPost"
	Menus_DeleteMenuItemPost_FullMethodName        = "/pb.Menus/DeleteMenuItemPost"
	Menus_GetMenuItemPosts_FullMethodName          = "/pb.Menus/GetMenuItemPosts"
	Menus_GetMenuItemPostsByMenuId_FullMethodName  = "/pb.Menus/GetMenuItemPostsByMenuId"
	Menus_UpdateMenuPosts_FullMethodName           = "/pb.Menus/UpdateMenuPosts"
)

// MenusClient is the client API for Menus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenusClient interface {
	UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error)
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error)
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	UpdateMenuItemMoveGroupUp(ctx context.Context, in *UpdateMenuItemMoveGroupUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error)
	CreateMenuItemPost(ctx context.Context, in *CreateMenuItemPostRequest, opts ...grpc.CallOption) (*MenuItemPost, error)
	UpdateMenuItemPost(ctx context.Context, in *UpdateMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenuItemPost(ctx context.Context, in *DeleteMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMenuItemPosts(ctx context.Context, in *GetMenuItemPostsRequest, opts ...grpc.CallOption) (*GetMenuItemPostsResponse, error)
	GetMenuItemPostsByMenuId(ctx context.Context, in *GetMenuItemPostsByMenuIdRequest, opts ...grpc.CallOption) (*GetMenuItemPostsByMenuIdResponse, error)
	UpdateMenuPosts(ctx context.Context, in *UpdateMenuPostsRequest, opts ...grpc.CallOption) (*UpdateMenuPostsResponse, error)
}

type menusClient struct {
	cc grpc.ClientConnInterface
}

func NewMenusClient(cc grpc.ClientConnInterface) MenusClient {
	return &menusClient{cc}
}

func (c *menusClient) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error) {
	out := new(ViewMenu)
	err := c.cc.Invoke(ctx, Menus_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error) {
	out := new(ViewMenu)
	err := c.cc.Invoke(ctx, Menus_GetMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, Menus_CreateMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, Menus_UpdateMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) UpdateMenuItemMoveGroupUp(ctx context.Context, in *UpdateMenuItemMoveGroupUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Menus_UpdateMenuItemMoveGroupUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Menus_DeleteMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error) {
	out := new(GetMenuItemsResponse)
	err := c.cc.Invoke(ctx, Menus_GetMenuItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) CreateMenuItemPost(ctx context.Context, in *CreateMenuItemPostRequest, opts ...grpc.CallOption) (*MenuItemPost, error) {
	out := new(MenuItemPost)
	err := c.cc.Invoke(ctx, Menus_CreateMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) UpdateMenuItemPost(ctx context.Context, in *UpdateMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Menus_UpdateMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) DeleteMenuItemPost(ctx context.Context, in *DeleteMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Menus_DeleteMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) GetMenuItemPosts(ctx context.Context, in *GetMenuItemPostsRequest, opts ...grpc.CallOption) (*GetMenuItemPostsResponse, error) {
	out := new(GetMenuItemPostsResponse)
	err := c.cc.Invoke(ctx, Menus_GetMenuItemPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) GetMenuItemPostsByMenuId(ctx context.Context, in *GetMenuItemPostsByMenuIdRequest, opts ...grpc.CallOption) (*GetMenuItemPostsByMenuIdResponse, error) {
	out := new(GetMenuItemPostsByMenuIdResponse)
	err := c.cc.Invoke(ctx, Menus_GetMenuItemPostsByMenuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menusClient) UpdateMenuPosts(ctx context.Context, in *UpdateMenuPostsRequest, opts ...grpc.CallOption) (*UpdateMenuPostsResponse, error) {
	out := new(UpdateMenuPostsResponse)
	err := c.cc.Invoke(ctx, Menus_UpdateMenuPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenusServer is the server API for Menus service.
// All implementations must embed UnimplementedMenusServer
// for forward compatibility
type MenusServer interface {
	UpdateMenu(context.Context, *UpdateMenuRequest) (*ViewMenu, error)
	GetMenu(context.Context, *GetMenuRequest) (*ViewMenu, error)
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error)
	UpdateMenuItemMoveGroupUp(context.Context, *UpdateMenuItemMoveGroupUpRequest) (*emptypb.Empty, error)
	DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error)
	GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error)
	CreateMenuItemPost(context.Context, *CreateMenuItemPostRequest) (*MenuItemPost, error)
	UpdateMenuItemPost(context.Context, *UpdateMenuItemPostRequest) (*emptypb.Empty, error)
	DeleteMenuItemPost(context.Context, *DeleteMenuItemPostRequest) (*emptypb.Empty, error)
	GetMenuItemPosts(context.Context, *GetMenuItemPostsRequest) (*GetMenuItemPostsResponse, error)
	GetMenuItemPostsByMenuId(context.Context, *GetMenuItemPostsByMenuIdRequest) (*GetMenuItemPostsByMenuIdResponse, error)
	UpdateMenuPosts(context.Context, *UpdateMenuPostsRequest) (*UpdateMenuPostsResponse, error)
	mustEmbedUnimplementedMenusServer()
}

// UnimplementedMenusServer must be embedded to have forward compatible implementations.
type UnimplementedMenusServer struct {
}

func (UnimplementedMenusServer) UpdateMenu(context.Context, *UpdateMenuRequest) (*ViewMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenusServer) GetMenu(context.Context, *GetMenuRequest) (*ViewMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedMenusServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedMenusServer) UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedMenusServer) UpdateMenuItemMoveGroupUp(context.Context, *UpdateMenuItemMoveGroupUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItemMoveGroupUp not implemented")
}
func (UnimplementedMenusServer) DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItem not implemented")
}
func (UnimplementedMenusServer) GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItems not implemented")
}
func (UnimplementedMenusServer) CreateMenuItemPost(context.Context, *CreateMenuItemPostRequest) (*MenuItemPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItemPost not implemented")
}
func (UnimplementedMenusServer) UpdateMenuItemPost(context.Context, *UpdateMenuItemPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItemPost not implemented")
}
func (UnimplementedMenusServer) DeleteMenuItemPost(context.Context, *DeleteMenuItemPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItemPost not implemented")
}
func (UnimplementedMenusServer) GetMenuItemPosts(context.Context, *GetMenuItemPostsRequest) (*GetMenuItemPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemPosts not implemented")
}
func (UnimplementedMenusServer) GetMenuItemPostsByMenuId(context.Context, *GetMenuItemPostsByMenuIdRequest) (*GetMenuItemPostsByMenuIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemPostsByMenuId not implemented")
}
func (UnimplementedMenusServer) UpdateMenuPosts(context.Context, *UpdateMenuPostsRequest) (*UpdateMenuPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuPosts not implemented")
}
func (UnimplementedMenusServer) mustEmbedUnimplementedMenusServer() {}

// UnsafeMenusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenusServer will
// result in compilation errors.
type UnsafeMenusServer interface {
	mustEmbedUnimplementedMenusServer()
}

func RegisterMenusServer(s grpc.ServiceRegistrar, srv MenusServer) {
	s.RegisterService(&Menus_ServiceDesc, srv)
}

func _Menus_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).UpdateMenu(ctx, req.(*UpdateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_UpdateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_UpdateMenuItemMoveGroupUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemMoveGroupUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).UpdateMenuItemMoveGroupUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_UpdateMenuItemMoveGroupUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).UpdateMenuItemMoveGroupUp(ctx, req.(*UpdateMenuItemMoveGroupUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_DeleteMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).DeleteMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_DeleteMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).DeleteMenuItem(ctx, req.(*DeleteMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_GetMenuItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).GetMenuItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_GetMenuItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).GetMenuItems(ctx, req.(*GetMenuItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_CreateMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).CreateMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_CreateMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).CreateMenuItemPost(ctx, req.(*CreateMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_UpdateMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).UpdateMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_UpdateMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).UpdateMenuItemPost(ctx, req.(*UpdateMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_DeleteMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).DeleteMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_DeleteMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).DeleteMenuItemPost(ctx, req.(*DeleteMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_GetMenuItemPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).GetMenuItemPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_GetMenuItemPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).GetMenuItemPosts(ctx, req.(*GetMenuItemPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_GetMenuItemPostsByMenuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemPostsByMenuIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).GetMenuItemPostsByMenuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_GetMenuItemPostsByMenuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).GetMenuItemPostsByMenuId(ctx, req.(*GetMenuItemPostsByMenuIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menus_UpdateMenuPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenusServer).UpdateMenuPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menus_UpdateMenuPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenusServer).UpdateMenuPosts(ctx, req.(*UpdateMenuPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Menus_ServiceDesc is the grpc.ServiceDesc for Menus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Menus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Menus",
	HandlerType: (*MenusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMenu",
			Handler:    _Menus_UpdateMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Menus_GetMenu_Handler,
		},
		{
			MethodName: "CreateMenuItem",
			Handler:    _Menus_CreateMenuItem_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _Menus_UpdateMenuItem_Handler,
		},
		{
			MethodName: "UpdateMenuItemMoveGroupUp",
			Handler:    _Menus_UpdateMenuItemMoveGroupUp_Handler,
		},
		{
			MethodName: "DeleteMenuItem",
			Handler:    _Menus_DeleteMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItems",
			Handler:    _Menus_GetMenuItems_Handler,
		},
		{
			MethodName: "CreateMenuItemPost",
			Handler:    _Menus_CreateMenuItemPost_Handler,
		},
		{
			MethodName: "UpdateMenuItemPost",
			Handler:    _Menus_UpdateMenuItemPost_Handler,
		},
		{
			MethodName: "DeleteMenuItemPost",
			Handler:    _Menus_DeleteMenuItemPost_Handler,
		},
		{
			MethodName: "GetMenuItemPosts",
			Handler:    _Menus_GetMenuItemPosts_Handler,
		},
		{
			MethodName: "GetMenuItemPostsByMenuId",
			Handler:    _Menus_GetMenuItemPostsByMenuId_Handler,
		},
		{
			MethodName: "UpdateMenuPosts",
			Handler:    _Menus_UpdateMenuPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/menus/service_menus.proto",
}
