CREATE OR REPLACE PROCEDURE update_map_layer_is_main(map_layer_id INT)
    LANGUAGE plpgsql
AS $$
DECLARE
    _map_id INT;
BEGIN
    -- Getting the map_id for the given map_layer_id
    SELECT map_id INTO _map_id FROM map_layers WHERE id = map_layer_id;

    -- If no map_id is found, then exit
    IF _map_id IS NULL THEN
        RAISE NOTICE 'No such map_layer_id exists: %', map_layer_id;
        RETURN;
    END IF;

    -- Set is_main to false for all rows related to the retrieved map_id
    UPDATE map_layers
    SET is_main = false
    WHERE map_id = _map_id;

    -- Set is_main to true for the row with the specified map_layer_id
    UPDATE map_layers
    SET is_main = true
    WHERE id = map_layer_id;
END;
$$;



CREATE TABLE "map_pin_type_group" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar NOT NULL
);

CREATE TABLE "world_map_pin_type_groups" (
    "world_id" int NOT NULL,
    "map_pin_type_group_id" int NOT NULL
);

ALTER TABLE "map_pin_types" ADD COLUMN "section" varchar NOT NULL DEFAULT 'base';
ALTER TABLE "map_pin_types" ADD COLUMN "map_pin_type_group_id" int;

DO $$
DECLARE
    world RECORD;
    _map_pin_type_group_id INT;
BEGIN
    -- create map_pin_type_group for each world
    FOR world IN (SELECT * FROM worlds) LOOP
        INSERT INTO map_pin_type_group(name) VALUES ('World - ' || world.name)
        RETURNING id INTO _map_pin_type_group_id;

        INSERT INTO world_map_pin_type_groups(world_id, map_pin_type_group_id) VALUES (world.id, _map_pin_type_group_id) ON CONFLICT (world_id, map_pin_type_group_id) DO NOTHING;

        -- 2. Update existing map_pin_types in this world to have the new map_pin_type_group_id
        UPDATE map_pin_types
        SET map_pin_type_group_id = _map_pin_type_group_id
        FROM
            map_pin_types mpu
            JOIN world_maps wm ON wm.map_id = mpu.map_id
        WHERE wm.world_id = world.id;
    END LOOP;
END $$;

ALTER TABLE "map_pin_types" ADD FOREIGN KEY ("map_pin_type_group_id") REFERENCES "map_pin_type_group" ("id");
ALTER TABLE "map_pin_types" ALTER COLUMN "map_pin_type_group_id" SET NOT NULL;

ALTER TABLE "map_pin_types" DROP COLUMN map_id;

ALTER TABLE "world_map_pin_type_groups" ADD FOREIGN KEY ("world_id") REFERENCES "worlds" ("id");

ALTER TABLE "world_map_pin_type_groups" ADD FOREIGN KEY ("map_pin_type_group_id") REFERENCES "map_pin_type_group" ("id");

ALTER TABLE "map_pin_types" ADD FOREIGN KEY ("map_pin_type_group_id") REFERENCES "map_pin_type_group" ("id");