-- Return table `world_tags_available`
CREATE TABLE world_tags_available (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag varchar UNIQUE NOT NULL
);

-- Return table `world_tags`
CREATE TABLE world_tags (
    "world_id" int NOT NULL,
    "tag_id" int NOT NULL
);

ALTER TABLE world_tags ADD CONSTRAINT world_tags_world_id_fkey FOREIGN KEY (world_id) REFERENCES worlds(id);
ALTER TABLE world_tags ADD CONSTRAINT world_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES world_tags_available(id);
ALTER TABLE "world_tags" ADD FOREIGN KEY ("tag_id") REFERENCES "world_tags_available" ("id") ON DELETE CASCADE;
CREATE UNIQUE INDEX world_tags_world_id_tag_id_uindex ON world_tags (world_id, tag_id);

INSERT INTO world_tags_available (tag)
SELECT tag FROM module_type_tags_available WHERE module_type = 'world'::module_type;

INSERT INTO world_tags (world_id, tag_id)
SELECT m.world_id, wta.id
FROM
    module_tags mt
    JOIN module_type_tags_available mtta ON mtta.id = mt.tag_id
    JOIN world_tags_available wta ON wta.tag = mtta.tag
    JOIN modules m ON m.id = mt.module_id
WHERE world_id IS NOT NULL;

ALTER TABLE "module_entity_tags_available" RENAME TO "module_tags_available";

DROP TABLE module_tags;
DROP TABLE module_type_tags_available;

ALTER TABLE "modules" DROP COLUMN "module_type";

DROP TYPE IF EXISTS "module_type";

