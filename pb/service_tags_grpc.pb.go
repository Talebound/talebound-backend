// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/tags/service_tags.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tags_GetModuleTypeAvailableTags_FullMethodName     = "/pb.Tags/GetModuleTypeAvailableTags"
	Tags_CreateModuleTypeAvailableTag_FullMethodName   = "/pb.Tags/CreateModuleTypeAvailableTag"
	Tags_UpdateModuleTypeAvailableTag_FullMethodName   = "/pb.Tags/UpdateModuleTypeAvailableTag"
	Tags_DeleteModuleTypeAvailableTag_FullMethodName   = "/pb.Tags/DeleteModuleTypeAvailableTag"
	Tags_CreateModuleTag_FullMethodName                = "/pb.Tags/CreateModuleTag"
	Tags_DeleteModuleTag_FullMethodName                = "/pb.Tags/DeleteModuleTag"
	Tags_GetModuleEntityAvailableTags_FullMethodName   = "/pb.Tags/GetModuleEntityAvailableTags"
	Tags_CreateModuleEntityAvailableTag_FullMethodName = "/pb.Tags/CreateModuleEntityAvailableTag"
	Tags_UpdateModuleEntityAvailableTag_FullMethodName = "/pb.Tags/UpdateModuleEntityAvailableTag"
	Tags_DeleteModuleEntityAvailableTag_FullMethodName = "/pb.Tags/DeleteModuleEntityAvailableTag"
	Tags_CreateEntityTag_FullMethodName                = "/pb.Tags/CreateEntityTag"
	Tags_DeleteEntityTag_FullMethodName                = "/pb.Tags/DeleteEntityTag"
)

// TagsClient is the client API for Tags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsClient interface {
	GetModuleTypeAvailableTags(ctx context.Context, in *GetModuleTypeAvailableTagsRequest, opts ...grpc.CallOption) (*GetModuleTypeAvailableTagsResponse, error)
	CreateModuleTypeAvailableTag(ctx context.Context, in *CreateModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	UpdateModuleTypeAvailableTag(ctx context.Context, in *UpdateModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	DeleteModuleTypeAvailableTag(ctx context.Context, in *DeleteModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateModuleTag(ctx context.Context, in *CreateModuleTagRequest, opts ...grpc.CallOption) (*CreateModuleTagResponse, error)
	DeleteModuleTag(ctx context.Context, in *DeleteModuleTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetModuleEntityAvailableTags(ctx context.Context, in *GetModuleEntityAvailableTagsRequest, opts ...grpc.CallOption) (*GetModuleEntityAvailableTagsResponse, error)
	CreateModuleEntityAvailableTag(ctx context.Context, in *CreateModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*Tag, error)
	UpdateModuleEntityAvailableTag(ctx context.Context, in *UpdateModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*Tag, error)
	DeleteModuleEntityAvailableTag(ctx context.Context, in *DeleteModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateEntityTag(ctx context.Context, in *CreateEntityTagRequest, opts ...grpc.CallOption) (*CreateEntityTagResponse, error)
	DeleteEntityTag(ctx context.Context, in *DeleteEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tagsClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsClient(cc grpc.ClientConnInterface) TagsClient {
	return &tagsClient{cc}
}

func (c *tagsClient) GetModuleTypeAvailableTags(ctx context.Context, in *GetModuleTypeAvailableTagsRequest, opts ...grpc.CallOption) (*GetModuleTypeAvailableTagsResponse, error) {
	out := new(GetModuleTypeAvailableTagsResponse)
	err := c.cc.Invoke(ctx, Tags_GetModuleTypeAvailableTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) CreateModuleTypeAvailableTag(ctx context.Context, in *CreateModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Tags_CreateModuleTypeAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) UpdateModuleTypeAvailableTag(ctx context.Context, in *UpdateModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Tags_UpdateModuleTypeAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) DeleteModuleTypeAvailableTag(ctx context.Context, in *DeleteModuleTypeAvailableTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tags_DeleteModuleTypeAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) CreateModuleTag(ctx context.Context, in *CreateModuleTagRequest, opts ...grpc.CallOption) (*CreateModuleTagResponse, error) {
	out := new(CreateModuleTagResponse)
	err := c.cc.Invoke(ctx, Tags_CreateModuleTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) DeleteModuleTag(ctx context.Context, in *DeleteModuleTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tags_DeleteModuleTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) GetModuleEntityAvailableTags(ctx context.Context, in *GetModuleEntityAvailableTagsRequest, opts ...grpc.CallOption) (*GetModuleEntityAvailableTagsResponse, error) {
	out := new(GetModuleEntityAvailableTagsResponse)
	err := c.cc.Invoke(ctx, Tags_GetModuleEntityAvailableTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) CreateModuleEntityAvailableTag(ctx context.Context, in *CreateModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, Tags_CreateModuleEntityAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) UpdateModuleEntityAvailableTag(ctx context.Context, in *UpdateModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, Tags_UpdateModuleEntityAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) DeleteModuleEntityAvailableTag(ctx context.Context, in *DeleteModuleEntityAvailableTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tags_DeleteModuleEntityAvailableTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) CreateEntityTag(ctx context.Context, in *CreateEntityTagRequest, opts ...grpc.CallOption) (*CreateEntityTagResponse, error) {
	out := new(CreateEntityTagResponse)
	err := c.cc.Invoke(ctx, Tags_CreateEntityTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) DeleteEntityTag(ctx context.Context, in *DeleteEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tags_DeleteEntityTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsServer is the server API for Tags service.
// All implementations must embed UnimplementedTagsServer
// for forward compatibility
type TagsServer interface {
	GetModuleTypeAvailableTags(context.Context, *GetModuleTypeAvailableTagsRequest) (*GetModuleTypeAvailableTagsResponse, error)
	CreateModuleTypeAvailableTag(context.Context, *CreateModuleTypeAvailableTagRequest) (*ViewTag, error)
	UpdateModuleTypeAvailableTag(context.Context, *UpdateModuleTypeAvailableTagRequest) (*ViewTag, error)
	DeleteModuleTypeAvailableTag(context.Context, *DeleteModuleTypeAvailableTagRequest) (*emptypb.Empty, error)
	CreateModuleTag(context.Context, *CreateModuleTagRequest) (*CreateModuleTagResponse, error)
	DeleteModuleTag(context.Context, *DeleteModuleTagRequest) (*emptypb.Empty, error)
	GetModuleEntityAvailableTags(context.Context, *GetModuleEntityAvailableTagsRequest) (*GetModuleEntityAvailableTagsResponse, error)
	CreateModuleEntityAvailableTag(context.Context, *CreateModuleEntityAvailableTagRequest) (*Tag, error)
	UpdateModuleEntityAvailableTag(context.Context, *UpdateModuleEntityAvailableTagRequest) (*Tag, error)
	DeleteModuleEntityAvailableTag(context.Context, *DeleteModuleEntityAvailableTagRequest) (*emptypb.Empty, error)
	CreateEntityTag(context.Context, *CreateEntityTagRequest) (*CreateEntityTagResponse, error)
	DeleteEntityTag(context.Context, *DeleteEntityTagRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTagsServer()
}

// UnimplementedTagsServer must be embedded to have forward compatible implementations.
type UnimplementedTagsServer struct {
}

func (UnimplementedTagsServer) GetModuleTypeAvailableTags(context.Context, *GetModuleTypeAvailableTagsRequest) (*GetModuleTypeAvailableTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleTypeAvailableTags not implemented")
}
func (UnimplementedTagsServer) CreateModuleTypeAvailableTag(context.Context, *CreateModuleTypeAvailableTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleTypeAvailableTag not implemented")
}
func (UnimplementedTagsServer) UpdateModuleTypeAvailableTag(context.Context, *UpdateModuleTypeAvailableTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModuleTypeAvailableTag not implemented")
}
func (UnimplementedTagsServer) DeleteModuleTypeAvailableTag(context.Context, *DeleteModuleTypeAvailableTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleTypeAvailableTag not implemented")
}
func (UnimplementedTagsServer) CreateModuleTag(context.Context, *CreateModuleTagRequest) (*CreateModuleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleTag not implemented")
}
func (UnimplementedTagsServer) DeleteModuleTag(context.Context, *DeleteModuleTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleTag not implemented")
}
func (UnimplementedTagsServer) GetModuleEntityAvailableTags(context.Context, *GetModuleEntityAvailableTagsRequest) (*GetModuleEntityAvailableTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleEntityAvailableTags not implemented")
}
func (UnimplementedTagsServer) CreateModuleEntityAvailableTag(context.Context, *CreateModuleEntityAvailableTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleEntityAvailableTag not implemented")
}
func (UnimplementedTagsServer) UpdateModuleEntityAvailableTag(context.Context, *UpdateModuleEntityAvailableTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModuleEntityAvailableTag not implemented")
}
func (UnimplementedTagsServer) DeleteModuleEntityAvailableTag(context.Context, *DeleteModuleEntityAvailableTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleEntityAvailableTag not implemented")
}
func (UnimplementedTagsServer) CreateEntityTag(context.Context, *CreateEntityTagRequest) (*CreateEntityTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityTag not implemented")
}
func (UnimplementedTagsServer) DeleteEntityTag(context.Context, *DeleteEntityTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityTag not implemented")
}
func (UnimplementedTagsServer) mustEmbedUnimplementedTagsServer() {}

// UnsafeTagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServer will
// result in compilation errors.
type UnsafeTagsServer interface {
	mustEmbedUnimplementedTagsServer()
}

func RegisterTagsServer(s grpc.ServiceRegistrar, srv TagsServer) {
	s.RegisterService(&Tags_ServiceDesc, srv)
}

func _Tags_GetModuleTypeAvailableTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleTypeAvailableTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).GetModuleTypeAvailableTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_GetModuleTypeAvailableTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).GetModuleTypeAvailableTags(ctx, req.(*GetModuleTypeAvailableTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_CreateModuleTypeAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleTypeAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).CreateModuleTypeAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_CreateModuleTypeAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).CreateModuleTypeAvailableTag(ctx, req.(*CreateModuleTypeAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_UpdateModuleTypeAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleTypeAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).UpdateModuleTypeAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_UpdateModuleTypeAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).UpdateModuleTypeAvailableTag(ctx, req.(*UpdateModuleTypeAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_DeleteModuleTypeAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleTypeAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).DeleteModuleTypeAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_DeleteModuleTypeAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).DeleteModuleTypeAvailableTag(ctx, req.(*DeleteModuleTypeAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_CreateModuleTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).CreateModuleTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_CreateModuleTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).CreateModuleTag(ctx, req.(*CreateModuleTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_DeleteModuleTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).DeleteModuleTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_DeleteModuleTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).DeleteModuleTag(ctx, req.(*DeleteModuleTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_GetModuleEntityAvailableTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleEntityAvailableTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).GetModuleEntityAvailableTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_GetModuleEntityAvailableTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).GetModuleEntityAvailableTags(ctx, req.(*GetModuleEntityAvailableTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_CreateModuleEntityAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleEntityAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).CreateModuleEntityAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_CreateModuleEntityAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).CreateModuleEntityAvailableTag(ctx, req.(*CreateModuleEntityAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_UpdateModuleEntityAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleEntityAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).UpdateModuleEntityAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_UpdateModuleEntityAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).UpdateModuleEntityAvailableTag(ctx, req.(*UpdateModuleEntityAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_DeleteModuleEntityAvailableTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleEntityAvailableTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).DeleteModuleEntityAvailableTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_DeleteModuleEntityAvailableTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).DeleteModuleEntityAvailableTag(ctx, req.(*DeleteModuleEntityAvailableTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_CreateEntityTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).CreateEntityTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_CreateEntityTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).CreateEntityTag(ctx, req.(*CreateEntityTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_DeleteEntityTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).DeleteEntityTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_DeleteEntityTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).DeleteEntityTag(ctx, req.(*DeleteEntityTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tags_ServiceDesc is the grpc.ServiceDesc for Tags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Tags",
	HandlerType: (*TagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModuleTypeAvailableTags",
			Handler:    _Tags_GetModuleTypeAvailableTags_Handler,
		},
		{
			MethodName: "CreateModuleTypeAvailableTag",
			Handler:    _Tags_CreateModuleTypeAvailableTag_Handler,
		},
		{
			MethodName: "UpdateModuleTypeAvailableTag",
			Handler:    _Tags_UpdateModuleTypeAvailableTag_Handler,
		},
		{
			MethodName: "DeleteModuleTypeAvailableTag",
			Handler:    _Tags_DeleteModuleTypeAvailableTag_Handler,
		},
		{
			MethodName: "CreateModuleTag",
			Handler:    _Tags_CreateModuleTag_Handler,
		},
		{
			MethodName: "DeleteModuleTag",
			Handler:    _Tags_DeleteModuleTag_Handler,
		},
		{
			MethodName: "GetModuleEntityAvailableTags",
			Handler:    _Tags_GetModuleEntityAvailableTags_Handler,
		},
		{
			MethodName: "CreateModuleEntityAvailableTag",
			Handler:    _Tags_CreateModuleEntityAvailableTag_Handler,
		},
		{
			MethodName: "UpdateModuleEntityAvailableTag",
			Handler:    _Tags_UpdateModuleEntityAvailableTag_Handler,
		},
		{
			MethodName: "DeleteModuleEntityAvailableTag",
			Handler:    _Tags_DeleteModuleEntityAvailableTag_Handler,
		},
		{
			MethodName: "CreateEntityTag",
			Handler:    _Tags_CreateEntityTag_Handler,
		},
		{
			MethodName: "DeleteEntityTag",
			Handler:    _Tags_DeleteEntityTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/tags/service_tags.proto",
}
