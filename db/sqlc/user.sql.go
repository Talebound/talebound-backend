// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addUserPasswordReset = `-- name: AddUserPasswordReset :one
INSERT INTO user_password_reset (user_id, code) VALUES ($1, $2) RETURNING user_id, code, expired_at
`

type AddUserPasswordResetParams struct {
	UserID int32  `json:"user_id"`
	Code   string `json:"code"`
}

func (q *Queries) AddUserPasswordReset(ctx context.Context, arg AddUserPasswordResetParams) (UserPasswordReset, error) {
	row := q.db.QueryRowContext(ctx, addUserPasswordReset, arg.UserID, arg.Code)
	var i UserPasswordReset
	err := row.Scan(&i.UserID, &i.Code, &i.ExpiredAt)
	return i, err
}

const addUserRole = `-- name: AddUserRole :one
INSERT INTO user_roles (user_id, role_id) VALUES ($1, $2) RETURNING user_id, role_id, created_at
`

type AddUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, addUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users
(
    username,
    hashed_password,
    email
)
VALUES
    ($1, $2, $3)
RETURNING id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const deleteUserPasswordReset = `-- name: DeleteUserPasswordReset :exec
DELETE FROM user_password_reset WHERE user_id = $1 AND code = $2
`

type DeleteUserPasswordResetParams struct {
	UserID int32  `json:"user_id"`
	Code   string `json:"code"`
}

func (q *Queries) DeleteUserPasswordReset(ctx context.Context, arg DeleteUserPasswordResetParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPasswordReset, arg.UserID, arg.Code)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserPasswordReset = `-- name: GetUserPasswordReset :one
SELECT user_id, code, expired_at FROM user_password_reset WHERE code = $1 AND expired_at > NOW() LIMIT 1
`

func (q *Queries) GetUserPasswordReset(ctx context.Context, code string) (UserPasswordReset, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordReset, code)
	var i UserPasswordReset
	err := row.Scan(&i.UserID, &i.Code, &i.ExpiredAt)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT
    ur.user_id, ur.role_id, ur.created_at,
    r.name AS role_name,
    r.description AS role_description
FROM
    user_roles ur
    JOIN roles r ON ur.role_id = r.id
WHERE user_id = $1
`

type GetUserRolesRow struct {
	UserID          int32     `json:"user_id"`
	RoleID          int32     `json:"role_id"`
	CreatedAt       time.Time `json:"created_at"`
	RoleName        string    `json:"role_name"`
	RoleDescription string    `json:"role_description"`
}

func (q *Queries) GetUserRoles(ctx context.Context, userID int32) ([]GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRolesRow{}
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.CreatedAt,
			&i.RoleName,
			&i.RoleDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT
    id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified
FROM
    users
ORDER BY username
LIMIT $2
OFFSET $1
`

type GetUsersParams struct {
	PageOffset int32 `json:"page_offset"`
	PageLimit  int32 `json:"page_limit"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.ImgID,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.IsEmailVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasUserRole = `-- name: HasUserRole :one
SELECT
    user_id, role_id, created_at, id, name, description
FROM
    user_roles ur
    JOIN roles r on ur.role_id = r.id
WHERE user_id = $1 AND r.name = $2 LIMIT 1
`

type HasUserRoleParams struct {
	UserID int32  `json:"user_id"`
	Role   string `json:"role"`
}

type HasUserRoleRow struct {
	UserID      int32     `json:"user_id"`
	RoleID      int32     `json:"role_id"`
	CreatedAt   time.Time `json:"created_at"`
	ID          int32     `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) HasUserRole(ctx context.Context, arg HasUserRoleParams) (HasUserRoleRow, error) {
	row := q.db.QueryRowContext(ctx, hasUserRole, arg.UserID, arg.Role)
	var i HasUserRoleRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.ID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const removeUserRole = `-- name: RemoveUserRole :exec
DELETE FROM user_roles WHERE user_id = $1 AND role_id = $2
`

type RemoveUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) RemoveUserRole(ctx context.Context, arg RemoveUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, removeUserRole, arg.UserID, arg.RoleID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    username = COALESCE($3, username),
    email = COALESCE($4, email),
    img_id = COALESCE($5, img_id),
    is_email_verified = COALESCE($6, is_email_verified)
WHERE
    id = $7
RETURNING id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified
`

type UpdateUserParams struct {
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	Username          sql.NullString `json:"username"`
	Email             sql.NullString `json:"email"`
	ImgID             sql.NullInt32  `json:"img_id"`
	IsEmailVerified   sql.NullBool   `json:"is_email_verified"`
	ID                int32          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Username,
		arg.Email,
		arg.ImgID,
		arg.IsEmailVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
