syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_update_user.proto";
import "rpc_login_user.proto";
import "rpc_verify_email.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_user_roles.proto";
import "rpc_chat.proto";
import "rpc_get_user.proto";
import "rpc_reset_password.proto";
import "rpc_user_evaluations.proto";
import "rpc_upload_image.proto";
import "rpc_world.proto";
import "rpc_post.proto";
import "rpc_image.proto";
import "rpc_post_history.proto";
import "image.proto";
import "world.proto";
import "post.proto";
import "user.proto";
import "tag.proto";
import "google/protobuf/empty.proto";
import "rpc_menu.proto";
import "menu.proto";


option go_package = "github.com/the-medo/talebound-backend/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Talebound API";
    version: "1.0";
    contact: {
      name: "Medo";
      url: "https://github.com/the-medo/talebound-backend";
      email: "martinmederly@gmail.com";
    };
  };
};


service Talebound {


  // ============= USER ROLES =================
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (google.api.http) = {
      get: "/users/roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns full list of user roles";
      summary: "Get user roles (admin, moderator, etc.)";
    };
  };

  rpc AddRoleToUser(AddRoleToUserRequest) returns (AddRoleToUserResponse) {
    option (google.api.http) = {
      post: "/users/roles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new role to user";
      summary: "Add role to user";
    };
  };

  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (RemoveRoleFromUserResponse) {
    option (google.api.http) = {
      delete: "/users/{userId}/roles/{roleId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Remove role from user";
    };
  };


  // ============= CHAT MESSAGES =================

  rpc GetChatMessages(GetChatMessagesRequest) returns (GetChatMessagesResponse) {
    option (google.api.http) = {
      get: "/chat"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of chat messages";
      summary: "Get list of chat messages";
    };
  };

  rpc AddChatMessage(AddChatMessageRequest) returns (AddChatMessageResponse) {
    option (google.api.http) = {
      post: "/chat"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new chat message";
      summary: "Add new chat message";
    };
  };

  rpc DeleteChatMessage(DeleteChatMessageRequest) returns (DeleteChatMessageResponse) {
    option (google.api.http) = {
      delete: "/chat/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Delete chat message";
    };
  };

  // ============= USERS =================

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get: "/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of users";
      summary: "Get list of users";
    };
  };

  rpc GetUserById(GetUserByIdRequest) returns (ViewUser) {
    option (google.api.http) = {
      get: "/users/id/{userId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns information about one user";
      summary: "Get user";
    };
  };

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "use this API to create a new user";
      summary: "Create new user";
    };
  };

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "use this API to update user";
      summary: "Update user";
    };
  };

  rpc UpdateUserIntroduction(UpdateUserIntroductionRequest) returns (Post) {
    option (google.api.http) = {
      patch: "/users/{userId}/introduction"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "use this API to update user introduction";
      summary: "Update user introduction";
    };
  };

  // ============= LOGIN & LOGOUT =================
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/users/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "login user - get user object and set HttpOnly cookies";
      summary: "Login user";
    };
  };

  rpc LogoutUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "logout user - it clears HttpOnly cookies - no request data required";
      summary: "Logout user";
    };
  };

  rpc ResetPasswordSendCode(ResetPasswordSendCodeRequest) returns (ResetPasswordSendCodeResponse) {
    option (google.api.http) = {
      post: "/users/reset/send-code"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "in case a user forgot their password, they can request a password reset using this endpoint";
      summary: "Request password reset";
    };
  };

  rpc ResetPasswordVerifyCode(ResetPasswordVerifyCodeRequest) returns (ResetPasswordVerifyCodeResponse) {
    option (google.api.http) = {
      post: "/users/reset/verify-code"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "in case a user forgot their password, they can confirm the password reset using this endpoint";
      summary: "Confirm password reset";
    };
  };

  rpc ResetPasswordVerifyCodeValidity(ResetPasswordVerifyCodeValidityRequest) returns (ResetPasswordVerifyCodeValidityResponse) {
    option (google.api.http) = {
      get: "/users/reset/verify-code-validity"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "validate reset password secret code";
      summary: "Validate reset password secret code";
    };
  };

  // ============= VERIFY =================
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/verify"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "verify user email";
      summary: "Verify email";
    };
  };

  // ============= USER EVALUATION =================
  rpc GetEvaluationById(GetEvaluationByIdRequest) returns (GetEvaluationByIdResponse) {
    option (google.api.http) = {
      get: "/evaluations/id/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get evaluation by id";
      summary: "Get evaluation by id";
    };
  };

  rpc GetEvaluationsByType(GetEvaluationsByTypeRequest) returns (GetEvaluationsByTypeResponse) {
    option (google.api.http) = {
      get: "/evaluations/type/{type}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get evaluations by type";
      summary: "Get evaluations by type";
    };
  };

  rpc CreateOrUpdateEvaluationVote(CreateOrUpdateEvaluationVoteRequest) returns (CreateOrUpdateEvaluationVoteResponse) {
    option (google.api.http) = {
      post: "/users/{userId}/evaluation-vote"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "create or update evaluation vote";
      summary: "Create or update evaluation vote";
    };
  };

  rpc GetEvaluationVotesByUserId(GetEvaluationVotesByUserIdRequest) returns (GetEvaluationVotesByUserIdResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get evaluation votes by user id";
      summary: "Get evaluation votes by user id";
    };
  };

  rpc GetEvaluationVotesByUserIdAndVoter(GetEvaluationVotesByUserIdAndVoterRequest) returns (GetEvaluationVotesByUserIdAndVoterResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote/voter/{userIdVoter}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get evaluation votes by user id and voter";
      summary: "Get evaluation votes by user id and voter";
    };
  };

  rpc DeleteEvaluationVote(DeleteEvaluationVoteRequest) returns (DeleteEvaluationVoteResponse) {
    option (google.api.http) = {
      delete: "/users/{userId}/evaluation-vote/{evaluationId}/voter/{userIdVoter}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "delete evaluation vote";
      summary: "Delete evaluation vote";
    };
  };

  rpc GetAverageUserEvaluationsByType(GetAverageUserEvaluationsByTypeRequest) returns (GetAverageUserEvaluationsByTypeResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote/type/{type}/average"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get average user evaluation by type";
      summary: "Get average user evaluation";
    };
  };

  // ============= IMAGES ================

  rpc GetImages(GetImagesRequest) returns (GetImagesResponse) {
    option (google.api.http) = {
      get: "/images"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get images - paginated, filterable by user and image type";
      summary: "Get images";
    };
  };
  rpc GetUserImages(GetUserImagesRequest) returns (GetImagesResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/images"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get images of user by userID - filterable by image type";
      summary: "Get user images";
    };
  };
  rpc UploadDefaultImage(UploadImageRequest) returns (Image) {
    option (google.api.http) = {
      post: "/images"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads an image file";
      summary: "Upload image";
    };
  };
  rpc UploadUserAvatar(UploadUserAvatarRequest) returns (UploadUserAvatarResponse) {
    option (google.api.http) = {
      post: "/users/{userId}/avatar"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads an user avatar";
      summary: "Upload user avatar";
    };
  };

  // ============= POSTS =================

  rpc GetPostById(GetPostByIdRequest) returns (Post) {
    option (google.api.http) = {
      get: "/posts/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get content of post by its ID";
      summary: "Get post by id";
    };
  };

  rpc GetUserPosts(GetUserPostsRequest) returns (GetUserPostsResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/posts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get posts of user by userID";
      summary: "Get user posts";
    };
  };

  rpc GetPostHistory(GetPostHistoryRequest) returns (GetPostHistoryResponse) {
    option (google.api.http) = {
      get: "/posts/{postId}/history"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get list of history changes of post by its ID - without content";
      summary: "Get post history";
    };
  };

  rpc GetPostHistoryById(GetPostHistoryByIdRequest) returns (HistoryPost) {
    option (google.api.http) = {
      get: "/posts/{postId}/history/{postHistoryId}/content"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get content of single update iteration of post";
      summary: "Get post history content";
    };
  };

  rpc CreatePost(CreatePostRequest) returns (Post) {
    option (google.api.http) = {
      post: "/posts"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "create completely new post";
      summary: "Create post";
    };
  };

  rpc UpdatePost(UpdatePostRequest) returns (Post) {
    option (google.api.http) = {
      patch: "/posts/{postId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "update title or content of the post";
      summary: "Update post";
    };
  };

  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/posts/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes post";
      summary: "Delete post";
    };
  };

  rpc GetPostTypes(google.protobuf.Empty) returns (GetPostTypesResponse) {
    option (google.api.http) = {
      get: "/post_types"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "get post types with info (draftable, privatable)";
      summary: "Get post types";
    };
  };

  // ============= WORLD =================

  rpc GetWorldsOfCreator(GetWorldsOfCreatorRequest) returns (GetWorldsOfCreatorResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/worlds"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets list of worlds that the creator is part of";
      summary: "Get creator's worlds";
    };
  };

  rpc CreateWorld(CreateWorldRequest) returns (World) {
    option (google.api.http) = {
      post: "/worlds"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "creates completely new world";
      summary: "Create world";
    };
  };

  rpc UpdateWorld(UpdateWorldRequest) returns (World) {
    option (google.api.http) = {
      patch: "/worlds/{worldId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates world properties (NO images or stats!)";
      summary: "Update world";
    };
  };

  rpc UploadWorldImage(UploadWorldImageRequest) returns (Image) {
    option (google.api.http) = {
      post: "/worlds/{worldId}/images"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads and sets new image for given world";
      summary: "Upload image for world";
    };
  };

  rpc GetAvailableWorldTags(google.protobuf.Empty) returns (GetAvailableWorldTagsResponse) {
    option (google.api.http) = {
      get: "/tags/worlds"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets list of tags, that are usable for worlds";
      summary: "Get available world tags";
    };
  };

  rpc CreateAvailableWorldTag(CreateAvailableWorldTagRequest) returns (Tag) {
    option (google.api.http) = {
      post: "/tags/worlds"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "creates new tag, that can be assigned to worlds";
      summary: "Create available world tag";
    };
  };

  rpc UpdateAvailableWorldTag(UpdateAvailableWorldTagRequest) returns (Tag) {
    option (google.api.http) = {
      patch: "/tags/worlds/{tagId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates world-assignable tag";
      summary: "Update available world tag";
    };
  };

  rpc DeleteAvailableWorldTag(DeleteAvailableWorldTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/tags/worlds/{tagId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes available world tag and removes all its assignments";
      summary: "Delete available world tag";
    };
  };

  rpc AddWorldTag(AddWorldTagRequest) returns (Tag) {
    option (google.api.http) = {
      post: "/worlds/{worldId}/tags"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "assigns one tag to the world";
      summary: "Add tag world";
    };
  };

  rpc RemoveWorldTag(RemoveWorldTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/worlds/{worldId}/tags"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes tag from the world";
      summary: "Remove world tag";
    };
  };

  rpc GetWorldAdmins(GetWorldAdminsRequest) returns (GetWorldAdminsResponse) {
    option (google.api.http) = {
      get: "/worlds/{worldId}/admin"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns admins and admin requests for world";
      summary: "Get world admins";
    };
  };

  rpc CreateWorldAdmin(CreateWorldAdminRequest) returns (WorldAdmin) {
    option (google.api.http) = {
      post: "/worlds/{worldId}/admin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds request to become admin of the world";
      summary: "Create world admin";
    };
  };

  rpc UpdateWorldAdmin(UpdateWorldAdminRequest) returns (WorldAdmin) {
    option (google.api.http) = {
      patch: "/worlds/{worldId}/admin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates world admin request (approve / decline)";
      summary: "Update world admin";
    };
  };

  rpc DeleteWorldAdmin(DeleteWorldAdminRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/worlds/{worldId}/admin"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes world admin";
      summary: "Delete world admin";
    };
  };

  rpc GetWorldDailyActivity(GetWorldDailyActivityRequest) returns (GetWorldDailyActivityResponse) {
    option (google.api.http) = {
      get: "/worlds/activity/daily"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets activity by day";
      summary: "Get world(s) daily activity";
    };
  };

  rpc GetWorldMonthlyActivity(GetWorldMonthlyActivityRequest) returns (GetWorldMonthlyActivityResponse) {
    option (google.api.http) = {
      get: "/worlds/activity/monthly"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets world activity grouped by month";
      summary: "Get world(s) monthly activity";
    };
  };

  rpc GetWorlds(GetWorldsRequest) returns (GetWorldsResponse) {
    option (google.api.http) = {
      get: "/worlds"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets list of worlds";
      summary: "Get worlds ";
    };
  };

  rpc GetWorldById(GetWorldByIdRequest) returns (World) {
    option (google.api.http) = {
      get: "/worlds/{worldId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets world by ID";
      summary: "Get world by ID ";
    };
  };

  rpc UpdateWorldIntroduction(UpdateWorldIntroductionRequest) returns (Post) {
    option (google.api.http) = {
      patch: "/worlds/{worldId}/introduction"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "creates/updates world introduction";
      summary: "Update world introduction";
    };
  };

  rpc UpdateMenu(UpdateMenuRequest) returns (Menu) {
    option (google.api.http) = {
      patch: "/menus/{menuId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates menu (code or image)";
      summary: "Update Menu";
    };
  };

  rpc GetMenu(GetMenuRequest) returns (Menu) {
    option (google.api.http) = {
      get: "/menus/{menuId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets menu by ID";
      summary: "Get menu by ID ";
    };
  };

  rpc CreateMenuItem(CreateMenuItemRequest) returns (MenuItem) {
    option (google.api.http) = {
      post: "/menus/{menuId}/items"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new menu item to the menu";
      summary: "Create menu item";
    };
  };

  rpc UpdateMenuItem(UpdateMenuItemRequest) returns (MenuItem) {
    option (google.api.http) = {
      patch: "/menus/{menuId}/items/{menuItemId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates menu item";
      summary: "Update menu item";
    };
  };

  rpc UpdateMenuItemMoveGroupUp(UpdateMenuItemMoveGroupUpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/menus/{menuId}/groups/{menuItemId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "move menu item group up";
      summary: "Move menu item group up";
    };
  };

  rpc DeleteMenuItem(DeleteMenuItemRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/menus/{menuId}/items/{menuItemId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes menu item";
      summary: "Delete menu item";
    };
  };

  rpc GetMenuItems(GetMenuItemsRequest) returns (GetMenuItemsResponse) {
    option (google.api.http) = {
      get: "/menus/{menuId}/items"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets list of menu items";
      summary: "Get menu items";
    };
  };

  rpc CreateMenuItemPost(CreateMenuItemPostRequest) returns (MenuItemPost) {
    option (google.api.http) = {
      post: "/menus/{menuId}/items/{menuItemId}/posts"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new menu item post to the menu item";
      summary: "Create menu item post";
    };
  };

  rpc UpdateMenuItemPost(UpdateMenuItemPostRequest) returns (MenuItemPost) {
    option (google.api.http) = {
      patch: "/menus/{menuId}/items/{menuItemId}/posts/{postId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "updates menu item post";
      summary: "Update menu item post";
    };
  };

  rpc DeleteMenuItemPost(DeleteMenuItemPostRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/menus/{menuId}/items/{menuItemId}/posts/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "deletes menu item post";
      summary: "Delete menu item post";
    };
  };

  rpc GetMenuItemPosts(GetMenuItemPostsRequest) returns (GetMenuItemPostsResponse) {
    option (google.api.http) = {
      get: "/menus/{menuId}/items/{menuItemId}/posts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "gets list of menu item posts";
      summary: "Get menu item posts";
    };
  };
}