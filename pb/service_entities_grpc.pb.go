// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/entities/service_entities.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Entities_CreateEntityGroup_FullMethodName        = "/pb.Entities/CreateEntityGroup"
	Entities_UpdateEntityGroup_FullMethodName        = "/pb.Entities/UpdateEntityGroup"
	Entities_DeleteEntityGroup_FullMethodName        = "/pb.Entities/DeleteEntityGroup"
	Entities_CreateEntityGroupContent_FullMethodName = "/pb.Entities/CreateEntityGroupContent"
	Entities_UpdateEntityGroupContent_FullMethodName = "/pb.Entities/UpdateEntityGroupContent"
	Entities_DeleteEntityGroupContent_FullMethodName = "/pb.Entities/DeleteEntityGroupContent"
)

// EntitiesClient is the client API for Entities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitiesClient interface {
	CreateEntityGroup(ctx context.Context, in *CreateEntityGroupRequest, opts ...grpc.CallOption) (*EntityGroup, error)
	UpdateEntityGroup(ctx context.Context, in *UpdateEntityGroupRequest, opts ...grpc.CallOption) (*EntityGroup, error)
	DeleteEntityGroup(ctx context.Context, in *DeleteEntityGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateEntityGroupContent(ctx context.Context, in *CreateEntityGroupContentRequest, opts ...grpc.CallOption) (*EntityGroupContent, error)
	UpdateEntityGroupContent(ctx context.Context, in *UpdateEntityGroupContentRequest, opts ...grpc.CallOption) (*EntityGroupContent, error)
	DeleteEntityGroupContent(ctx context.Context, in *DeleteEntityGroupContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type entitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitiesClient(cc grpc.ClientConnInterface) EntitiesClient {
	return &entitiesClient{cc}
}

func (c *entitiesClient) CreateEntityGroup(ctx context.Context, in *CreateEntityGroupRequest, opts ...grpc.CallOption) (*EntityGroup, error) {
	out := new(EntityGroup)
	err := c.cc.Invoke(ctx, Entities_CreateEntityGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) UpdateEntityGroup(ctx context.Context, in *UpdateEntityGroupRequest, opts ...grpc.CallOption) (*EntityGroup, error) {
	out := new(EntityGroup)
	err := c.cc.Invoke(ctx, Entities_UpdateEntityGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) DeleteEntityGroup(ctx context.Context, in *DeleteEntityGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Entities_DeleteEntityGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) CreateEntityGroupContent(ctx context.Context, in *CreateEntityGroupContentRequest, opts ...grpc.CallOption) (*EntityGroupContent, error) {
	out := new(EntityGroupContent)
	err := c.cc.Invoke(ctx, Entities_CreateEntityGroupContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) UpdateEntityGroupContent(ctx context.Context, in *UpdateEntityGroupContentRequest, opts ...grpc.CallOption) (*EntityGroupContent, error) {
	out := new(EntityGroupContent)
	err := c.cc.Invoke(ctx, Entities_UpdateEntityGroupContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) DeleteEntityGroupContent(ctx context.Context, in *DeleteEntityGroupContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Entities_DeleteEntityGroupContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitiesServer is the server API for Entities service.
// All implementations must embed UnimplementedEntitiesServer
// for forward compatibility
type EntitiesServer interface {
	CreateEntityGroup(context.Context, *CreateEntityGroupRequest) (*EntityGroup, error)
	UpdateEntityGroup(context.Context, *UpdateEntityGroupRequest) (*EntityGroup, error)
	DeleteEntityGroup(context.Context, *DeleteEntityGroupRequest) (*emptypb.Empty, error)
	CreateEntityGroupContent(context.Context, *CreateEntityGroupContentRequest) (*EntityGroupContent, error)
	UpdateEntityGroupContent(context.Context, *UpdateEntityGroupContentRequest) (*EntityGroupContent, error)
	DeleteEntityGroupContent(context.Context, *DeleteEntityGroupContentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEntitiesServer()
}

// UnimplementedEntitiesServer must be embedded to have forward compatible implementations.
type UnimplementedEntitiesServer struct {
}

func (UnimplementedEntitiesServer) CreateEntityGroup(context.Context, *CreateEntityGroupRequest) (*EntityGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityGroup not implemented")
}
func (UnimplementedEntitiesServer) UpdateEntityGroup(context.Context, *UpdateEntityGroupRequest) (*EntityGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityGroup not implemented")
}
func (UnimplementedEntitiesServer) DeleteEntityGroup(context.Context, *DeleteEntityGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityGroup not implemented")
}
func (UnimplementedEntitiesServer) CreateEntityGroupContent(context.Context, *CreateEntityGroupContentRequest) (*EntityGroupContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityGroupContent not implemented")
}
func (UnimplementedEntitiesServer) UpdateEntityGroupContent(context.Context, *UpdateEntityGroupContentRequest) (*EntityGroupContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityGroupContent not implemented")
}
func (UnimplementedEntitiesServer) DeleteEntityGroupContent(context.Context, *DeleteEntityGroupContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityGroupContent not implemented")
}
func (UnimplementedEntitiesServer) mustEmbedUnimplementedEntitiesServer() {}

// UnsafeEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitiesServer will
// result in compilation errors.
type UnsafeEntitiesServer interface {
	mustEmbedUnimplementedEntitiesServer()
}

func RegisterEntitiesServer(s grpc.ServiceRegistrar, srv EntitiesServer) {
	s.RegisterService(&Entities_ServiceDesc, srv)
}

func _Entities_CreateEntityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).CreateEntityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_CreateEntityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).CreateEntityGroup(ctx, req.(*CreateEntityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_UpdateEntityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).UpdateEntityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_UpdateEntityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).UpdateEntityGroup(ctx, req.(*UpdateEntityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_DeleteEntityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).DeleteEntityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_DeleteEntityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).DeleteEntityGroup(ctx, req.(*DeleteEntityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_CreateEntityGroupContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityGroupContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).CreateEntityGroupContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_CreateEntityGroupContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).CreateEntityGroupContent(ctx, req.(*CreateEntityGroupContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_UpdateEntityGroupContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityGroupContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).UpdateEntityGroupContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_UpdateEntityGroupContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).UpdateEntityGroupContent(ctx, req.(*UpdateEntityGroupContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_DeleteEntityGroupContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityGroupContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).DeleteEntityGroupContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_DeleteEntityGroupContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).DeleteEntityGroupContent(ctx, req.(*DeleteEntityGroupContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entities_ServiceDesc is the grpc.ServiceDesc for Entities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Entities",
	HandlerType: (*EntitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntityGroup",
			Handler:    _Entities_CreateEntityGroup_Handler,
		},
		{
			MethodName: "UpdateEntityGroup",
			Handler:    _Entities_UpdateEntityGroup_Handler,
		},
		{
			MethodName: "DeleteEntityGroup",
			Handler:    _Entities_DeleteEntityGroup_Handler,
		},
		{
			MethodName: "CreateEntityGroupContent",
			Handler:    _Entities_CreateEntityGroupContent_Handler,
		},
		{
			MethodName: "UpdateEntityGroupContent",
			Handler:    _Entities_UpdateEntityGroupContent_Handler,
		},
		{
			MethodName: "DeleteEntityGroupContent",
			Handler:    _Entities_DeleteEntityGroupContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/entities/service_entities.proto",
}
