CREATE TYPE "entity_type" AS ENUM (
    'unknown',
    'post',
    'map',
    'location',
    'character',
    'image'
);


CREATE TABLE "entities" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "type" entity_type NOT NULL,
    "post_id" int,
    "map_id" int,
    "location_id" int,
    "image_id" int
);

CREATE TABLE "entity_groups" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar,
    "description" varchar
);

CREATE TABLE "entity_group_content" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "entity_group_id" int NOT NULL,
    "position" int NOT NULL,
    "content_entity_id" int,
    "content_entity_group_id" int
);

CREATE TABLE "menu_item_entity_groups" (
    "menu_id" int NOT NULL,
    "menu_item_id" int,
    "entity_group_id" int NOT NULL,
    "position" int NOT NULL
);

CREATE UNIQUE INDEX ON "menu_item_entity_groups" ("menu_item_id", "entity_group_id");

ALTER TABLE "entities" ADD FOREIGN KEY ("post_id") REFERENCES "posts" ("id");

ALTER TABLE "entities" ADD FOREIGN KEY ("map_id") REFERENCES "maps" ("id");

ALTER TABLE "entities" ADD FOREIGN KEY ("location_id") REFERENCES "locations" ("id");

ALTER TABLE "entities" ADD FOREIGN KEY ("image_id") REFERENCES "images" ("id");

ALTER TABLE "entity_group_content" ADD FOREIGN KEY ("entity_group_id") REFERENCES "entity_groups" ("id");

ALTER TABLE "entity_group_content" ADD FOREIGN KEY ("content_entity_id") REFERENCES "entities" ("id");

ALTER TABLE "entity_group_content" ADD FOREIGN KEY ("content_entity_group_id") REFERENCES "entity_groups" ("id");

ALTER TABLE "menu_item_entity_groups" ADD FOREIGN KEY ("menu_id") REFERENCES "menus" ("id");

ALTER TABLE "menu_item_entity_groups" ADD FOREIGN KEY ("menu_item_id") REFERENCES "menu_items" ("id");

ALTER TABLE "menu_item_entity_groups" ADD FOREIGN KEY ("entity_group_id") REFERENCES "entity_groups" ("id");

CREATE OR REPLACE FUNCTION get_recursive_entities(_main_entity_group_id INT)
    RETURNS TABLE (
      id INT,
      entity_group_id INT,
      content_entity_id INT,
      content_entity_group_id INT
    ) AS $$
BEGIN
    RETURN QUERY
        WITH RECURSIVE entity_recursive AS (
            SELECT
                egc.id,
                egc.entity_group_id,
                egc.content_entity_id,
                egc.content_entity_group_id
            FROM
                entity_group_content egc
            WHERE
                    egc.entity_group_id = _main_entity_group_id

            UNION ALL

            SELECT
                child_egc.id,
                child_egc.entity_group_id,
                child_egc.content_entity_id,
                child_egc.content_entity_group_id
            FROM
                entity_recursive er
                    JOIN entity_group_content child_egc ON er.content_entity_group_id = child_egc.entity_group_id
            WHERE
                child_egc.content_entity_id IS NOT NULL OR child_egc.content_entity_group_id IS NOT NULL
        )
        SELECT * FROM entity_recursive;
END;
$$ LANGUAGE plpgsql;