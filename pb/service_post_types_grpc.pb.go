// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: services/post_types/service_post_types.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostTypes_GetPostTypes_FullMethodName = "/pb.PostTypes/GetPostTypes"
)

// PostTypesClient is the client API for PostTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostTypesClient interface {
	GetPostTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostTypesResponse, error)
}

type postTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewPostTypesClient(cc grpc.ClientConnInterface) PostTypesClient {
	return &postTypesClient{cc}
}

func (c *postTypesClient) GetPostTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostTypesResponse, error) {
	out := new(GetPostTypesResponse)
	err := c.cc.Invoke(ctx, PostTypes_GetPostTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostTypesServer is the server API for PostTypes service.
// All implementations must embed UnimplementedPostTypesServer
// for forward compatibility
type PostTypesServer interface {
	GetPostTypes(context.Context, *emptypb.Empty) (*GetPostTypesResponse, error)
	mustEmbedUnimplementedPostTypesServer()
}

// UnimplementedPostTypesServer must be embedded to have forward compatible implementations.
type UnimplementedPostTypesServer struct {
}

func (UnimplementedPostTypesServer) GetPostTypes(context.Context, *emptypb.Empty) (*GetPostTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostTypes not implemented")
}
func (UnimplementedPostTypesServer) mustEmbedUnimplementedPostTypesServer() {}

// UnsafePostTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostTypesServer will
// result in compilation errors.
type UnsafePostTypesServer interface {
	mustEmbedUnimplementedPostTypesServer()
}

func RegisterPostTypesServer(s grpc.ServiceRegistrar, srv PostTypesServer) {
	s.RegisterService(&PostTypes_ServiceDesc, srv)
}

func _PostTypes_GetPostTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTypesServer).GetPostTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTypes_GetPostTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTypesServer).GetPostTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PostTypes_ServiceDesc is the grpc.ServiceDesc for PostTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostTypes",
	HandlerType: (*PostTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostTypes",
			Handler:    _PostTypes_GetPostTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/post_types/service_post_types.proto",
}
