// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: service_talebound.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Talebound_GetUserRoles_FullMethodName                       = "/pb.Talebound/GetUserRoles"
	Talebound_AddRoleToUser_FullMethodName                      = "/pb.Talebound/AddRoleToUser"
	Talebound_RemoveRoleFromUser_FullMethodName                 = "/pb.Talebound/RemoveRoleFromUser"
	Talebound_GetChatMessages_FullMethodName                    = "/pb.Talebound/GetChatMessages"
	Talebound_AddChatMessage_FullMethodName                     = "/pb.Talebound/AddChatMessage"
	Talebound_DeleteChatMessage_FullMethodName                  = "/pb.Talebound/DeleteChatMessage"
	Talebound_GetUsers_FullMethodName                           = "/pb.Talebound/GetUsers"
	Talebound_GetUserById_FullMethodName                        = "/pb.Talebound/GetUserById"
	Talebound_CreateUser_FullMethodName                         = "/pb.Talebound/CreateUser"
	Talebound_UpdateUser_FullMethodName                         = "/pb.Talebound/UpdateUser"
	Talebound_UpdateUserIntroduction_FullMethodName             = "/pb.Talebound/UpdateUserIntroduction"
	Talebound_LoginUser_FullMethodName                          = "/pb.Talebound/LoginUser"
	Talebound_LogoutUser_FullMethodName                         = "/pb.Talebound/LogoutUser"
	Talebound_ResetPasswordSendCode_FullMethodName              = "/pb.Talebound/ResetPasswordSendCode"
	Talebound_ResetPasswordVerifyCode_FullMethodName            = "/pb.Talebound/ResetPasswordVerifyCode"
	Talebound_ResetPasswordVerifyCodeValidity_FullMethodName    = "/pb.Talebound/ResetPasswordVerifyCodeValidity"
	Talebound_VerifyEmail_FullMethodName                        = "/pb.Talebound/VerifyEmail"
	Talebound_GetEvaluationById_FullMethodName                  = "/pb.Talebound/GetEvaluationById"
	Talebound_GetEvaluationsByType_FullMethodName               = "/pb.Talebound/GetEvaluationsByType"
	Talebound_CreateOrUpdateEvaluationVote_FullMethodName       = "/pb.Talebound/CreateOrUpdateEvaluationVote"
	Talebound_GetEvaluationVotesByUserId_FullMethodName         = "/pb.Talebound/GetEvaluationVotesByUserId"
	Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName = "/pb.Talebound/GetEvaluationVotesByUserIdAndVoter"
	Talebound_DeleteEvaluationVote_FullMethodName               = "/pb.Talebound/DeleteEvaluationVote"
	Talebound_GetAverageUserEvaluationsByType_FullMethodName    = "/pb.Talebound/GetAverageUserEvaluationsByType"
	Talebound_GetImages_FullMethodName                          = "/pb.Talebound/GetImages"
	Talebound_GetUserImages_FullMethodName                      = "/pb.Talebound/GetUserImages"
	Talebound_UploadDefaultImage_FullMethodName                 = "/pb.Talebound/UploadDefaultImage"
	Talebound_UploadUserAvatar_FullMethodName                   = "/pb.Talebound/UploadUserAvatar"
	Talebound_GetPostById_FullMethodName                        = "/pb.Talebound/GetPostById"
	Talebound_GetUserPosts_FullMethodName                       = "/pb.Talebound/GetUserPosts"
	Talebound_GetPostHistory_FullMethodName                     = "/pb.Talebound/GetPostHistory"
	Talebound_GetPostHistoryById_FullMethodName                 = "/pb.Talebound/GetPostHistoryById"
	Talebound_CreatePost_FullMethodName                         = "/pb.Talebound/CreatePost"
	Talebound_UpdatePost_FullMethodName                         = "/pb.Talebound/UpdatePost"
	Talebound_DeletePost_FullMethodName                         = "/pb.Talebound/DeletePost"
	Talebound_GetPostTypes_FullMethodName                       = "/pb.Talebound/GetPostTypes"
	Talebound_GetWorldsOfCreator_FullMethodName                 = "/pb.Talebound/GetWorldsOfCreator"
	Talebound_CreateWorld_FullMethodName                        = "/pb.Talebound/CreateWorld"
	Talebound_UpdateWorld_FullMethodName                        = "/pb.Talebound/UpdateWorld"
	Talebound_UploadWorldImage_FullMethodName                   = "/pb.Talebound/UploadWorldImage"
	Talebound_GetAvailableWorldTags_FullMethodName              = "/pb.Talebound/GetAvailableWorldTags"
	Talebound_CreateAvailableWorldTag_FullMethodName            = "/pb.Talebound/CreateAvailableWorldTag"
	Talebound_UpdateAvailableWorldTag_FullMethodName            = "/pb.Talebound/UpdateAvailableWorldTag"
	Talebound_DeleteAvailableWorldTag_FullMethodName            = "/pb.Talebound/DeleteAvailableWorldTag"
	Talebound_AddWorldTag_FullMethodName                        = "/pb.Talebound/AddWorldTag"
	Talebound_RemoveWorldTag_FullMethodName                     = "/pb.Talebound/RemoveWorldTag"
	Talebound_GetWorldAdmins_FullMethodName                     = "/pb.Talebound/GetWorldAdmins"
	Talebound_CreateWorldAdmin_FullMethodName                   = "/pb.Talebound/CreateWorldAdmin"
	Talebound_UpdateWorldAdmin_FullMethodName                   = "/pb.Talebound/UpdateWorldAdmin"
	Talebound_DeleteWorldAdmin_FullMethodName                   = "/pb.Talebound/DeleteWorldAdmin"
	Talebound_GetWorldDailyActivity_FullMethodName              = "/pb.Talebound/GetWorldDailyActivity"
	Talebound_GetWorldMonthlyActivity_FullMethodName            = "/pb.Talebound/GetWorldMonthlyActivity"
	Talebound_GetWorlds_FullMethodName                          = "/pb.Talebound/GetWorlds"
	Talebound_GetWorldById_FullMethodName                       = "/pb.Talebound/GetWorldById"
	Talebound_UpdateWorldIntroduction_FullMethodName            = "/pb.Talebound/UpdateWorldIntroduction"
	Talebound_UpdateMenu_FullMethodName                         = "/pb.Talebound/UpdateMenu"
	Talebound_GetMenu_FullMethodName                            = "/pb.Talebound/GetMenu"
	Talebound_CreateMenuItem_FullMethodName                     = "/pb.Talebound/CreateMenuItem"
	Talebound_UpdateMenuItem_FullMethodName                     = "/pb.Talebound/UpdateMenuItem"
	Talebound_UpdateMenuItemMoveGroupUp_FullMethodName          = "/pb.Talebound/UpdateMenuItemMoveGroupUp"
	Talebound_DeleteMenuItem_FullMethodName                     = "/pb.Talebound/DeleteMenuItem"
	Talebound_GetMenuItems_FullMethodName                       = "/pb.Talebound/GetMenuItems"
	Talebound_CreateMenuItemPost_FullMethodName                 = "/pb.Talebound/CreateMenuItemPost"
	Talebound_UpdateMenuItemPost_FullMethodName                 = "/pb.Talebound/UpdateMenuItemPost"
	Talebound_DeleteMenuItemPost_FullMethodName                 = "/pb.Talebound/DeleteMenuItemPost"
	Talebound_GetMenuItemPosts_FullMethodName                   = "/pb.Talebound/GetMenuItemPosts"
	Talebound_GetMenuItemPostsByMenuId_FullMethodName           = "/pb.Talebound/GetMenuItemPostsByMenuId"
	Talebound_UpdateMenuPosts_FullMethodName                    = "/pb.Talebound/UpdateMenuPosts"
)

// TaleboundClient is the client API for Talebound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaleboundClient interface {
	// ============= USER ROLES =================
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
	AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error)
	DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*ViewUser, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateUserIntroduction(ctx context.Context, in *UpdateUserIntroductionRequest, opts ...grpc.CallOption) (*Post, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error)
	ResetPasswordVerifyCodeValidity(ctx context.Context, in *ResetPasswordVerifyCodeValidityRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeValidityResponse, error)
	// ============= VERIFY =================
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// ============= USER EVALUATION =================
	GetEvaluationById(ctx context.Context, in *GetEvaluationByIdRequest, opts ...grpc.CallOption) (*GetEvaluationByIdResponse, error)
	GetEvaluationsByType(ctx context.Context, in *GetEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetEvaluationsByTypeResponse, error)
	CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error)
	GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	GetUserImages(ctx context.Context, in *GetUserImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	UploadDefaultImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*Image, error)
	UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error)
	GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*Post, error)
	GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error)
	GetPostHistory(ctx context.Context, in *GetPostHistoryRequest, opts ...grpc.CallOption) (*GetPostHistoryResponse, error)
	GetPostHistoryById(ctx context.Context, in *GetPostHistoryByIdRequest, opts ...grpc.CallOption) (*HistoryPost, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	GetPostTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostTypesResponse, error)
	GetWorldsOfCreator(ctx context.Context, in *GetWorldsOfCreatorRequest, opts ...grpc.CallOption) (*GetWorldsOfCreatorResponse, error)
	CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*World, error)
	UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*World, error)
	UploadWorldImage(ctx context.Context, in *UploadWorldImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetAvailableWorldTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableWorldTagsResponse, error)
	CreateAvailableWorldTag(ctx context.Context, in *CreateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	UpdateAvailableWorldTag(ctx context.Context, in *UpdateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	DeleteAvailableWorldTag(ctx context.Context, in *DeleteAvailableWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddWorldTag(ctx context.Context, in *AddWorldTagRequest, opts ...grpc.CallOption) (*Tag, error)
	RemoveWorldTag(ctx context.Context, in *RemoveWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWorldAdmins(ctx context.Context, in *GetWorldAdminsRequest, opts ...grpc.CallOption) (*GetWorldAdminsResponse, error)
	CreateWorldAdmin(ctx context.Context, in *CreateWorldAdminRequest, opts ...grpc.CallOption) (*WorldAdmin, error)
	UpdateWorldAdmin(ctx context.Context, in *UpdateWorldAdminRequest, opts ...grpc.CallOption) (*WorldAdmin, error)
	DeleteWorldAdmin(ctx context.Context, in *DeleteWorldAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWorldDailyActivity(ctx context.Context, in *GetWorldDailyActivityRequest, opts ...grpc.CallOption) (*GetWorldDailyActivityResponse, error)
	GetWorldMonthlyActivity(ctx context.Context, in *GetWorldMonthlyActivityRequest, opts ...grpc.CallOption) (*GetWorldMonthlyActivityResponse, error)
	GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error)
	GetWorldById(ctx context.Context, in *GetWorldByIdRequest, opts ...grpc.CallOption) (*World, error)
	UpdateWorldIntroduction(ctx context.Context, in *UpdateWorldIntroductionRequest, opts ...grpc.CallOption) (*Post, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error)
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error)
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	UpdateMenuItemMoveGroupUp(ctx context.Context, in *UpdateMenuItemMoveGroupUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error)
	CreateMenuItemPost(ctx context.Context, in *CreateMenuItemPostRequest, opts ...grpc.CallOption) (*MenuItemPost, error)
	UpdateMenuItemPost(ctx context.Context, in *UpdateMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenuItemPost(ctx context.Context, in *DeleteMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMenuItemPosts(ctx context.Context, in *GetMenuItemPostsRequest, opts ...grpc.CallOption) (*GetMenuItemPostsResponse, error)
	GetMenuItemPostsByMenuId(ctx context.Context, in *GetMenuItemPostsByMenuIdRequest, opts ...grpc.CallOption) (*GetMenuItemPostsByMenuIdResponse, error)
	UpdateMenuPosts(ctx context.Context, in *UpdateMenuPostsRequest, opts ...grpc.CallOption) (*UpdateMenuPostsResponse, error)
}

type taleboundClient struct {
	cc grpc.ClientConnInterface
}

func NewTaleboundClient(cc grpc.ClientConnInterface) TaleboundClient {
	return &taleboundClient{cc}
}

func (c *taleboundClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error) {
	out := new(AddRoleToUserResponse)
	err := c.cc.Invoke(ctx, Talebound_AddRoleToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error) {
	out := new(RemoveRoleFromUserResponse)
	err := c.cc.Invoke(ctx, Talebound_RemoveRoleFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error) {
	out := new(AddChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_AddChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error) {
	out := new(DeleteChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_DeleteChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*ViewUser, error) {
	out := new(ViewUser)
	err := c.cc.Invoke(ctx, Talebound_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateUserIntroduction(ctx context.Context, in *UpdateUserIntroductionRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Talebound_UpdateUserIntroduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Talebound_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_LogoutUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error) {
	out := new(ResetPasswordSendCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordSendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error) {
	out := new(ResetPasswordVerifyCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordVerifyCodeValidity(ctx context.Context, in *ResetPasswordVerifyCodeValidityRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeValidityResponse, error) {
	out := new(ResetPasswordVerifyCodeValidityResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordVerifyCodeValidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Talebound_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationById(ctx context.Context, in *GetEvaluationByIdRequest, opts ...grpc.CallOption) (*GetEvaluationByIdResponse, error) {
	out := new(GetEvaluationByIdResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationsByType(ctx context.Context, in *GetEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetEvaluationsByTypeResponse, error) {
	out := new(GetEvaluationsByTypeResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error) {
	out := new(CreateOrUpdateEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Talebound_CreateOrUpdateEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error) {
	out := new(GetEvaluationVotesByUserIdResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationVotesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	out := new(GetEvaluationVotesByUserIdAndVoterResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error) {
	out := new(DeleteEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Talebound_DeleteEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error) {
	out := new(GetAverageUserEvaluationsByTypeResponse)
	err := c.cc.Invoke(ctx, Talebound_GetAverageUserEvaluationsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUserImages(ctx context.Context, in *GetUserImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUserImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UploadDefaultImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Talebound_UploadDefaultImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error) {
	out := new(UploadUserAvatarResponse)
	err := c.cc.Invoke(ctx, Talebound_UploadUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Talebound_GetPostById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error) {
	out := new(GetUserPostsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUserPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetPostHistory(ctx context.Context, in *GetPostHistoryRequest, opts ...grpc.CallOption) (*GetPostHistoryResponse, error) {
	out := new(GetPostHistoryResponse)
	err := c.cc.Invoke(ctx, Talebound_GetPostHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetPostHistoryById(ctx context.Context, in *GetPostHistoryByIdRequest, opts ...grpc.CallOption) (*HistoryPost, error) {
	out := new(HistoryPost)
	err := c.cc.Invoke(ctx, Talebound_GetPostHistoryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Talebound_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Talebound_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, Talebound_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetPostTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostTypesResponse, error) {
	out := new(GetPostTypesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetPostTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorldsOfCreator(ctx context.Context, in *GetWorldsOfCreatorRequest, opts ...grpc.CallOption) (*GetWorldsOfCreatorResponse, error) {
	out := new(GetWorldsOfCreatorResponse)
	err := c.cc.Invoke(ctx, Talebound_GetWorldsOfCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, Talebound_CreateWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, Talebound_UpdateWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UploadWorldImage(ctx context.Context, in *UploadWorldImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Talebound_UploadWorldImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetAvailableWorldTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableWorldTagsResponse, error) {
	out := new(GetAvailableWorldTagsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetAvailableWorldTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateAvailableWorldTag(ctx context.Context, in *CreateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Talebound_CreateAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateAvailableWorldTag(ctx context.Context, in *UpdateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Talebound_UpdateAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteAvailableWorldTag(ctx context.Context, in *DeleteAvailableWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_DeleteAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddWorldTag(ctx context.Context, in *AddWorldTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, Talebound_AddWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) RemoveWorldTag(ctx context.Context, in *RemoveWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_RemoveWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorldAdmins(ctx context.Context, in *GetWorldAdminsRequest, opts ...grpc.CallOption) (*GetWorldAdminsResponse, error) {
	out := new(GetWorldAdminsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetWorldAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateWorldAdmin(ctx context.Context, in *CreateWorldAdminRequest, opts ...grpc.CallOption) (*WorldAdmin, error) {
	out := new(WorldAdmin)
	err := c.cc.Invoke(ctx, Talebound_CreateWorldAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateWorldAdmin(ctx context.Context, in *UpdateWorldAdminRequest, opts ...grpc.CallOption) (*WorldAdmin, error) {
	out := new(WorldAdmin)
	err := c.cc.Invoke(ctx, Talebound_UpdateWorldAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteWorldAdmin(ctx context.Context, in *DeleteWorldAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_DeleteWorldAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorldDailyActivity(ctx context.Context, in *GetWorldDailyActivityRequest, opts ...grpc.CallOption) (*GetWorldDailyActivityResponse, error) {
	out := new(GetWorldDailyActivityResponse)
	err := c.cc.Invoke(ctx, Talebound_GetWorldDailyActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorldMonthlyActivity(ctx context.Context, in *GetWorldMonthlyActivityRequest, opts ...grpc.CallOption) (*GetWorldMonthlyActivityResponse, error) {
	out := new(GetWorldMonthlyActivityResponse)
	err := c.cc.Invoke(ctx, Talebound_GetWorldMonthlyActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error) {
	out := new(GetWorldsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetWorlds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetWorldById(ctx context.Context, in *GetWorldByIdRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, Talebound_GetWorldById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateWorldIntroduction(ctx context.Context, in *UpdateWorldIntroductionRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Talebound_UpdateWorldIntroduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error) {
	out := new(ViewMenu)
	err := c.cc.Invoke(ctx, Talebound_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ViewMenu, error) {
	out := new(ViewMenu)
	err := c.cc.Invoke(ctx, Talebound_GetMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, Talebound_CreateMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, Talebound_UpdateMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateMenuItemMoveGroupUp(ctx context.Context, in *UpdateMenuItemMoveGroupUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_UpdateMenuItemMoveGroupUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_DeleteMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error) {
	out := new(GetMenuItemsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetMenuItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateMenuItemPost(ctx context.Context, in *CreateMenuItemPostRequest, opts ...grpc.CallOption) (*MenuItemPost, error) {
	out := new(MenuItemPost)
	err := c.cc.Invoke(ctx, Talebound_CreateMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateMenuItemPost(ctx context.Context, in *UpdateMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_UpdateMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteMenuItemPost(ctx context.Context, in *DeleteMenuItemPostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_DeleteMenuItemPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetMenuItemPosts(ctx context.Context, in *GetMenuItemPostsRequest, opts ...grpc.CallOption) (*GetMenuItemPostsResponse, error) {
	out := new(GetMenuItemPostsResponse)
	err := c.cc.Invoke(ctx, Talebound_GetMenuItemPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetMenuItemPostsByMenuId(ctx context.Context, in *GetMenuItemPostsByMenuIdRequest, opts ...grpc.CallOption) (*GetMenuItemPostsByMenuIdResponse, error) {
	out := new(GetMenuItemPostsByMenuIdResponse)
	err := c.cc.Invoke(ctx, Talebound_GetMenuItemPostsByMenuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateMenuPosts(ctx context.Context, in *UpdateMenuPostsRequest, opts ...grpc.CallOption) (*UpdateMenuPostsResponse, error) {
	out := new(UpdateMenuPostsResponse)
	err := c.cc.Invoke(ctx, Talebound_UpdateMenuPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaleboundServer is the server API for Talebound service.
// All implementations must embed UnimplementedTaleboundServer
// for forward compatibility
type TaleboundServer interface {
	// ============= USER ROLES =================
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error)
	DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*ViewUser, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateUserIntroduction(context.Context, *UpdateUserIntroductionRequest) (*Post, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error)
	ResetPasswordVerifyCodeValidity(context.Context, *ResetPasswordVerifyCodeValidityRequest) (*ResetPasswordVerifyCodeValidityResponse, error)
	// ============= VERIFY =================
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// ============= USER EVALUATION =================
	GetEvaluationById(context.Context, *GetEvaluationByIdRequest) (*GetEvaluationByIdResponse, error)
	GetEvaluationsByType(context.Context, *GetEvaluationsByTypeRequest) (*GetEvaluationsByTypeResponse, error)
	CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error)
	GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	GetUserImages(context.Context, *GetUserImagesRequest) (*GetImagesResponse, error)
	UploadDefaultImage(context.Context, *UploadImageRequest) (*Image, error)
	UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error)
	GetPostById(context.Context, *GetPostByIdRequest) (*Post, error)
	GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error)
	GetPostHistory(context.Context, *GetPostHistoryRequest) (*GetPostHistoryResponse, error)
	GetPostHistoryById(context.Context, *GetPostHistoryByIdRequest) (*HistoryPost, error)
	CreatePost(context.Context, *CreatePostRequest) (*Post, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*Post, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	GetPostTypes(context.Context, *emptypb.Empty) (*GetPostTypesResponse, error)
	GetWorldsOfCreator(context.Context, *GetWorldsOfCreatorRequest) (*GetWorldsOfCreatorResponse, error)
	CreateWorld(context.Context, *CreateWorldRequest) (*World, error)
	UpdateWorld(context.Context, *UpdateWorldRequest) (*World, error)
	UploadWorldImage(context.Context, *UploadWorldImageRequest) (*Image, error)
	GetAvailableWorldTags(context.Context, *emptypb.Empty) (*GetAvailableWorldTagsResponse, error)
	CreateAvailableWorldTag(context.Context, *CreateAvailableWorldTagRequest) (*ViewTag, error)
	UpdateAvailableWorldTag(context.Context, *UpdateAvailableWorldTagRequest) (*ViewTag, error)
	DeleteAvailableWorldTag(context.Context, *DeleteAvailableWorldTagRequest) (*emptypb.Empty, error)
	AddWorldTag(context.Context, *AddWorldTagRequest) (*Tag, error)
	RemoveWorldTag(context.Context, *RemoveWorldTagRequest) (*emptypb.Empty, error)
	GetWorldAdmins(context.Context, *GetWorldAdminsRequest) (*GetWorldAdminsResponse, error)
	CreateWorldAdmin(context.Context, *CreateWorldAdminRequest) (*WorldAdmin, error)
	UpdateWorldAdmin(context.Context, *UpdateWorldAdminRequest) (*WorldAdmin, error)
	DeleteWorldAdmin(context.Context, *DeleteWorldAdminRequest) (*emptypb.Empty, error)
	GetWorldDailyActivity(context.Context, *GetWorldDailyActivityRequest) (*GetWorldDailyActivityResponse, error)
	GetWorldMonthlyActivity(context.Context, *GetWorldMonthlyActivityRequest) (*GetWorldMonthlyActivityResponse, error)
	GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error)
	GetWorldById(context.Context, *GetWorldByIdRequest) (*World, error)
	UpdateWorldIntroduction(context.Context, *UpdateWorldIntroductionRequest) (*Post, error)
	UpdateMenu(context.Context, *UpdateMenuRequest) (*ViewMenu, error)
	GetMenu(context.Context, *GetMenuRequest) (*ViewMenu, error)
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error)
	UpdateMenuItemMoveGroupUp(context.Context, *UpdateMenuItemMoveGroupUpRequest) (*emptypb.Empty, error)
	DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error)
	GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error)
	CreateMenuItemPost(context.Context, *CreateMenuItemPostRequest) (*MenuItemPost, error)
	UpdateMenuItemPost(context.Context, *UpdateMenuItemPostRequest) (*emptypb.Empty, error)
	DeleteMenuItemPost(context.Context, *DeleteMenuItemPostRequest) (*emptypb.Empty, error)
	GetMenuItemPosts(context.Context, *GetMenuItemPostsRequest) (*GetMenuItemPostsResponse, error)
	GetMenuItemPostsByMenuId(context.Context, *GetMenuItemPostsByMenuIdRequest) (*GetMenuItemPostsByMenuIdResponse, error)
	UpdateMenuPosts(context.Context, *UpdateMenuPostsRequest) (*UpdateMenuPostsResponse, error)
	mustEmbedUnimplementedTaleboundServer()
}

// UnimplementedTaleboundServer must be embedded to have forward compatible implementations.
type UnimplementedTaleboundServer struct {
}

func (UnimplementedTaleboundServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedTaleboundServer) AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToUser not implemented")
}
func (UnimplementedTaleboundServer) RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedTaleboundServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedTaleboundServer) AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatMessage not implemented")
}
func (UnimplementedTaleboundServer) DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatMessage not implemented")
}
func (UnimplementedTaleboundServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedTaleboundServer) GetUserById(context.Context, *GetUserByIdRequest) (*ViewUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedTaleboundServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTaleboundServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedTaleboundServer) UpdateUserIntroduction(context.Context, *UpdateUserIntroductionRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIntroduction not implemented")
}
func (UnimplementedTaleboundServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedTaleboundServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordSendCode not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordVerifyCode not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordVerifyCodeValidity(context.Context, *ResetPasswordVerifyCodeValidityRequest) (*ResetPasswordVerifyCodeValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordVerifyCodeValidity not implemented")
}
func (UnimplementedTaleboundServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationById(context.Context, *GetEvaluationByIdRequest) (*GetEvaluationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationById not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationsByType(context.Context, *GetEvaluationsByTypeRequest) (*GetEvaluationsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationsByType not implemented")
}
func (UnimplementedTaleboundServer) CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateEvaluationVote not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserId not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserIdAndVoter not implemented")
}
func (UnimplementedTaleboundServer) DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluationVote not implemented")
}
func (UnimplementedTaleboundServer) GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageUserEvaluationsByType not implemented")
}
func (UnimplementedTaleboundServer) GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImages not implemented")
}
func (UnimplementedTaleboundServer) GetUserImages(context.Context, *GetUserImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserImages not implemented")
}
func (UnimplementedTaleboundServer) UploadDefaultImage(context.Context, *UploadImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDefaultImage not implemented")
}
func (UnimplementedTaleboundServer) UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedTaleboundServer) GetPostById(context.Context, *GetPostByIdRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedTaleboundServer) GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPosts not implemented")
}
func (UnimplementedTaleboundServer) GetPostHistory(context.Context, *GetPostHistoryRequest) (*GetPostHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostHistory not implemented")
}
func (UnimplementedTaleboundServer) GetPostHistoryById(context.Context, *GetPostHistoryByIdRequest) (*HistoryPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostHistoryById not implemented")
}
func (UnimplementedTaleboundServer) CreatePost(context.Context, *CreatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedTaleboundServer) UpdatePost(context.Context, *UpdatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedTaleboundServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedTaleboundServer) GetPostTypes(context.Context, *emptypb.Empty) (*GetPostTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostTypes not implemented")
}
func (UnimplementedTaleboundServer) GetWorldsOfCreator(context.Context, *GetWorldsOfCreatorRequest) (*GetWorldsOfCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldsOfCreator not implemented")
}
func (UnimplementedTaleboundServer) CreateWorld(context.Context, *CreateWorldRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedTaleboundServer) UpdateWorld(context.Context, *UpdateWorldRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorld not implemented")
}
func (UnimplementedTaleboundServer) UploadWorldImage(context.Context, *UploadWorldImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWorldImage not implemented")
}
func (UnimplementedTaleboundServer) GetAvailableWorldTags(context.Context, *emptypb.Empty) (*GetAvailableWorldTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableWorldTags not implemented")
}
func (UnimplementedTaleboundServer) CreateAvailableWorldTag(context.Context, *CreateAvailableWorldTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvailableWorldTag not implemented")
}
func (UnimplementedTaleboundServer) UpdateAvailableWorldTag(context.Context, *UpdateAvailableWorldTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailableWorldTag not implemented")
}
func (UnimplementedTaleboundServer) DeleteAvailableWorldTag(context.Context, *DeleteAvailableWorldTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAvailableWorldTag not implemented")
}
func (UnimplementedTaleboundServer) AddWorldTag(context.Context, *AddWorldTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorldTag not implemented")
}
func (UnimplementedTaleboundServer) RemoveWorldTag(context.Context, *RemoveWorldTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorldTag not implemented")
}
func (UnimplementedTaleboundServer) GetWorldAdmins(context.Context, *GetWorldAdminsRequest) (*GetWorldAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldAdmins not implemented")
}
func (UnimplementedTaleboundServer) CreateWorldAdmin(context.Context, *CreateWorldAdminRequest) (*WorldAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorldAdmin not implemented")
}
func (UnimplementedTaleboundServer) UpdateWorldAdmin(context.Context, *UpdateWorldAdminRequest) (*WorldAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorldAdmin not implemented")
}
func (UnimplementedTaleboundServer) DeleteWorldAdmin(context.Context, *DeleteWorldAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorldAdmin not implemented")
}
func (UnimplementedTaleboundServer) GetWorldDailyActivity(context.Context, *GetWorldDailyActivityRequest) (*GetWorldDailyActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldDailyActivity not implemented")
}
func (UnimplementedTaleboundServer) GetWorldMonthlyActivity(context.Context, *GetWorldMonthlyActivityRequest) (*GetWorldMonthlyActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldMonthlyActivity not implemented")
}
func (UnimplementedTaleboundServer) GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorlds not implemented")
}
func (UnimplementedTaleboundServer) GetWorldById(context.Context, *GetWorldByIdRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldById not implemented")
}
func (UnimplementedTaleboundServer) UpdateWorldIntroduction(context.Context, *UpdateWorldIntroductionRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorldIntroduction not implemented")
}
func (UnimplementedTaleboundServer) UpdateMenu(context.Context, *UpdateMenuRequest) (*ViewMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedTaleboundServer) GetMenu(context.Context, *GetMenuRequest) (*ViewMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedTaleboundServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedTaleboundServer) UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedTaleboundServer) UpdateMenuItemMoveGroupUp(context.Context, *UpdateMenuItemMoveGroupUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItemMoveGroupUp not implemented")
}
func (UnimplementedTaleboundServer) DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItem not implemented")
}
func (UnimplementedTaleboundServer) GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItems not implemented")
}
func (UnimplementedTaleboundServer) CreateMenuItemPost(context.Context, *CreateMenuItemPostRequest) (*MenuItemPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItemPost not implemented")
}
func (UnimplementedTaleboundServer) UpdateMenuItemPost(context.Context, *UpdateMenuItemPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItemPost not implemented")
}
func (UnimplementedTaleboundServer) DeleteMenuItemPost(context.Context, *DeleteMenuItemPostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItemPost not implemented")
}
func (UnimplementedTaleboundServer) GetMenuItemPosts(context.Context, *GetMenuItemPostsRequest) (*GetMenuItemPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemPosts not implemented")
}
func (UnimplementedTaleboundServer) GetMenuItemPostsByMenuId(context.Context, *GetMenuItemPostsByMenuIdRequest) (*GetMenuItemPostsByMenuIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemPostsByMenuId not implemented")
}
func (UnimplementedTaleboundServer) UpdateMenuPosts(context.Context, *UpdateMenuPostsRequest) (*UpdateMenuPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuPosts not implemented")
}
func (UnimplementedTaleboundServer) mustEmbedUnimplementedTaleboundServer() {}

// UnsafeTaleboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaleboundServer will
// result in compilation errors.
type UnsafeTaleboundServer interface {
	mustEmbedUnimplementedTaleboundServer()
}

func RegisterTaleboundServer(s grpc.ServiceRegistrar, srv TaleboundServer) {
	s.RegisterService(&Talebound_ServiceDesc, srv)
}

func _Talebound_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddRoleToUser(ctx, req.(*AddRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddChatMessage(ctx, req.(*AddChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, req.(*DeleteChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateUserIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIntroductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateUserIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateUserIntroduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateUserIntroduction(ctx, req.(*UpdateUserIntroductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordSendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, req.(*ResetPasswordSendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, req.(*ResetPasswordVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordVerifyCodeValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordVerifyCodeValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordVerifyCodeValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordVerifyCodeValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordVerifyCodeValidity(ctx, req.(*ResetPasswordVerifyCodeValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationById(ctx, req.(*GetEvaluationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationsByType(ctx, req.(*GetEvaluationsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateOrUpdateEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateOrUpdateEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateOrUpdateEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateOrUpdateEvaluationVote(ctx, req.(*CreateOrUpdateEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationVotesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationVotesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationVotesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationVotesByUserId(ctx, req.(*GetEvaluationVotesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationVotesByUserIdAndVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdAndVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationVotesByUserIdAndVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationVotesByUserIdAndVoter(ctx, req.(*GetEvaluationVotesByUserIdAndVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteEvaluationVote(ctx, req.(*DeleteEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetAverageUserEvaluationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageUserEvaluationsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetAverageUserEvaluationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetAverageUserEvaluationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetAverageUserEvaluationsByType(ctx, req.(*GetAverageUserEvaluationsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetImages(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUserImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserImages(ctx, req.(*GetUserImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UploadDefaultImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UploadDefaultImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UploadDefaultImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UploadDefaultImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UploadUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UploadUserAvatar(ctx, req.(*UploadUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetPostById(ctx, req.(*GetPostByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserPosts(ctx, req.(*GetUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetPostHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetPostHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetPostHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetPostHistory(ctx, req.(*GetPostHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetPostHistoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostHistoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetPostHistoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetPostHistoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetPostHistoryById(ctx, req.(*GetPostHistoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetPostTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetPostTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetPostTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetPostTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorldsOfCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldsOfCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorldsOfCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorldsOfCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorldsOfCreator(ctx, req.(*GetWorldsOfCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateWorld(ctx, req.(*CreateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateWorld(ctx, req.(*UpdateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UploadWorldImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadWorldImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UploadWorldImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UploadWorldImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UploadWorldImage(ctx, req.(*UploadWorldImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetAvailableWorldTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetAvailableWorldTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetAvailableWorldTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetAvailableWorldTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateAvailableWorldTag(ctx, req.(*CreateAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateAvailableWorldTag(ctx, req.(*UpdateAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteAvailableWorldTag(ctx, req.(*DeleteAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddWorldTag(ctx, req.(*AddWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_RemoveWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).RemoveWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_RemoveWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).RemoveWorldTag(ctx, req.(*RemoveWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorldAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorldAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorldAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorldAdmins(ctx, req.(*GetWorldAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateWorldAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateWorldAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateWorldAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateWorldAdmin(ctx, req.(*CreateWorldAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateWorldAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateWorldAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateWorldAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateWorldAdmin(ctx, req.(*UpdateWorldAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteWorldAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorldAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteWorldAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteWorldAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteWorldAdmin(ctx, req.(*DeleteWorldAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorldDailyActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldDailyActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorldDailyActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorldDailyActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorldDailyActivity(ctx, req.(*GetWorldDailyActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorldMonthlyActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldMonthlyActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorldMonthlyActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorldMonthlyActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorldMonthlyActivity(ctx, req.(*GetWorldMonthlyActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorlds(ctx, req.(*GetWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetWorldById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetWorldById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetWorldById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetWorldById(ctx, req.(*GetWorldByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateWorldIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldIntroductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateWorldIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateWorldIntroduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateWorldIntroduction(ctx, req.(*UpdateWorldIntroductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateMenu(ctx, req.(*UpdateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateMenuItemMoveGroupUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemMoveGroupUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateMenuItemMoveGroupUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateMenuItemMoveGroupUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateMenuItemMoveGroupUp(ctx, req.(*UpdateMenuItemMoveGroupUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteMenuItem(ctx, req.(*DeleteMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetMenuItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetMenuItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetMenuItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetMenuItems(ctx, req.(*GetMenuItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateMenuItemPost(ctx, req.(*CreateMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateMenuItemPost(ctx, req.(*UpdateMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteMenuItemPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteMenuItemPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteMenuItemPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteMenuItemPost(ctx, req.(*DeleteMenuItemPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetMenuItemPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetMenuItemPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetMenuItemPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetMenuItemPosts(ctx, req.(*GetMenuItemPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetMenuItemPostsByMenuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemPostsByMenuIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetMenuItemPostsByMenuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetMenuItemPostsByMenuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetMenuItemPostsByMenuId(ctx, req.(*GetMenuItemPostsByMenuIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateMenuPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateMenuPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateMenuPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateMenuPosts(ctx, req.(*UpdateMenuPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Talebound_ServiceDesc is the grpc.ServiceDesc for Talebound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Talebound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talebound",
	HandlerType: (*TaleboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRoles",
			Handler:    _Talebound_GetUserRoles_Handler,
		},
		{
			MethodName: "AddRoleToUser",
			Handler:    _Talebound_AddRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _Talebound_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _Talebound_GetChatMessages_Handler,
		},
		{
			MethodName: "AddChatMessage",
			Handler:    _Talebound_AddChatMessage_Handler,
		},
		{
			MethodName: "DeleteChatMessage",
			Handler:    _Talebound_DeleteChatMessage_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Talebound_GetUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Talebound_GetUserById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Talebound_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Talebound_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserIntroduction",
			Handler:    _Talebound_UpdateUserIntroduction_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Talebound_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _Talebound_LogoutUser_Handler,
		},
		{
			MethodName: "ResetPasswordSendCode",
			Handler:    _Talebound_ResetPasswordSendCode_Handler,
		},
		{
			MethodName: "ResetPasswordVerifyCode",
			Handler:    _Talebound_ResetPasswordVerifyCode_Handler,
		},
		{
			MethodName: "ResetPasswordVerifyCodeValidity",
			Handler:    _Talebound_ResetPasswordVerifyCodeValidity_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Talebound_VerifyEmail_Handler,
		},
		{
			MethodName: "GetEvaluationById",
			Handler:    _Talebound_GetEvaluationById_Handler,
		},
		{
			MethodName: "GetEvaluationsByType",
			Handler:    _Talebound_GetEvaluationsByType_Handler,
		},
		{
			MethodName: "CreateOrUpdateEvaluationVote",
			Handler:    _Talebound_CreateOrUpdateEvaluationVote_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserId",
			Handler:    _Talebound_GetEvaluationVotesByUserId_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserIdAndVoter",
			Handler:    _Talebound_GetEvaluationVotesByUserIdAndVoter_Handler,
		},
		{
			MethodName: "DeleteEvaluationVote",
			Handler:    _Talebound_DeleteEvaluationVote_Handler,
		},
		{
			MethodName: "GetAverageUserEvaluationsByType",
			Handler:    _Talebound_GetAverageUserEvaluationsByType_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _Talebound_GetImages_Handler,
		},
		{
			MethodName: "GetUserImages",
			Handler:    _Talebound_GetUserImages_Handler,
		},
		{
			MethodName: "UploadDefaultImage",
			Handler:    _Talebound_UploadDefaultImage_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _Talebound_UploadUserAvatar_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _Talebound_GetPostById_Handler,
		},
		{
			MethodName: "GetUserPosts",
			Handler:    _Talebound_GetUserPosts_Handler,
		},
		{
			MethodName: "GetPostHistory",
			Handler:    _Talebound_GetPostHistory_Handler,
		},
		{
			MethodName: "GetPostHistoryById",
			Handler:    _Talebound_GetPostHistoryById_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Talebound_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Talebound_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Talebound_DeletePost_Handler,
		},
		{
			MethodName: "GetPostTypes",
			Handler:    _Talebound_GetPostTypes_Handler,
		},
		{
			MethodName: "GetWorldsOfCreator",
			Handler:    _Talebound_GetWorldsOfCreator_Handler,
		},
		{
			MethodName: "CreateWorld",
			Handler:    _Talebound_CreateWorld_Handler,
		},
		{
			MethodName: "UpdateWorld",
			Handler:    _Talebound_UpdateWorld_Handler,
		},
		{
			MethodName: "UploadWorldImage",
			Handler:    _Talebound_UploadWorldImage_Handler,
		},
		{
			MethodName: "GetAvailableWorldTags",
			Handler:    _Talebound_GetAvailableWorldTags_Handler,
		},
		{
			MethodName: "CreateAvailableWorldTag",
			Handler:    _Talebound_CreateAvailableWorldTag_Handler,
		},
		{
			MethodName: "UpdateAvailableWorldTag",
			Handler:    _Talebound_UpdateAvailableWorldTag_Handler,
		},
		{
			MethodName: "DeleteAvailableWorldTag",
			Handler:    _Talebound_DeleteAvailableWorldTag_Handler,
		},
		{
			MethodName: "AddWorldTag",
			Handler:    _Talebound_AddWorldTag_Handler,
		},
		{
			MethodName: "RemoveWorldTag",
			Handler:    _Talebound_RemoveWorldTag_Handler,
		},
		{
			MethodName: "GetWorldAdmins",
			Handler:    _Talebound_GetWorldAdmins_Handler,
		},
		{
			MethodName: "CreateWorldAdmin",
			Handler:    _Talebound_CreateWorldAdmin_Handler,
		},
		{
			MethodName: "UpdateWorldAdmin",
			Handler:    _Talebound_UpdateWorldAdmin_Handler,
		},
		{
			MethodName: "DeleteWorldAdmin",
			Handler:    _Talebound_DeleteWorldAdmin_Handler,
		},
		{
			MethodName: "GetWorldDailyActivity",
			Handler:    _Talebound_GetWorldDailyActivity_Handler,
		},
		{
			MethodName: "GetWorldMonthlyActivity",
			Handler:    _Talebound_GetWorldMonthlyActivity_Handler,
		},
		{
			MethodName: "GetWorlds",
			Handler:    _Talebound_GetWorlds_Handler,
		},
		{
			MethodName: "GetWorldById",
			Handler:    _Talebound_GetWorldById_Handler,
		},
		{
			MethodName: "UpdateWorldIntroduction",
			Handler:    _Talebound_UpdateWorldIntroduction_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Talebound_UpdateMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Talebound_GetMenu_Handler,
		},
		{
			MethodName: "CreateMenuItem",
			Handler:    _Talebound_CreateMenuItem_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _Talebound_UpdateMenuItem_Handler,
		},
		{
			MethodName: "UpdateMenuItemMoveGroupUp",
			Handler:    _Talebound_UpdateMenuItemMoveGroupUp_Handler,
		},
		{
			MethodName: "DeleteMenuItem",
			Handler:    _Talebound_DeleteMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItems",
			Handler:    _Talebound_GetMenuItems_Handler,
		},
		{
			MethodName: "CreateMenuItemPost",
			Handler:    _Talebound_CreateMenuItemPost_Handler,
		},
		{
			MethodName: "UpdateMenuItemPost",
			Handler:    _Talebound_UpdateMenuItemPost_Handler,
		},
		{
			MethodName: "DeleteMenuItemPost",
			Handler:    _Talebound_DeleteMenuItemPost_Handler,
		},
		{
			MethodName: "GetMenuItemPosts",
			Handler:    _Talebound_GetMenuItemPosts_Handler,
		},
		{
			MethodName: "GetMenuItemPostsByMenuId",
			Handler:    _Talebound_GetMenuItemPostsByMenuId_Handler,
		},
		{
			MethodName: "UpdateMenuPosts",
			Handler:    _Talebound_UpdateMenuPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_talebound.proto",
}
