// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: service_talebound.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Talebound_GetUserRoles_FullMethodName            = "/pb.Talebound/GetUserRoles"
	Talebound_AddRoleToUser_FullMethodName           = "/pb.Talebound/AddRoleToUser"
	Talebound_RemoveRoleFromUser_FullMethodName      = "/pb.Talebound/RemoveRoleFromUser"
	Talebound_GetChatMessages_FullMethodName         = "/pb.Talebound/GetChatMessages"
	Talebound_AddChatMessage_FullMethodName          = "/pb.Talebound/AddChatMessage"
	Talebound_DeleteChatMessage_FullMethodName       = "/pb.Talebound/DeleteChatMessage"
	Talebound_GetUsers_FullMethodName                = "/pb.Talebound/GetUsers"
	Talebound_CreateUser_FullMethodName              = "/pb.Talebound/CreateUser"
	Talebound_UpdateUser_FullMethodName              = "/pb.Talebound/UpdateUser"
	Talebound_LoginUser_FullMethodName               = "/pb.Talebound/LoginUser"
	Talebound_LogoutUser_FullMethodName              = "/pb.Talebound/LogoutUser"
	Talebound_ResetPasswordSendCode_FullMethodName   = "/pb.Talebound/ResetPasswordSendCode"
	Talebound_ResetPasswordVerifyCode_FullMethodName = "/pb.Talebound/ResetPasswordVerifyCode"
	Talebound_VerifyEmail_FullMethodName             = "/pb.Talebound/VerifyEmail"
)

// TaleboundClient is the client API for Talebound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaleboundClient interface {
	// ============= USER ROLES =================
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
	AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error)
	DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error)
	// ============= VERIFY =================
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
}

type taleboundClient struct {
	cc grpc.ClientConnInterface
}

func NewTaleboundClient(cc grpc.ClientConnInterface) TaleboundClient {
	return &taleboundClient{cc}
}

func (c *taleboundClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error) {
	out := new(AddRoleToUserResponse)
	err := c.cc.Invoke(ctx, Talebound_AddRoleToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error) {
	out := new(RemoveRoleFromUserResponse)
	err := c.cc.Invoke(ctx, Talebound_RemoveRoleFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error) {
	out := new(AddChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_AddChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error) {
	out := new(DeleteChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_DeleteChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Talebound_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_LogoutUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error) {
	out := new(ResetPasswordSendCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordSendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error) {
	out := new(ResetPasswordVerifyCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Talebound_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaleboundServer is the server API for Talebound service.
// All implementations must embed UnimplementedTaleboundServer
// for forward compatibility
type TaleboundServer interface {
	// ============= USER ROLES =================
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error)
	DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error)
	// ============= VERIFY =================
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	mustEmbedUnimplementedTaleboundServer()
}

// UnimplementedTaleboundServer must be embedded to have forward compatible implementations.
type UnimplementedTaleboundServer struct {
}

func (UnimplementedTaleboundServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedTaleboundServer) AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToUser not implemented")
}
func (UnimplementedTaleboundServer) RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedTaleboundServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedTaleboundServer) AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatMessage not implemented")
}
func (UnimplementedTaleboundServer) DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatMessage not implemented")
}
func (UnimplementedTaleboundServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedTaleboundServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTaleboundServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedTaleboundServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedTaleboundServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordSendCode not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordVerifyCode not implemented")
}
func (UnimplementedTaleboundServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedTaleboundServer) mustEmbedUnimplementedTaleboundServer() {}

// UnsafeTaleboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaleboundServer will
// result in compilation errors.
type UnsafeTaleboundServer interface {
	mustEmbedUnimplementedTaleboundServer()
}

func RegisterTaleboundServer(s grpc.ServiceRegistrar, srv TaleboundServer) {
	s.RegisterService(&Talebound_ServiceDesc, srv)
}

func _Talebound_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddRoleToUser(ctx, req.(*AddRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddChatMessage(ctx, req.(*AddChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, req.(*DeleteChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordSendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, req.(*ResetPasswordSendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, req.(*ResetPasswordVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Talebound_ServiceDesc is the grpc.ServiceDesc for Talebound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Talebound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talebound",
	HandlerType: (*TaleboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRoles",
			Handler:    _Talebound_GetUserRoles_Handler,
		},
		{
			MethodName: "AddRoleToUser",
			Handler:    _Talebound_AddRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _Talebound_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _Talebound_GetChatMessages_Handler,
		},
		{
			MethodName: "AddChatMessage",
			Handler:    _Talebound_AddChatMessage_Handler,
		},
		{
			MethodName: "DeleteChatMessage",
			Handler:    _Talebound_DeleteChatMessage_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Talebound_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Talebound_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Talebound_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Talebound_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _Talebound_LogoutUser_Handler,
		},
		{
			MethodName: "ResetPasswordSendCode",
			Handler:    _Talebound_ResetPasswordSendCode_Handler,
		},
		{
			MethodName: "ResetPasswordVerifyCode",
			Handler:    _Talebound_ResetPasswordVerifyCode_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Talebound_VerifyEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_talebound.proto",
}
