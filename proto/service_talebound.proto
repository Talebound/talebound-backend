syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_update_user.proto";
import "rpc_login_user.proto";
import "rpc_verify_email.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_user_roles.proto";
import "rpc_chat.proto";
import "rpc_get_user.proto";

option go_package = "github.com/the-medo/talebound-backend/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Talebound API";
    version: "1.0";
    contact: {
      name: "Medo";
      url: "https://github.com/the-medo/talebound-backend";
      email: "martinmederly@gmail.com";
    };
  };
};


service Talebound {


  // ============= USER ROLES =================
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (google.api.http) = {
      get: "/users/roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns full list of user roles";
      summary: "Get user roles (admin, moderator, etc.)";
    };
  };

  rpc AddRoleToUser(AddRoleToUserRequest) returns (AddRoleToUserResponse) {
    option (google.api.http) = {
      post: "/users/roles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new role to user";
      summary: "Add role to user";
    };
  };

  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (RemoveRoleFromUserResponse) {
    option (google.api.http) = {
      delete: "/users/{user_id}/roles/{role_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Remove role from user";
    };
  };


  // ============= CHAT MESSAGES =================

  rpc GetChatMessages(GetChatMessagesRequest) returns (GetChatMessagesResponse) {
    option (google.api.http) = {
      get: "/chat"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of chat messages";
      summary: "Get list of chat messages";
    };
  };

  rpc AddChatMessage(AddChatMessageRequest) returns (AddChatMessageResponse) {
    option (google.api.http) = {
      post: "/chat"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new chat message";
      summary: "Add new chat message";
    };
  };

  rpc DeleteChatMessage(DeleteChatMessageRequest) returns (DeleteChatMessageResponse) {
    option (google.api.http) = {
      delete: "/chat/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Delete chat message";
    };
  };

  // ============= USERS =================

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get: "/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of users";
      summary: "Get list of users";
    };
  };

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create new user";
    };
  };

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user";
      summary: "Update user";
    };
  };

  // ============= LOGIN =================
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to login user and get access + refresh user";
      summary: "Login user";
    };
  };

  // ============= VERIFY =================
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      get: "/verify"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Verify user email";
      summary: "Verify email";
    };
  };
}