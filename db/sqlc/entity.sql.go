// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: entity.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createEntity = `-- name: CreateEntity :one
INSERT INTO entities (type, post_id, map_id, location_id, image_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, post_id, map_id, location_id, image_id
`

type CreateEntityParams struct {
	Type       EntityType    `json:"type"`
	PostID     sql.NullInt32 `json:"post_id"`
	MapID      sql.NullInt32 `json:"map_id"`
	LocationID sql.NullInt32 `json:"location_id"`
	ImageID    sql.NullInt32 `json:"image_id"`
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, createEntity,
		arg.Type,
		arg.PostID,
		arg.MapID,
		arg.LocationID,
		arg.ImageID,
	)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PostID,
		&i.MapID,
		&i.LocationID,
		&i.ImageID,
	)
	return i, err
}

const createEntityGroup = `-- name: CreateEntityGroup :one
INSERT INTO entity_groups (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type CreateEntityGroupParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateEntityGroup(ctx context.Context, arg CreateEntityGroupParams) (EntityGroup, error) {
	row := q.db.QueryRowContext(ctx, createEntityGroup, arg.Name, arg.Description)
	var i EntityGroup
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createEntityGroupContent = `-- name: CreateEntityGroupContent :one
INSERT INTO entity_group_content (entity_group_id, position, content_entity_id, content_entity_group_id)
VALUES ($1, $2, $3, $4)
RETURNING id, entity_group_id, position, content_entity_id, content_entity_group_id
`

type CreateEntityGroupContentParams struct {
	EntityGroupID        int32         `json:"entity_group_id"`
	Position             int32         `json:"position"`
	ContentEntityID      sql.NullInt32 `json:"content_entity_id"`
	ContentEntityGroupID sql.NullInt32 `json:"content_entity_group_id"`
}

func (q *Queries) CreateEntityGroupContent(ctx context.Context, arg CreateEntityGroupContentParams) (EntityGroupContent, error) {
	row := q.db.QueryRowContext(ctx, createEntityGroupContent,
		arg.EntityGroupID,
		arg.Position,
		arg.ContentEntityID,
		arg.ContentEntityGroupID,
	)
	var i EntityGroupContent
	err := row.Scan(
		&i.ID,
		&i.EntityGroupID,
		&i.Position,
		&i.ContentEntityID,
		&i.ContentEntityGroupID,
	)
	return i, err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities WHERE id = $1
`

func (q *Queries) DeleteEntity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, id)
	return err
}

const deleteEntityGroup = `-- name: DeleteEntityGroup :exec
DELETE FROM entity_groups WHERE id = $1
`

func (q *Queries) DeleteEntityGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntityGroup, id)
	return err
}

const deleteEntityGroupContent = `-- name: DeleteEntityGroupContent :exec
DELETE FROM entity_group_content WHERE id = $1
`

func (q *Queries) DeleteEntityGroupContent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntityGroupContent, id)
	return err
}

const getEntityByID = `-- name: GetEntityByID :one
SELECT id, type, post_id, map_id, location_id, image_id FROM entities WHERE id = $1
`

func (q *Queries) GetEntityByID(ctx context.Context, id int32) (Entity, error) {
	row := q.db.QueryRowContext(ctx, getEntityByID, id)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PostID,
		&i.MapID,
		&i.LocationID,
		&i.ImageID,
	)
	return i, err
}

const getEntityGroupByID = `-- name: GetEntityGroupByID :one
SELECT id, name, description FROM entity_groups WHERE id = $1
`

func (q *Queries) GetEntityGroupByID(ctx context.Context, id int32) (EntityGroup, error) {
	row := q.db.QueryRowContext(ctx, getEntityGroupByID, id)
	var i EntityGroup
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getEntityGroupContentByID = `-- name: GetEntityGroupContentByID :one
SELECT id, entity_group_id, position, content_entity_id, content_entity_group_id FROM entity_group_content WHERE id = $1
`

func (q *Queries) GetEntityGroupContentByID(ctx context.Context, id int32) (EntityGroupContent, error) {
	row := q.db.QueryRowContext(ctx, getEntityGroupContentByID, id)
	var i EntityGroupContent
	err := row.Scan(
		&i.ID,
		&i.EntityGroupID,
		&i.Position,
		&i.ContentEntityID,
		&i.ContentEntityGroupID,
	)
	return i, err
}

const getEntityGroupContents = `-- name: GetEntityGroupContents :many
WITH entity_data AS (
    SELECT
        eg.id as entity_group_id,
        eg.name as entity_group_name,
        eg.description as entity_group_description,
        e.post_id,
        e.map_id,
        e.location_id,
        e.image_id
    FROM
        get_recursive_entities($1) er
            JOIN entities e ON er.content_entity_id = e.id
            JOIN entity_groups eg ON er.entity_group_id = eg.id
)
SELECT
    entity_group_id,
    CAST(min(entity_group_name) as VARCHAR) as entity_group_name,
    CAST(min(entity_group_description) as VARCHAR) as entity_group_description,
    CAST(ARRAY_AGG(post_id) FILTER (WHERE post_id IS NOT NULL) as INT[]) AS post_ids,
    CAST(ARRAY_AGG(map_id) FILTER (WHERE map_id IS NOT NULL) as INT[]) AS map_ids,
    CAST(ARRAY_AGG(location_id) FILTER (WHERE location_id IS NOT NULL) as INT[]) AS location_ids,
    CAST(ARRAY_AGG(image_id) FILTER (WHERE image_id IS NOT NULL) as INT[]) AS image_ids
FROM
    entity_data
GROUP BY
    entity_group_id
`

type GetEntityGroupContentsRow struct {
	EntityGroupID          int32   `json:"entity_group_id"`
	EntityGroupName        string  `json:"entity_group_name"`
	EntityGroupDescription string  `json:"entity_group_description"`
	PostIds                []int32 `json:"post_ids"`
	MapIds                 []int32 `json:"map_ids"`
	LocationIds            []int32 `json:"location_ids"`
	ImageIds               []int32 `json:"image_ids"`
}

func (q *Queries) GetEntityGroupContents(ctx context.Context, entityGroupID int32) ([]GetEntityGroupContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntityGroupContents, entityGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityGroupContentsRow{}
	for rows.Next() {
		var i GetEntityGroupContentsRow
		if err := rows.Scan(
			&i.EntityGroupID,
			&i.EntityGroupName,
			&i.EntityGroupDescription,
			pq.Array(&i.PostIds),
			pq.Array(&i.MapIds),
			pq.Array(&i.LocationIds),
			pq.Array(&i.ImageIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntityIDsOfGroup = `-- name: GetEntityIDsOfGroup :one
WITH entity_data AS (
    SELECT
        e.post_id,
        e.map_id,
        e.location_id,
        e.image_id
    FROM
        get_recursive_entities($1) er
        JOIN entities e ON er.content_entity_id = e.id
)
SELECT
    CAST(ARRAY_AGG(post_id) FILTER (WHERE post_id IS NOT NULL) as INT[]) AS post_ids,
    CAST(ARRAY_AGG(map_id) FILTER (WHERE map_id IS NOT NULL) as INT[]) AS map_ids,
    CAST(ARRAY_AGG(location_id) FILTER (WHERE location_id IS NOT NULL) as INT[]) AS location_ids,
    CAST(ARRAY_AGG(image_id) FILTER (WHERE image_id IS NOT NULL) as INT[]) AS image_ids
FROM
    entity_data
`

type GetEntityIDsOfGroupRow struct {
	PostIds     []int32 `json:"post_ids"`
	MapIds      []int32 `json:"map_ids"`
	LocationIds []int32 `json:"location_ids"`
	ImageIds    []int32 `json:"image_ids"`
}

func (q *Queries) GetEntityIDsOfGroup(ctx context.Context, entityGroupID int32) (GetEntityIDsOfGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getEntityIDsOfGroup, entityGroupID)
	var i GetEntityIDsOfGroupRow
	err := row.Scan(
		pq.Array(&i.PostIds),
		pq.Array(&i.MapIds),
		pq.Array(&i.LocationIds),
		pq.Array(&i.ImageIds),
	)
	return i, err
}

const updateEntity = `-- name: UpdateEntity :one
UPDATE entities
SET
    type = COALESCE($1, type),
    post_id = COALESCE($2, post_id),
    map_id = COALESCE($3, map_id),
    location_id = COALESCE($4, location_id),
    image_id = COALESCE($5, image_id)
WHERE id = $6
RETURNING id, type, post_id, map_id, location_id, image_id
`

type UpdateEntityParams struct {
	Type       NullEntityType `json:"type"`
	PostID     sql.NullInt32  `json:"post_id"`
	MapID      sql.NullInt32  `json:"map_id"`
	LocationID sql.NullInt32  `json:"location_id"`
	ImageID    sql.NullInt32  `json:"image_id"`
	ID         int32          `json:"id"`
}

func (q *Queries) UpdateEntity(ctx context.Context, arg UpdateEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, updateEntity,
		arg.Type,
		arg.PostID,
		arg.MapID,
		arg.LocationID,
		arg.ImageID,
		arg.ID,
	)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PostID,
		&i.MapID,
		&i.LocationID,
		&i.ImageID,
	)
	return i, err
}

const updateEntityGroup = `-- name: UpdateEntityGroup :one
UPDATE entity_groups
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description)
WHERE id = $3
RETURNING id, name, description
`

type UpdateEntityGroupParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateEntityGroup(ctx context.Context, arg UpdateEntityGroupParams) (EntityGroup, error) {
	row := q.db.QueryRowContext(ctx, updateEntityGroup, arg.Name, arg.Description, arg.ID)
	var i EntityGroup
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateEntityGroupContent = `-- name: UpdateEntityGroupContent :one
UPDATE entity_group_content
SET
    entity_group_id = COALESCE($1, entity_group_id),
    position = COALESCE($2, position),
    content_entity_id = COALESCE($3, content_entity_id),
    content_entity_group_id = COALESCE($4, content_entity_group_id)
WHERE id = $5
RETURNING id, entity_group_id, position, content_entity_id, content_entity_group_id
`

type UpdateEntityGroupContentParams struct {
	EntityGroupID        sql.NullInt32 `json:"entity_group_id"`
	Position             sql.NullInt32 `json:"position"`
	ContentEntityID      sql.NullInt32 `json:"content_entity_id"`
	ContentEntityGroupID sql.NullInt32 `json:"content_entity_group_id"`
	ID                   int32         `json:"id"`
}

func (q *Queries) UpdateEntityGroupContent(ctx context.Context, arg UpdateEntityGroupContentParams) (EntityGroupContent, error) {
	row := q.db.QueryRowContext(ctx, updateEntityGroupContent,
		arg.EntityGroupID,
		arg.Position,
		arg.ContentEntityID,
		arg.ContentEntityGroupID,
		arg.ID,
	)
	var i EntityGroupContent
	err := row.Scan(
		&i.ID,
		&i.EntityGroupID,
		&i.Position,
		&i.ContentEntityID,
		&i.ContentEntityGroupID,
	)
	return i, err
}
