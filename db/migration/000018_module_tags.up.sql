-- module_type enum
CREATE TYPE "module_type" AS ENUM (
    'unknown',
    'world',
    'quest',
    'character',
    'system'
);

-- modules => new "module_type" column
ALTER TABLE "modules" ADD COLUMN module_type module_type;

UPDATE "modules"
SET module_type =
    CASE
        WHEN world_id IS NOT NULL THEN 'world'::module_type
        WHEN quest_id IS NOT NULL THEN 'quest'::module_type
        WHEN character_id IS NOT NULL THEN 'character'::module_type
        WHEN system_id IS NOT NULL THEN 'system'::module_type
        ELSE 'unknown'::module_type
    END
;
ALTER TABLE "modules" ALTER COLUMN "module_type" SET NOT NULL;

--module_type_tags_available table
CREATE TABLE "module_type_tags_available" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "module_type" module_type NOT NULL,
    "tag" varchar NOT NULL
);
CREATE UNIQUE INDEX ON "module_type_tags_available" ("module_type", "tag");

INSERT INTO module_type_tags_available (module_type, tag)
SELECT 'world', tag FROM world_tags_available;


-- module_tags table
CREATE TABLE "module_tags" (
    "module_id" int NOT NULL,
    "tag_id" int NOT NULL
);

INSERT INTO module_tags (module_id, tag_id)
SELECT m.id, mtta.id
FROM
    world_tags wt
    JOIN modules m ON m.module_type = 'world' AND m.world_id = wt.world_id
    JOIN world_tags_available wta ON wt.tag_id = wta.id
    JOIN module_type_tags_available mtta ON mtta.tag = wta.tag
;

CREATE UNIQUE INDEX ON "module_tags" ("module_id", "tag_id");

ALTER TABLE "module_tags" ADD FOREIGN KEY ("module_id") REFERENCES "modules" ("id");

ALTER TABLE "module_tags" ADD FOREIGN KEY ("tag_id") REFERENCES "module_type_tags_available" ("id");

--this has no "down" migration - unique key should always been on combination of module_id and tag
ALTER TABLE "module_tags_available" DROP CONSTRAINT IF EXISTS module_tags_available_tag_key;

ALTER TABLE "module_tags_available" RENAME TO "module_entity_tags_available";

CREATE UNIQUE INDEX ON "module_entity_tags_available" ("module_id", "tag");

COMMENT ON TABLE "modules" IS 'Groups higher-level sections into one table. Contains worlds, quests, characters and play systems.';

COMMENT ON TABLE "module_type_tags_available" IS 'Contains all tags, that are available for module TYPE - so, users can mark their worlds / quests / ... with these tags. These are NOT for marking entities.';

COMMENT ON TABLE "module_tags" IS 'Tag assignments for modules. So, if you are looking for what tags are assigned to a world, you can look here.';

COMMENT ON TABLE "module_entity_tags_available" IS 'Contains tags, that are possible to assign to ANY entity inside of a module. One module can only have one set of tags, that are usable for any entity type inside of that module.';

COMMENT ON TABLE "entity_tags" IS 'Assignments of module_entity_tags_available to entities';


DROP TABLE world_tags;
DROP TABLE world_tags_available;

