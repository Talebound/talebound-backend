// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: location.sql

package db

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, description, post_id, thumbnail_image_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, post_id, thumbnail_image_id
`

type CreateLocationParams struct {
	Name             string         `json:"name"`
	Description      sql.NullString `json:"description"`
	PostID           sql.NullInt32  `json:"post_id"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.Name,
		arg.Description,
		arg.PostID,
		arg.ThumbnailImageID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
	)
	return i, err
}

const createWorldLocation = `-- name: CreateWorldLocation :one
INSERT INTO world_locations (world_id, location_id)
VALUES ($1, $2)
RETURNING world_id, location_id
`

type CreateWorldLocationParams struct {
	WorldID    int32 `json:"world_id"`
	LocationID int32 `json:"location_id"`
}

func (q *Queries) CreateWorldLocation(ctx context.Context, arg CreateWorldLocationParams) (WorldLocation, error) {
	row := q.db.QueryRowContext(ctx, createWorldLocation, arg.WorldID, arg.LocationID)
	var i WorldLocation
	err := row.Scan(&i.WorldID, &i.LocationID)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
CALL delete_location($1)
`

func (q *Queries) DeleteLocation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const deleteWorldLocation = `-- name: DeleteWorldLocation :exec
DELETE FROM world_locations
WHERE world_id = $1 AND location_id = $2
`

type DeleteWorldLocationParams struct {
	WorldID    int32 `json:"world_id"`
	LocationID int32 `json:"location_id"`
}

func (q *Queries) DeleteWorldLocation(ctx context.Context, arg DeleteWorldLocationParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorldLocation, arg.WorldID, arg.LocationID)
	return err
}

const getLocationAssignments = `-- name: GetLocationAssignments :one
SELECT
    CAST(MAX(COALESCE(wl.world_id, 0)) as integer) AS world_id,
    0 AS quest_id
FROM
    locations l
    LEFT JOIN world_locations wl ON l.id = wl.location_id
WHERE l.id = $1
GROUP BY l.id
`

type GetLocationAssignmentsRow struct {
	WorldID int32       `json:"world_id"`
	QuestID interface{} `json:"quest_id"`
}

func (q *Queries) GetLocationAssignments(ctx context.Context, locationID int32) (GetLocationAssignmentsRow, error) {
	row := q.db.QueryRowContext(ctx, getLocationAssignments, locationID)
	var i GetLocationAssignmentsRow
	err := row.Scan(&i.WorldID, &i.QuestID)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, description, post_id, thumbnail_image_id, thumbnail_image_url FROM view_locations WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (ViewLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i ViewLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
		&i.ThumbnailImageUrl,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, name, description, post_id, thumbnail_image_id, thumbnail_image_url FROM view_locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]ViewLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewLocation{}
	for rows.Next() {
		var i ViewLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsForPlacement = `-- name: GetLocationsForPlacement :many
SELECT
    vl.id, vl.name, vl.description, vl.post_id, vl.thumbnail_image_id, vl.thumbnail_image_url
FROM
    view_locations vl
    LEFT JOIN world_locations wl ON vl.id = wl.location_id
    --LEFT JOIN quest_locations ql ON vl.id = ql.location_id
WHERE wl.world_id = $1 --OR ql.quest_id = sqlc.arg(quest_id);
`

func (q *Queries) GetLocationsForPlacement(ctx context.Context, worldID int32) ([]ViewLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsForPlacement, worldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewLocation{}
	for rows.Next() {
		var i ViewLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldLocations = `-- name: GetWorldLocations :many
SELECT l.id, l.name, l.description, l.post_id, l.thumbnail_image_id, l.thumbnail_image_url
FROM view_locations l
    JOIN world_locations wl ON l.id = wl.location_id
WHERE wl.world_id = $1
`

func (q *Queries) GetWorldLocations(ctx context.Context, worldID int32) ([]ViewLocation, error) {
	rows, err := q.db.QueryContext(ctx, getWorldLocations, worldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewLocation{}
	for rows.Next() {
		var i ViewLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    post_id = COALESCE($3, post_id),
    thumbnail_image_id = COALESCE($4, thumbnail_image_id)
WHERE id = $5
RETURNING id, name, description, post_id, thumbnail_image_id
`

type UpdateLocationParams struct {
	Name             sql.NullString `json:"name"`
	Description      sql.NullString `json:"description"`
	PostID           sql.NullInt32  `json:"post_id"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.Name,
		arg.Description,
		arg.PostID,
		arg.ThumbnailImageID,
		arg.ID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
	)
	return i, err
}
