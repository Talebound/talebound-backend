// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: menu.sql

package db

import (
	"context"
	"database/sql"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO menus (menu_code, menu_header_img_id)
VALUES ($1, $2)
RETURNING id, menu_code, menu_header_img_id
`

type CreateMenuParams struct {
	MenuCode        string        `json:"menu_code"`
	MenuHeaderImgID sql.NullInt32 `json:"menu_header_img_id"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, createMenu, arg.MenuCode, arg.MenuHeaderImgID)
	var i Menu
	err := row.Scan(&i.ID, &i.MenuCode, &i.MenuHeaderImgID)
	return i, err
}

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (menu_id, menu_item_code, name, position, is_main, description_post_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, menu_id, menu_item_code, name, position, is_main, description_post_id
`

type CreateMenuItemParams struct {
	MenuID            int32         `json:"menu_id"`
	MenuItemCode      string        `json:"menu_item_code"`
	Name              string        `json:"name"`
	Position          int32         `json:"position"`
	IsMain            sql.NullBool  `json:"is_main"`
	DescriptionPostID sql.NullInt32 `json:"description_post_id"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.MenuID,
		arg.MenuItemCode,
		arg.Name,
		arg.Position,
		arg.IsMain,
		arg.DescriptionPostID,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
	)
	return i, err
}

const createMenuItemEntityGroup = `-- name: CreateMenuItemEntityGroup :one
INSERT INTO menu_item_entity_groups (menu_id, menu_item_id, entity_group_id, position)
VALUES ($1, $2, $3, $4)
RETURNING menu_id, menu_item_id, entity_group_id, position
`

type CreateMenuItemEntityGroupParams struct {
	MenuID        int32         `json:"menu_id"`
	MenuItemID    sql.NullInt32 `json:"menu_item_id"`
	EntityGroupID int32         `json:"entity_group_id"`
	Position      int32         `json:"position"`
}

func (q *Queries) CreateMenuItemEntityGroup(ctx context.Context, arg CreateMenuItemEntityGroupParams) (MenuItemEntityGroup, error) {
	row := q.db.QueryRowContext(ctx, createMenuItemEntityGroup,
		arg.MenuID,
		arg.MenuItemID,
		arg.EntityGroupID,
		arg.Position,
	)
	var i MenuItemEntityGroup
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.EntityGroupID,
		&i.Position,
	)
	return i, err
}

const createMenuItemPost = `-- name: CreateMenuItemPost :one
WITH post_count AS (
    SELECT COUNT(*) AS count FROM menu_item_posts WHERE menu_item_id = COALESCE($2, 0)
)
INSERT INTO menu_item_posts (menu_id, menu_item_id, post_id, position)
SELECT
    $1 as menu_id,
    $2 as menu_item_id,
    $3 as post_id,
    COALESCE($4, count + 1) as position
FROM post_count
RETURNING menu_id, menu_item_id, post_id, position
`

type CreateMenuItemPostParams struct {
	MenuID     int32         `json:"menu_id"`
	MenuItemID sql.NullInt32 `json:"menu_item_id"`
	PostID     int32         `json:"post_id"`
	Position   sql.NullInt32 `json:"position"`
}

func (q *Queries) CreateMenuItemPost(ctx context.Context, arg CreateMenuItemPostParams) (MenuItemPost, error) {
	row := q.db.QueryRowContext(ctx, createMenuItemPost,
		arg.MenuID,
		arg.MenuItemID,
		arg.PostID,
		arg.Position,
	)
	var i MenuItemPost
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.PostID,
		&i.Position,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menus WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
WITH deleted_item AS (
    DELETE FROM "menu_items" d
        WHERE d.id = $1
        RETURNING id, menu_id, menu_item_code, name, position, is_main, description_post_id
)
UPDATE "menu_items"
SET "position" = "position" - 1
WHERE "menu_id" = (SELECT menu_id FROM deleted_item)
  AND "position" > (SELECT position FROM deleted_item)
`

func (q *Queries) DeleteMenuItem(ctx context.Context, menuItemID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, menuItemID)
	return err
}

const deleteMenuItemEntityGroup = `-- name: DeleteMenuItemEntityGroup :exec
WITH deleted_menu_item_entity_group AS (
    DELETE FROM "menu_item_entity_groups" d
        WHERE d.menu_item_id = $1 AND d.entity_group_id = $2
        RETURNING menu_id, menu_item_id, entity_group_id, position
)
UPDATE "menu_item_entity_groups" mi
SET "position" = "position" - 1
WHERE
    mi.menu_item_id = $1
    AND "position" > (SELECT position FROM deleted_menu_item_entity_group)
`

type DeleteMenuItemEntityGroupParams struct {
	MenuItemID    sql.NullInt32 `json:"menu_item_id"`
	EntityGroupID int32         `json:"entity_group_id"`
}

func (q *Queries) DeleteMenuItemEntityGroup(ctx context.Context, arg DeleteMenuItemEntityGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItemEntityGroup, arg.MenuItemID, arg.EntityGroupID)
	return err
}

const deleteMenuItemPost = `-- name: DeleteMenuItemPost :exec
WITH deleted_menu_item_post AS (
    DELETE FROM "menu_item_posts" d
        WHERE d.menu_id = $1 AND d.post_id = $2
        RETURNING menu_id, menu_item_id, post_id, position
)
UPDATE "menu_item_posts"
SET "position" = "position" - 1
WHERE
    "menu_item_id" = (SELECT menu_item_id FROM deleted_menu_item_post)
    AND "position" > (SELECT position FROM deleted_menu_item_post)
`

type DeleteMenuItemPostParams struct {
	MenuID int32 `json:"menu_id"`
	PostID int32 `json:"post_id"`
}

func (q *Queries) DeleteMenuItemPost(ctx context.Context, arg DeleteMenuItemPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItemPost, arg.MenuID, arg.PostID)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, menu_code, menu_header_img_id, header_image_url FROM view_menus WHERE id = $1
`

func (q *Queries) GetMenu(ctx context.Context, id int32) (ViewMenu, error) {
	row := q.db.QueryRowContext(ctx, getMenu, id)
	var i ViewMenu
	err := row.Scan(
		&i.ID,
		&i.MenuCode,
		&i.MenuHeaderImgID,
		&i.HeaderImageUrl,
	)
	return i, err
}

const getMenuItemById = `-- name: GetMenuItemById :one
SELECT id, menu_id, menu_item_code, name, position, is_main, description_post_id FROM menu_items WHERE id = $1
`

func (q *Queries) GetMenuItemById(ctx context.Context, id int32) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemById, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
	)
	return i, err
}

const getMenuItemEntityGroup = `-- name: GetMenuItemEntityGroup :one
SELECT menu_id, menu_item_id, entity_group_id, position FROM menu_item_entity_groups WHERE menu_item_id = $1 AND entity_group_id = $2
`

type GetMenuItemEntityGroupParams struct {
	MenuItemID    sql.NullInt32 `json:"menu_item_id"`
	EntityGroupID int32         `json:"entity_group_id"`
}

func (q *Queries) GetMenuItemEntityGroup(ctx context.Context, arg GetMenuItemEntityGroupParams) (MenuItemEntityGroup, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemEntityGroup, arg.MenuItemID, arg.EntityGroupID)
	var i MenuItemEntityGroup
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.EntityGroupID,
		&i.Position,
	)
	return i, err
}

const getMenuItemPost = `-- name: GetMenuItemPost :one
SELECT menu_id, menu_item_id, post_id, position, id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id, is_draft, is_private, description, thumbnail_img_id, post_type_name, post_type_draftable, post_type_privatable, thumbnail_img_url FROM view_menu_item_posts WHERE menu_item_id = $1 AND post_id = $2
`

type GetMenuItemPostParams struct {
	MenuItemID sql.NullInt32 `json:"menu_item_id"`
	PostID     int32         `json:"post_id"`
}

func (q *Queries) GetMenuItemPost(ctx context.Context, arg GetMenuItemPostParams) (ViewMenuItemPost, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemPost, arg.MenuItemID, arg.PostID)
	var i ViewMenuItemPost
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.PostID,
		&i.Position,
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
		&i.IsDraft,
		&i.IsPrivate,
		&i.Description,
		&i.ThumbnailImgID,
		&i.PostTypeName,
		&i.PostTypeDraftable,
		&i.PostTypePrivatable,
		&i.ThumbnailImgUrl,
	)
	return i, err
}

const getMenuItemPosts = `-- name: GetMenuItemPosts :many
SELECT menu_id, menu_item_id, post_id, position, id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id, is_draft, is_private, description, thumbnail_img_id, post_type_name, post_type_draftable, post_type_privatable, thumbnail_img_url FROM view_menu_item_posts WHERE menu_item_id = $1
`

func (q *Queries) GetMenuItemPosts(ctx context.Context, menuItemID sql.NullInt32) ([]ViewMenuItemPost, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItemPosts, menuItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMenuItemPost{}
	for rows.Next() {
		var i ViewMenuItemPost
		if err := rows.Scan(
			&i.MenuID,
			&i.MenuItemID,
			&i.PostID,
			&i.Position,
			&i.ID,
			&i.PostTypeID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
			&i.IsDraft,
			&i.IsPrivate,
			&i.Description,
			&i.ThumbnailImgID,
			&i.PostTypeName,
			&i.PostTypeDraftable,
			&i.PostTypePrivatable,
			&i.ThumbnailImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuItemPostsByMenuId = `-- name: GetMenuItemPostsByMenuId :many
SELECT menu_id, menu_item_id, post_id, position, id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id, is_draft, is_private, description, thumbnail_img_id, post_type_name, post_type_draftable, post_type_privatable, thumbnail_img_url FROM view_menu_item_posts WHERE menu_id = $1
`

func (q *Queries) GetMenuItemPostsByMenuId(ctx context.Context, menuID int32) ([]ViewMenuItemPost, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItemPostsByMenuId, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMenuItemPost{}
	for rows.Next() {
		var i ViewMenuItemPost
		if err := rows.Scan(
			&i.MenuID,
			&i.MenuItemID,
			&i.PostID,
			&i.Position,
			&i.ID,
			&i.PostTypeID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
			&i.IsDraft,
			&i.IsPrivate,
			&i.Description,
			&i.ThumbnailImgID,
			&i.PostTypeName,
			&i.PostTypeDraftable,
			&i.PostTypePrivatable,
			&i.ThumbnailImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, menu_id, menu_item_code, name, position, is_main, description_post_id FROM menu_items WHERE menu_id = $1
`

func (q *Queries) GetMenuItems(ctx context.Context, menuID int32) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItems, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.MenuItemCode,
			&i.Name,
			&i.Position,
			&i.IsMain,
			&i.DescriptionPostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const menuItemChangePositions = `-- name: MenuItemChangePositions :exec
CALL move_menu_item($1, $2)
`

type MenuItemChangePositionsParams struct {
	MenuItemID     int32 `json:"menu_item_id"`
	TargetPosition int32 `json:"target_position"`
}

func (q *Queries) MenuItemChangePositions(ctx context.Context, arg MenuItemChangePositionsParams) error {
	_, err := q.db.ExecContext(ctx, menuItemChangePositions, arg.MenuItemID, arg.TargetPosition)
	return err
}

const menuItemMoveGroupUp = `-- name: MenuItemMoveGroupUp :exec
CALL move_group_up($1)
`

func (q *Queries) MenuItemMoveGroupUp(ctx context.Context, menuItemID int32) error {
	_, err := q.db.ExecContext(ctx, menuItemMoveGroupUp, menuItemID)
	return err
}

const menuItemPostChangePositions = `-- name: MenuItemPostChangePositions :exec
CALL move_menu_item_post($1, $2, $3)
`

type MenuItemPostChangePositionsParams struct {
	MenuItemID     int32 `json:"menu_item_id"`
	PostID         int32 `json:"post_id"`
	TargetPosition int32 `json:"target_position"`
}

func (q *Queries) MenuItemPostChangePositions(ctx context.Context, arg MenuItemPostChangePositionsParams) error {
	_, err := q.db.ExecContext(ctx, menuItemPostChangePositions, arg.MenuItemID, arg.PostID, arg.TargetPosition)
	return err
}

const unassignMenuItemPost = `-- name: UnassignMenuItemPost :one
UPDATE menu_item_posts
SET menu_item_id = NULL
WHERE menu_item_id = $1 AND post_id = $2
RETURNING menu_id, menu_item_id, post_id, position
`

type UnassignMenuItemPostParams struct {
	MenuItemID sql.NullInt32 `json:"menu_item_id"`
	PostID     int32         `json:"post_id"`
}

func (q *Queries) UnassignMenuItemPost(ctx context.Context, arg UnassignMenuItemPostParams) (MenuItemPost, error) {
	row := q.db.QueryRowContext(ctx, unassignMenuItemPost, arg.MenuItemID, arg.PostID)
	var i MenuItemPost
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.PostID,
		&i.Position,
	)
	return i, err
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE menus
SET menu_code = COALESCE($1, menu_code),
    menu_header_img_id = COALESCE($2, menu_header_img_id)
WHERE menus.id = $3
RETURNING id, menu_code, menu_header_img_id
`

type UpdateMenuParams struct {
	MenuCode        sql.NullString `json:"menu_code"`
	MenuHeaderImgID sql.NullInt32  `json:"menu_header_img_id"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenu, arg.MenuCode, arg.MenuHeaderImgID, arg.ID)
	var i Menu
	err := row.Scan(&i.ID, &i.MenuCode, &i.MenuHeaderImgID)
	return i, err
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE menu_items
SET
    menu_item_code = COALESCE($1, menu_item_code),
    name = COALESCE($2, name),
    -- position = COALESCE(sqlc.narg(position), position),
    is_main = COALESCE($3, is_main),
    description_post_id = COALESCE($4, description_post_id)
WHERE id = $5
RETURNING id, menu_id, menu_item_code, name, position, is_main, description_post_id
`

type UpdateMenuItemParams struct {
	MenuItemCode      sql.NullString `json:"menu_item_code"`
	Name              sql.NullString `json:"name"`
	IsMain            sql.NullBool   `json:"is_main"`
	DescriptionPostID sql.NullInt32  `json:"description_post_id"`
	ID                int32          `json:"id"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItem,
		arg.MenuItemCode,
		arg.Name,
		arg.IsMain,
		arg.DescriptionPostID,
		arg.ID,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
	)
	return i, err
}

const updateMenuItemEntityGroup = `-- name: UpdateMenuItemEntityGroup :one
UPDATE menu_item_entity_groups
SET
    position = COALESCE($1, position)
WHERE menu_item_id = $2 AND entity_group_id = $3
RETURNING menu_id, menu_item_id, entity_group_id, position
`

type UpdateMenuItemEntityGroupParams struct {
	Position      sql.NullInt32 `json:"position"`
	MenuItemID    sql.NullInt32 `json:"menu_item_id"`
	EntityGroupID int32         `json:"entity_group_id"`
}

func (q *Queries) UpdateMenuItemEntityGroup(ctx context.Context, arg UpdateMenuItemEntityGroupParams) (MenuItemEntityGroup, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItemEntityGroup, arg.Position, arg.MenuItemID, arg.EntityGroupID)
	var i MenuItemEntityGroup
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.EntityGroupID,
		&i.Position,
	)
	return i, err
}

const updateMenuItemPost = `-- name: UpdateMenuItemPost :one
UPDATE menu_item_posts
SET menu_item_id = COALESCE($1, menu_item_id),
    post_id = COALESCE($2, post_id),
    position = COALESCE($3, position)
WHERE (menu_item_id = $4 OR ($4 IS NULL AND menu_item_id IS NULL))  AND post_id = $2
RETURNING menu_id, menu_item_id, post_id, position
`

type UpdateMenuItemPostParams struct {
	NewMenuItemID sql.NullInt32 `json:"new_menu_item_id"`
	PostID        sql.NullInt32 `json:"post_id"`
	Position      sql.NullInt32 `json:"position"`
	MenuItemID    sql.NullInt32 `json:"menu_item_id"`
}

func (q *Queries) UpdateMenuItemPost(ctx context.Context, arg UpdateMenuItemPostParams) (MenuItemPost, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItemPost,
		arg.NewMenuItemID,
		arg.PostID,
		arg.Position,
		arg.MenuItemID,
	)
	var i MenuItemPost
	err := row.Scan(
		&i.MenuID,
		&i.MenuItemID,
		&i.PostID,
		&i.Position,
	)
	return i, err
}
