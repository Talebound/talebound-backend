CREATE OR REPLACE FUNCTION get_recursive_entities(_main_entity_group_id INT)
    RETURNS TABLE (
                      id INT,
                      entity_group_id INT,
                      content_entity_id INT,
                      content_entity_group_id INT
                  ) AS $$
BEGIN
    RETURN QUERY
        WITH RECURSIVE entity_recursive AS (
            SELECT
                egc.id,
                egc.entity_group_id,
                egc.content_entity_id,
                egc.content_entity_group_id
            FROM
                entity_group_content egc
            WHERE
                egc.entity_group_id = _main_entity_group_id

            UNION ALL

            SELECT
                child_egc.id,
                child_egc.entity_group_id,
                child_egc.content_entity_id,
                child_egc.content_entity_group_id
            FROM
                entity_recursive er
                    JOIN entity_group_content child_egc ON er.content_entity_group_id = child_egc.entity_group_id
            WHERE
                child_egc.content_entity_id IS NOT NULL OR child_egc.content_entity_group_id IS NOT NULL
        )
        SELECT * FROM entity_recursive;
END;
$$ LANGUAGE plpgsql;


CREATE TABLE "quests" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE "systems" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE "modules" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "world_id" int,
    "system_id" int,
    "character_id" int,
    "quest_id" int
);
ALTER TABLE "modules" ADD FOREIGN KEY ("world_id") REFERENCES "worlds" ("id");
ALTER TABLE "modules" ADD FOREIGN KEY ("system_id") REFERENCES "systems" ("id");
ALTER TABLE "modules" ADD FOREIGN KEY ("character_id") REFERENCES "characters" ("id");
ALTER TABLE "modules" ADD FOREIGN KEY ("quest_id") REFERENCES "quests" ("id");

INSERT INTO "modules" (world_id) SELECT id FROM "worlds";


CREATE TABLE "module_tags_available" (
    "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "module_id" int NOT NULL,
    "tag" varchar UNIQUE NOT NULL
);
ALTER TABLE "module_tags_available" ADD FOREIGN KEY ("module_id") REFERENCES "modules" ("id");

CREATE TABLE "entity_tags" (
    "entity_id" int NOT NULL,
    "tag_id" int NOT NULL
);
ALTER TABLE "entity_tags" ADD FOREIGN KEY ("entity_id") REFERENCES "entities" ("id");
ALTER TABLE "entity_tags" ADD FOREIGN KEY ("tag_id") REFERENCES "module_tags_available" ("id");
CREATE UNIQUE INDEX ON "entity_tags" ("entity_id", "tag_id");



-- add module_id to entities and fill it with world data
ALTER TABLE "entities" ADD COLUMN module_id int;

WITH entity_modules AS (
    SELECT
        p.id as module_id,
        e.content_entity_id as entity_id
    FROM
        world_menu wm
        JOIN modules p ON wm.world_id = p.world_id
        JOIN menu_items mi ON wm.menu_id = mi.menu_id
        CROSS JOIN get_recursive_entities(mi.entity_group_id) e
    WHERE
        e.content_entity_id IS NOT NULL AND e.content_entity_id > 0
) UPDATE
    "entities"
SET
    "module_id" = entity_modules.module_id
FROM
    entity_modules
WHERE
    id = entity_modules.entity_id;

DROP FUNCTION IF EXISTS get_recursive_entities(_main_entity_group_id integer);

ALTER TABLE "entities" ADD FOREIGN KEY ("module_id") REFERENCES "modules" ("id");
ALTER TABLE "entities" ALTER COLUMN "module_id" SET NOT NULL;


