// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: entity.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getEntityGroupContents = `-- name: GetEntityGroupContents :many
WITH entity_data AS (
    SELECT
        eg.id as entity_group_id,
        eg.name as entity_group_name,
        eg.description as entity_group_description,
        e.post_id,
        e.map_id,
        e.location_id,
        e.image_id
    FROM
        get_recursive_entities($1) er
            JOIN entities e ON er.content_entity_id = e.id
            JOIN entity_groups eg ON er.entity_group_id = eg.id
)
SELECT
    entity_group_id,
    CAST(min(entity_group_name) as VARCHAR) as entity_group_name,
    CAST(min(entity_group_description) as VARCHAR) as entity_group_description,
    CAST(ARRAY_AGG(post_id) FILTER (WHERE post_id IS NOT NULL) as INT[]) AS post_ids,
    CAST(ARRAY_AGG(map_id) FILTER (WHERE map_id IS NOT NULL) as INT[]) AS map_ids,
    CAST(ARRAY_AGG(location_id) FILTER (WHERE location_id IS NOT NULL) as INT[]) AS location_ids,
    CAST(ARRAY_AGG(image_id) FILTER (WHERE image_id IS NOT NULL) as INT[]) AS image_ids
FROM
    entity_data
GROUP BY
    entity_group_id
`

type GetEntityGroupContentsRow struct {
	EntityGroupID          int32   `json:"entity_group_id"`
	EntityGroupName        string  `json:"entity_group_name"`
	EntityGroupDescription string  `json:"entity_group_description"`
	PostIds                []int32 `json:"post_ids"`
	MapIds                 []int32 `json:"map_ids"`
	LocationIds            []int32 `json:"location_ids"`
	ImageIds               []int32 `json:"image_ids"`
}

func (q *Queries) GetEntityGroupContents(ctx context.Context, entityGroupID int32) ([]GetEntityGroupContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntityGroupContents, entityGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityGroupContentsRow{}
	for rows.Next() {
		var i GetEntityGroupContentsRow
		if err := rows.Scan(
			&i.EntityGroupID,
			&i.EntityGroupName,
			&i.EntityGroupDescription,
			pq.Array(&i.PostIds),
			pq.Array(&i.MapIds),
			pq.Array(&i.LocationIds),
			pq.Array(&i.ImageIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntityIDsOfGroup = `-- name: GetEntityIDsOfGroup :one
WITH entity_data AS (
    SELECT
        e.post_id,
        e.map_id,
        e.location_id,
        e.image_id
    FROM
        get_recursive_entities($1) er
        JOIN entities e ON er.content_entity_id = e.id
)
SELECT
    CAST(ARRAY_AGG(post_id) FILTER (WHERE post_id IS NOT NULL) as INT[]) AS post_ids,
    CAST(ARRAY_AGG(map_id) FILTER (WHERE map_id IS NOT NULL) as INT[]) AS map_ids,
    CAST(ARRAY_AGG(location_id) FILTER (WHERE location_id IS NOT NULL) as INT[]) AS location_ids,
    CAST(ARRAY_AGG(image_id) FILTER (WHERE image_id IS NOT NULL) as INT[]) AS image_ids
FROM
    entity_data
`

type GetEntityIDsOfGroupRow struct {
	PostIds     []int32 `json:"post_ids"`
	MapIds      []int32 `json:"map_ids"`
	LocationIds []int32 `json:"location_ids"`
	ImageIds    []int32 `json:"image_ids"`
}

func (q *Queries) GetEntityIDsOfGroup(ctx context.Context, entityGroupID int32) (GetEntityIDsOfGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getEntityIDsOfGroup, entityGroupID)
	var i GetEntityIDsOfGroupRow
	err := row.Scan(
		pq.Array(&i.PostIds),
		pq.Array(&i.MapIds),
		pq.Array(&i.LocationIds),
		pq.Array(&i.ImageIds),
	)
	return i, err
}
