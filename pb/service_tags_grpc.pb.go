// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: services/tags/service_tags.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tags_GetAvailableWorldTags_FullMethodName   = "/pb.Tags/GetAvailableWorldTags"
	Tags_CreateAvailableWorldTag_FullMethodName = "/pb.Tags/CreateAvailableWorldTag"
	Tags_UpdateAvailableWorldTag_FullMethodName = "/pb.Tags/UpdateAvailableWorldTag"
	Tags_DeleteAvailableWorldTag_FullMethodName = "/pb.Tags/DeleteAvailableWorldTag"
)

// TagsClient is the client API for Tags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsClient interface {
	GetAvailableWorldTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableWorldTagsResponse, error)
	CreateAvailableWorldTag(ctx context.Context, in *CreateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	UpdateAvailableWorldTag(ctx context.Context, in *UpdateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error)
	DeleteAvailableWorldTag(ctx context.Context, in *DeleteAvailableWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tagsClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsClient(cc grpc.ClientConnInterface) TagsClient {
	return &tagsClient{cc}
}

func (c *tagsClient) GetAvailableWorldTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableWorldTagsResponse, error) {
	out := new(GetAvailableWorldTagsResponse)
	err := c.cc.Invoke(ctx, Tags_GetAvailableWorldTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) CreateAvailableWorldTag(ctx context.Context, in *CreateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Tags_CreateAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) UpdateAvailableWorldTag(ctx context.Context, in *UpdateAvailableWorldTagRequest, opts ...grpc.CallOption) (*ViewTag, error) {
	out := new(ViewTag)
	err := c.cc.Invoke(ctx, Tags_UpdateAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsClient) DeleteAvailableWorldTag(ctx context.Context, in *DeleteAvailableWorldTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tags_DeleteAvailableWorldTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsServer is the server API for Tags service.
// All implementations must embed UnimplementedTagsServer
// for forward compatibility
type TagsServer interface {
	GetAvailableWorldTags(context.Context, *emptypb.Empty) (*GetAvailableWorldTagsResponse, error)
	CreateAvailableWorldTag(context.Context, *CreateAvailableWorldTagRequest) (*ViewTag, error)
	UpdateAvailableWorldTag(context.Context, *UpdateAvailableWorldTagRequest) (*ViewTag, error)
	DeleteAvailableWorldTag(context.Context, *DeleteAvailableWorldTagRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTagsServer()
}

// UnimplementedTagsServer must be embedded to have forward compatible implementations.
type UnimplementedTagsServer struct {
}

func (UnimplementedTagsServer) GetAvailableWorldTags(context.Context, *emptypb.Empty) (*GetAvailableWorldTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableWorldTags not implemented")
}
func (UnimplementedTagsServer) CreateAvailableWorldTag(context.Context, *CreateAvailableWorldTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvailableWorldTag not implemented")
}
func (UnimplementedTagsServer) UpdateAvailableWorldTag(context.Context, *UpdateAvailableWorldTagRequest) (*ViewTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailableWorldTag not implemented")
}
func (UnimplementedTagsServer) DeleteAvailableWorldTag(context.Context, *DeleteAvailableWorldTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAvailableWorldTag not implemented")
}
func (UnimplementedTagsServer) mustEmbedUnimplementedTagsServer() {}

// UnsafeTagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServer will
// result in compilation errors.
type UnsafeTagsServer interface {
	mustEmbedUnimplementedTagsServer()
}

func RegisterTagsServer(s grpc.ServiceRegistrar, srv TagsServer) {
	s.RegisterService(&Tags_ServiceDesc, srv)
}

func _Tags_GetAvailableWorldTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).GetAvailableWorldTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_GetAvailableWorldTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).GetAvailableWorldTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_CreateAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).CreateAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_CreateAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).CreateAvailableWorldTag(ctx, req.(*CreateAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_UpdateAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).UpdateAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_UpdateAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).UpdateAvailableWorldTag(ctx, req.(*UpdateAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tags_DeleteAvailableWorldTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAvailableWorldTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServer).DeleteAvailableWorldTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tags_DeleteAvailableWorldTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServer).DeleteAvailableWorldTag(ctx, req.(*DeleteAvailableWorldTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tags_ServiceDesc is the grpc.ServiceDesc for Tags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Tags",
	HandlerType: (*TagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableWorldTags",
			Handler:    _Tags_GetAvailableWorldTags_Handler,
		},
		{
			MethodName: "CreateAvailableWorldTag",
			Handler:    _Tags_CreateAvailableWorldTag_Handler,
		},
		{
			MethodName: "UpdateAvailableWorldTag",
			Handler:    _Tags_UpdateAvailableWorldTag_Handler,
		},
		{
			MethodName: "DeleteAvailableWorldTag",
			Handler:    _Tags_DeleteAvailableWorldTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/tags/service_tags.proto",
}
