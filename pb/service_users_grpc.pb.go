// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/users/service_users.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Users_GetUserRoles_FullMethodName                       = "/pb.Users/GetUserRoles"
	Users_AddRoleToUser_FullMethodName                      = "/pb.Users/AddRoleToUser"
	Users_RemoveRoleFromUser_FullMethodName                 = "/pb.Users/RemoveRoleFromUser"
	Users_GetUsers_FullMethodName                           = "/pb.Users/GetUsers"
	Users_GetUserById_FullMethodName                        = "/pb.Users/GetUserById"
	Users_CreateUser_FullMethodName                         = "/pb.Users/CreateUser"
	Users_UpdateUser_FullMethodName                         = "/pb.Users/UpdateUser"
	Users_UpdateUserIntroduction_FullMethodName             = "/pb.Users/UpdateUserIntroduction"
	Users_CreateOrUpdateEvaluationVote_FullMethodName       = "/pb.Users/CreateOrUpdateEvaluationVote"
	Users_GetEvaluationVotesByUserId_FullMethodName         = "/pb.Users/GetEvaluationVotesByUserId"
	Users_GetEvaluationVotesByUserIdAndVoter_FullMethodName = "/pb.Users/GetEvaluationVotesByUserIdAndVoter"
	Users_DeleteEvaluationVote_FullMethodName               = "/pb.Users/DeleteEvaluationVote"
	Users_GetAverageUserEvaluationsByType_FullMethodName    = "/pb.Users/GetAverageUserEvaluationsByType"
	Users_UploadUserAvatar_FullMethodName                   = "/pb.Users/UploadUserAvatar"
	Users_GetUserPosts_FullMethodName                       = "/pb.Users/GetUserPosts"
	Users_GetUserModules_FullMethodName                     = "/pb.Users/GetUserModules"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	// ============= USER ROLES =================
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*ViewUser, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateUserIntroduction(ctx context.Context, in *UpdateUserIntroductionRequest, opts ...grpc.CallOption) (*Post, error)
	CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error)
	UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error)
	GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error)
	GetUserModules(ctx context.Context, in *GetUserModulesRequest, opts ...grpc.CallOption) (*GetUserModulesResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Users_GetUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error) {
	out := new(AddRoleToUserResponse)
	err := c.cc.Invoke(ctx, Users_AddRoleToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error) {
	out := new(RemoveRoleFromUserResponse)
	err := c.cc.Invoke(ctx, Users_RemoveRoleFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, Users_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*ViewUser, error) {
	out := new(ViewUser)
	err := c.cc.Invoke(ctx, Users_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Users_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Users_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUserIntroduction(ctx context.Context, in *UpdateUserIntroductionRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Users_UpdateUserIntroduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error) {
	out := new(CreateOrUpdateEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Users_CreateOrUpdateEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error) {
	out := new(GetEvaluationVotesByUserIdResponse)
	err := c.cc.Invoke(ctx, Users_GetEvaluationVotesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	out := new(GetEvaluationVotesByUserIdAndVoterResponse)
	err := c.cc.Invoke(ctx, Users_GetEvaluationVotesByUserIdAndVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error) {
	out := new(DeleteEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Users_DeleteEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error) {
	out := new(GetAverageUserEvaluationsByTypeResponse)
	err := c.cc.Invoke(ctx, Users_GetAverageUserEvaluationsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error) {
	out := new(UploadUserAvatarResponse)
	err := c.cc.Invoke(ctx, Users_UploadUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error) {
	out := new(GetUserPostsResponse)
	err := c.cc.Invoke(ctx, Users_GetUserPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserModules(ctx context.Context, in *GetUserModulesRequest, opts ...grpc.CallOption) (*GetUserModulesResponse, error) {
	out := new(GetUserModulesResponse)
	err := c.cc.Invoke(ctx, Users_GetUserModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	// ============= USER ROLES =================
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*ViewUser, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateUserIntroduction(context.Context, *UpdateUserIntroductionRequest) (*Post, error)
	CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error)
	UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error)
	GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error)
	GetUserModules(context.Context, *GetUserModulesRequest) (*GetUserModulesResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedUsersServer) AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToUser not implemented")
}
func (UnimplementedUsersServer) RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedUsersServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServer) GetUserById(context.Context, *GetUserByIdRequest) (*ViewUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUsersServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServer) UpdateUserIntroduction(context.Context, *UpdateUserIntroductionRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIntroduction not implemented")
}
func (UnimplementedUsersServer) CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateEvaluationVote not implemented")
}
func (UnimplementedUsersServer) GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserId not implemented")
}
func (UnimplementedUsersServer) GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserIdAndVoter not implemented")
}
func (UnimplementedUsersServer) DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluationVote not implemented")
}
func (UnimplementedUsersServer) GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageUserEvaluationsByType not implemented")
}
func (UnimplementedUsersServer) UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedUsersServer) GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPosts not implemented")
}
func (UnimplementedUsersServer) GetUserModules(context.Context, *GetUserModulesRequest) (*GetUserModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModules not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_AddRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).AddRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_AddRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).AddRoleToUser(ctx, req.(*AddRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUserIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIntroductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUserIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateUserIntroduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUserIntroduction(ctx, req.(*UpdateUserIntroductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateOrUpdateEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateOrUpdateEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateOrUpdateEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateOrUpdateEvaluationVote(ctx, req.(*CreateOrUpdateEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetEvaluationVotesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetEvaluationVotesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetEvaluationVotesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetEvaluationVotesByUserId(ctx, req.(*GetEvaluationVotesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetEvaluationVotesByUserIdAndVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdAndVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetEvaluationVotesByUserIdAndVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetEvaluationVotesByUserIdAndVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetEvaluationVotesByUserIdAndVoter(ctx, req.(*GetEvaluationVotesByUserIdAndVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteEvaluationVote(ctx, req.(*DeleteEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAverageUserEvaluationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageUserEvaluationsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAverageUserEvaluationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetAverageUserEvaluationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAverageUserEvaluationsByType(ctx, req.(*GetAverageUserEvaluationsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UploadUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UploadUserAvatar(ctx, req.(*UploadUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserPosts(ctx, req.(*GetUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserModules(ctx, req.(*GetUserModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRoles",
			Handler:    _Users_GetUserRoles_Handler,
		},
		{
			MethodName: "AddRoleToUser",
			Handler:    _Users_AddRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _Users_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Users_GetUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Users_GetUserById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserIntroduction",
			Handler:    _Users_UpdateUserIntroduction_Handler,
		},
		{
			MethodName: "CreateOrUpdateEvaluationVote",
			Handler:    _Users_CreateOrUpdateEvaluationVote_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserId",
			Handler:    _Users_GetEvaluationVotesByUserId_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserIdAndVoter",
			Handler:    _Users_GetEvaluationVotesByUserIdAndVoter_Handler,
		},
		{
			MethodName: "DeleteEvaluationVote",
			Handler:    _Users_DeleteEvaluationVote_Handler,
		},
		{
			MethodName: "GetAverageUserEvaluationsByType",
			Handler:    _Users_GetAverageUserEvaluationsByType_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _Users_UploadUserAvatar_Handler,
		},
		{
			MethodName: "GetUserPosts",
			Handler:    _Users_GetUserPosts_Handler,
		},
		{
			MethodName: "GetUserModules",
			Handler:    _Users_GetUserModules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/users/service_users.proto",
}
