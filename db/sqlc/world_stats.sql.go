// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: world_stats.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createWorldStats = `-- name: CreateWorldStats :exec
INSERT INTO world_stats ( world_id ) VALUES ( $1 )
`

func (q *Queries) CreateWorldStats(ctx context.Context, worldID int32) error {
	_, err := q.db.ExecContext(ctx, createWorldStats, worldID)
	return err
}

const deleteWorldStats = `-- name: DeleteWorldStats :exec
DELETE FROM world_stats
WHERE world_id = $1
`

func (q *Queries) DeleteWorldStats(ctx context.Context, worldID int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorldStats, worldID)
	return err
}

const deleteWorldStatsHistory = `-- name: DeleteWorldStatsHistory :exec
DELETE FROM world_stats_history WHERE world_id = $1
`

func (q *Queries) DeleteWorldStatsHistory(ctx context.Context, worldID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteWorldStatsHistory, worldID)
	return err
}

const getWorldStats = `-- name: GetWorldStats :one
SELECT world_id, final_content_rating, final_activity FROM world_stats WHERE world_id = $1 LIMIT 1
`

func (q *Queries) GetWorldStats(ctx context.Context, worldID int32) (WorldStat, error) {
	row := q.db.QueryRowContext(ctx, getWorldStats, worldID)
	var i WorldStat
	err := row.Scan(&i.WorldID, &i.FinalContentRating, &i.FinalActivity)
	return i, err
}

const getWorldStatsHistory = `-- name: GetWorldStatsHistory :many
SELECT world_id, final_content_rating, final_activity, created_at FROM world_stats_history
WHERE created_at >= $1
ORDER BY created_at DESC
`

func (q *Queries) GetWorldStatsHistory(ctx context.Context, startDate time.Time) ([]WorldStatsHistory, error) {
	rows, err := q.db.QueryContext(ctx, getWorldStatsHistory, startDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorldStatsHistory{}
	for rows.Next() {
		var i WorldStatsHistory
		if err := rows.Scan(
			&i.WorldID,
			&i.FinalContentRating,
			&i.FinalActivity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWorldStatsHistory = `-- name: InsertWorldStatsHistory :one
INSERT INTO world_stats_history
(
    world_id,
    final_content_rating,
    final_activity
)
VALUES
    ($1, $2, $3)
RETURNING world_id, final_content_rating, final_activity, created_at
`

type InsertWorldStatsHistoryParams struct {
	WorldID            sql.NullInt32 `json:"world_id"`
	FinalContentRating int32         `json:"final_content_rating"`
	FinalActivity      int32         `json:"final_activity"`
}

func (q *Queries) InsertWorldStatsHistory(ctx context.Context, arg InsertWorldStatsHistoryParams) (WorldStatsHistory, error) {
	row := q.db.QueryRowContext(ctx, insertWorldStatsHistory, arg.WorldID, arg.FinalContentRating, arg.FinalActivity)
	var i WorldStatsHistory
	err := row.Scan(
		&i.WorldID,
		&i.FinalContentRating,
		&i.FinalActivity,
		&i.CreatedAt,
	)
	return i, err
}

const updateWorldStats = `-- name: UpdateWorldStats :one
UPDATE world_stats
SET
    final_content_rating = COALESCE($1, final_content_rating),
    final_activity = COALESCE($2, final_activity)
WHERE
        world_id = $3
RETURNING world_id, final_content_rating, final_activity
`

type UpdateWorldStatsParams struct {
	FinalContentRating int32 `json:"final_content_rating"`
	FinalActivity      int32 `json:"final_activity"`
	WorldID            int32 `json:"world_id"`
}

func (q *Queries) UpdateWorldStats(ctx context.Context, arg UpdateWorldStatsParams) (WorldStat, error) {
	row := q.db.QueryRowContext(ctx, updateWorldStats, arg.FinalContentRating, arg.FinalActivity, arg.WorldID)
	var i WorldStat
	err := row.Scan(&i.WorldID, &i.FinalContentRating, &i.FinalActivity)
	return i, err
}
