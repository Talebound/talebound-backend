// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/the-medo/talebound-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/the-medo/talebound-backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddChatMessage mocks base method.
func (m *MockStore) AddChatMessage(arg0 context.Context, arg1 db.AddChatMessageParams) (db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChatMessage indicates an expected call of AddChatMessage.
func (mr *MockStoreMockRecorder) AddChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMessage", reflect.TypeOf((*MockStore)(nil).AddChatMessage), arg0, arg1)
}

// AddUserPasswordReset mocks base method.
func (m *MockStore) AddUserPasswordReset(arg0 context.Context, arg1 db.AddUserPasswordResetParams) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserPasswordReset indicates an expected call of AddUserPasswordReset.
func (mr *MockStoreMockRecorder) AddUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPasswordReset", reflect.TypeOf((*MockStore)(nil).AddUserPasswordReset), arg0, arg1)
}

// AddUserRole mocks base method.
func (m *MockStore) AddUserRole(arg0 context.Context, arg1 db.AddUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockStoreMockRecorder) AddUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockStore)(nil).AddUserRole), arg0, arg1)
}

// CreateEvaluationVote mocks base method.
func (m *MockStore) CreateEvaluationVote(arg0 context.Context, arg1 db.CreateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationVote indicates an expected call of CreateEvaluationVote.
func (mr *MockStoreMockRecorder) CreateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationVote", reflect.TypeOf((*MockStore)(nil).CreateEvaluationVote), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteChatMessage mocks base method.
func (m *MockStore) DeleteChatMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatMessage indicates an expected call of DeleteChatMessage.
func (mr *MockStoreMockRecorder) DeleteChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessage", reflect.TypeOf((*MockStore)(nil).DeleteChatMessage), arg0, arg1)
}

// DeleteEvaluationVote mocks base method.
func (m *MockStore) DeleteEvaluationVote(arg0 context.Context, arg1 db.DeleteEvaluationVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluationVote indicates an expected call of DeleteEvaluationVote.
func (mr *MockStoreMockRecorder) DeleteEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationVote", reflect.TypeOf((*MockStore)(nil).DeleteEvaluationVote), arg0, arg1)
}

// DeleteUserPasswordReset mocks base method.
func (m *MockStore) DeleteUserPasswordReset(arg0 context.Context, arg1 db.DeleteUserPasswordResetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPasswordReset indicates an expected call of DeleteUserPasswordReset.
func (mr *MockStoreMockRecorder) DeleteUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPasswordReset", reflect.TypeOf((*MockStore)(nil).DeleteUserPasswordReset), arg0, arg1)
}

// GetAverageUserEvaluationsByType mocks base method.
func (m *MockStore) GetAverageUserEvaluationsByType(arg0 context.Context, arg1 db.GetAverageUserEvaluationsByTypeParams) ([]db.GetAverageUserEvaluationsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageUserEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAverageUserEvaluationsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageUserEvaluationsByType indicates an expected call of GetAverageUserEvaluationsByType.
func (mr *MockStoreMockRecorder) GetAverageUserEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageUserEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetAverageUserEvaluationsByType), arg0, arg1)
}

// GetChatMessage mocks base method.
func (m *MockStore) GetChatMessage(arg0 context.Context, arg1 int64) (db.GetChatMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessage", arg0, arg1)
	ret0, _ := ret[0].(db.GetChatMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessage indicates an expected call of GetChatMessage.
func (mr *MockStoreMockRecorder) GetChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessage", reflect.TypeOf((*MockStore)(nil).GetChatMessage), arg0, arg1)
}

// GetChatMessages mocks base method.
func (m *MockStore) GetChatMessages(arg0 context.Context, arg1 db.GetChatMessagesParams) ([]db.GetChatMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetChatMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockStoreMockRecorder) GetChatMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockStore)(nil).GetChatMessages), arg0, arg1)
}

// GetEvaluationById mocks base method.
func (m *MockStore) GetEvaluationById(arg0 context.Context, arg1 int32) (db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationById", arg0, arg1)
	ret0, _ := ret[0].(db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationById indicates an expected call of GetEvaluationById.
func (mr *MockStoreMockRecorder) GetEvaluationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationById", reflect.TypeOf((*MockStore)(nil).GetEvaluationById), arg0, arg1)
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVoteByEvaluationIdUserIdAndVoterParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter indicates an expected call of GetEvaluationVoteByEvaluationIdUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVoteByEvaluationIdUserIdAndVoter), arg0, arg1)
}

// GetEvaluationVotesByUserId mocks base method.
func (m *MockStore) GetEvaluationVotesByUserId(arg0 context.Context, arg1 int32) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserId indicates an expected call of GetEvaluationVotesByUserId.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserId", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserId), arg0, arg1)
}

// GetEvaluationVotesByUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVotesByUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVotesByUserIdAndVoterParams) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserIdAndVoter indicates an expected call of GetEvaluationVotesByUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserIdAndVoter), arg0, arg1)
}

// GetEvaluationsByType mocks base method.
func (m *MockStore) GetEvaluationsByType(arg0 context.Context, arg1 db.EvaluationType) ([]db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationsByType indicates an expected call of GetEvaluationsByType.
func (mr *MockStoreMockRecorder) GetEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetEvaluationsByType), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserPasswordReset mocks base method.
func (m *MockStore) GetUserPasswordReset(arg0 context.Context, arg1 string) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordReset indicates an expected call of GetUserPasswordReset.
func (mr *MockStoreMockRecorder) GetUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordReset", reflect.TypeOf((*MockStore)(nil).GetUserPasswordReset), arg0, arg1)
}

// GetUserRoles mocks base method.
func (m *MockStore) GetUserRoles(arg0 context.Context, arg1 int32) ([]db.GetUserRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStoreMockRecorder) GetUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStore)(nil).GetUserRoles), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// HasUserRole mocks base method.
func (m *MockStore) HasUserRole(arg0 context.Context, arg1 db.HasUserRoleParams) (db.HasUserRoleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.HasUserRoleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserRole indicates an expected call of HasUserRole.
func (mr *MockStoreMockRecorder) HasUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserRole", reflect.TypeOf((*MockStore)(nil).HasUserRole), arg0, arg1)
}

// RemoveUserRole mocks base method.
func (m *MockStore) RemoveUserRole(arg0 context.Context, arg1 db.RemoveUserRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRole indicates an expected call of RemoveUserRole.
func (mr *MockStoreMockRecorder) RemoveUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRole", reflect.TypeOf((*MockStore)(nil).RemoveUserRole), arg0, arg1)
}

// ResetPasswordRequestTx mocks base method.
func (m *MockStore) ResetPasswordRequestTx(arg0 context.Context, arg1 db.ResetPasswordRequestTxParams) (db.ResetPasswordRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordRequestTx indicates an expected call of ResetPasswordRequestTx.
func (mr *MockStoreMockRecorder) ResetPasswordRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordRequestTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordRequestTx), arg0, arg1)
}

// ResetPasswordVerifyTx mocks base method.
func (m *MockStore) ResetPasswordVerifyTx(arg0 context.Context, arg1 db.ResetPasswordVerifyTxParams) (db.ResetPasswordVerifyTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordVerifyTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordVerifyTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordVerifyTx indicates an expected call of ResetPasswordVerifyTx.
func (mr *MockStoreMockRecorder) ResetPasswordVerifyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordVerifyTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordVerifyTx), arg0, arg1)
}

// UpdateEvaluationVote mocks base method.
func (m *MockStore) UpdateEvaluationVote(arg0 context.Context, arg1 db.UpdateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationVote indicates an expected call of UpdateEvaluationVote.
func (mr *MockStoreMockRecorder) UpdateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationVote", reflect.TypeOf((*MockStore)(nil).UpdateEvaluationVote), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
