// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: world_stats.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createWorldActivity = `-- name: CreateWorldActivity :exec
INSERT INTO world_activity ( world_id, date, post_count, quest_count, resource_count ) VALUES ( $1, $2, 0, 0, 0 )
`

type CreateWorldActivityParams struct {
	WorldID int32     `json:"world_id"`
	Date    time.Time `json:"date"`
}

func (q *Queries) CreateWorldActivity(ctx context.Context, arg CreateWorldActivityParams) error {
	_, err := q.db.ExecContext(ctx, createWorldActivity, arg.WorldID, arg.Date)
	return err
}

const deleteAllWorldActivity = `-- name: DeleteAllWorldActivity :exec
DELETE FROM world_activity WHERE world_id = $1
`

func (q *Queries) DeleteAllWorldActivity(ctx context.Context, worldID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllWorldActivity, worldID)
	return err
}

const deleteWorldActivityForDate = `-- name: DeleteWorldActivityForDate :exec
DELETE FROM world_activity WHERE world_id = $1 AND date = $2
`

type DeleteWorldActivityForDateParams struct {
	WorldID int32     `json:"world_id"`
	Date    time.Time `json:"date"`
}

func (q *Queries) DeleteWorldActivityForDate(ctx context.Context, arg DeleteWorldActivityForDateParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorldActivityForDate, arg.WorldID, arg.Date)
	return err
}

const getWorldDailyActivity = `-- name: GetWorldDailyActivity :many
SELECT
    world_id, date, post_count, quest_count, resource_count
FROM
    world_activity
WHERE
    world_id = COALESCE($1, world_id) AND
    date >= $2
ORDER BY date DESC
`

type GetWorldDailyActivityParams struct {
	WorldID  sql.NullInt32 `json:"world_id"`
	DateFrom time.Time     `json:"date_from"`
}

func (q *Queries) GetWorldDailyActivity(ctx context.Context, arg GetWorldDailyActivityParams) ([]WorldActivity, error) {
	rows, err := q.db.QueryContext(ctx, getWorldDailyActivity, arg.WorldID, arg.DateFrom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorldActivity{}
	for rows.Next() {
		var i WorldActivity
		if err := rows.Scan(
			&i.WorldID,
			&i.Date,
			&i.PostCount,
			&i.QuestCount,
			&i.ResourceCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldMonthlyActivity = `-- name: GetWorldMonthlyActivity :many
SELECT
    cast(date_trunc('month', date) as date) AS month,
    world_id,
    cast(SUM(post_count) as integer) AS post_count,
    cast(SUM(quest_count) as integer) AS quest_count,
    cast(SUM(resource_count) as integer) AS resource_count
FROM
    world_activity
WHERE
    world_id = COALESCE($1, world_id) AND
    date >= $2
GROUP BY
    month, world_id
ORDER BY
    month DESC
`

type GetWorldMonthlyActivityParams struct {
	WorldID  sql.NullInt32 `json:"world_id"`
	DateFrom time.Time     `json:"date_from"`
}

type GetWorldMonthlyActivityRow struct {
	Month         time.Time `json:"month"`
	WorldID       int32     `json:"world_id"`
	PostCount     int32     `json:"post_count"`
	QuestCount    int32     `json:"quest_count"`
	ResourceCount int32     `json:"resource_count"`
}

func (q *Queries) GetWorldMonthlyActivity(ctx context.Context, arg GetWorldMonthlyActivityParams) ([]GetWorldMonthlyActivityRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorldMonthlyActivity, arg.WorldID, arg.DateFrom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorldMonthlyActivityRow{}
	for rows.Next() {
		var i GetWorldMonthlyActivityRow
		if err := rows.Scan(
			&i.Month,
			&i.WorldID,
			&i.PostCount,
			&i.QuestCount,
			&i.ResourceCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorldActivity = `-- name: UpdateWorldActivity :one
UPDATE world_activity
SET
    post_count = COALESCE($1, post_count),
    quest_count = COALESCE($2, quest_count),
    resource_count = COALESCE($3, resource_count)
WHERE
    world_id = $4 AND
    date = $5
RETURNING world_id, date, post_count, quest_count, resource_count
`

type UpdateWorldActivityParams struct {
	PostCount     sql.NullInt32 `json:"post_count"`
	QuestCount    sql.NullInt32 `json:"quest_count"`
	ResourceCount sql.NullInt32 `json:"resource_count"`
	WorldID       int32         `json:"world_id"`
	Date          time.Time     `json:"date"`
}

func (q *Queries) UpdateWorldActivity(ctx context.Context, arg UpdateWorldActivityParams) (WorldActivity, error) {
	row := q.db.QueryRowContext(ctx, updateWorldActivity,
		arg.PostCount,
		arg.QuestCount,
		arg.ResourceCount,
		arg.WorldID,
		arg.Date,
	)
	var i WorldActivity
	err := row.Scan(
		&i.WorldID,
		&i.Date,
		&i.PostCount,
		&i.QuestCount,
		&i.ResourceCount,
	)
	return i, err
}
