// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: map.sql

package db

import (
	"context"
	"database/sql"
)

const createMap = `-- name: CreateMap :one
INSERT INTO maps (name, type, description, width, height, thumbnail_image_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, type, description, width, height, thumbnail_image_id
`

type CreateMapParams struct {
	Name             string         `json:"name"`
	Type             sql.NullString `json:"type"`
	Description      sql.NullString `json:"description"`
	Width            int32          `json:"width"`
	Height           int32          `json:"height"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
}

func (q *Queries) CreateMap(ctx context.Context, arg CreateMapParams) (Map, error) {
	row := q.db.QueryRowContext(ctx, createMap,
		arg.Name,
		arg.Type,
		arg.Description,
		arg.Width,
		arg.Height,
		arg.ThumbnailImageID,
	)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
	)
	return i, err
}

const createMapLayer = `-- name: CreateMapLayer :one
INSERT INTO map_layers (name, map_id, image_id, is_main, enabled, sublayer)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, map_id, image_id, is_main, enabled, sublayer
`

type CreateMapLayerParams struct {
	Name     string `json:"name"`
	MapID    int32  `json:"map_id"`
	ImageID  int32  `json:"image_id"`
	IsMain   bool   `json:"is_main"`
	Enabled  bool   `json:"enabled"`
	Sublayer bool   `json:"sublayer"`
}

func (q *Queries) CreateMapLayer(ctx context.Context, arg CreateMapLayerParams) (MapLayer, error) {
	row := q.db.QueryRowContext(ctx, createMapLayer,
		arg.Name,
		arg.MapID,
		arg.ImageID,
		arg.IsMain,
		arg.Enabled,
		arg.Sublayer,
	)
	var i MapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.IsMain,
		&i.Enabled,
		&i.Sublayer,
	)
	return i, err
}

const createMapPin = `-- name: CreateMapPin :one
INSERT INTO map_pins (name, map_id, map_pin_type_id, location_id, map_layer_id, x, y)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y
`

type CreateMapPinParams struct {
	Name         string        `json:"name"`
	MapID        int32         `json:"map_id"`
	MapPinTypeID sql.NullInt32 `json:"map_pin_type_id"`
	LocationID   sql.NullInt32 `json:"location_id"`
	MapLayerID   sql.NullInt32 `json:"map_layer_id"`
	X            int32         `json:"x"`
	Y            int32         `json:"y"`
}

func (q *Queries) CreateMapPin(ctx context.Context, arg CreateMapPinParams) (MapPin, error) {
	row := q.db.QueryRowContext(ctx, createMapPin,
		arg.Name,
		arg.MapID,
		arg.MapPinTypeID,
		arg.LocationID,
		arg.MapLayerID,
		arg.X,
		arg.Y,
	)
	var i MapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
	)
	return i, err
}

const createMapPinType = `-- name: CreateMapPinType :one

INSERT INTO map_pin_types (map_id, shape, background_color, border_color, icon_color, icon, icon_size, width)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, map_id, shape, background_color, border_color, icon_color, icon, icon_size, width
`

type CreateMapPinTypeParams struct {
	MapID           int32          `json:"map_id"`
	Shape           PinShape       `json:"shape"`
	BackgroundColor sql.NullString `json:"background_color"`
	BorderColor     sql.NullString `json:"border_color"`
	IconColor       sql.NullString `json:"icon_color"`
	Icon            sql.NullString `json:"icon"`
	IconSize        sql.NullInt32  `json:"icon_size"`
	Width           sql.NullInt32  `json:"width"`
}

// ------------------------------------
func (q *Queries) CreateMapPinType(ctx context.Context, arg CreateMapPinTypeParams) (MapPinType, error) {
	row := q.db.QueryRowContext(ctx, createMapPinType,
		arg.MapID,
		arg.Shape,
		arg.BackgroundColor,
		arg.BorderColor,
		arg.IconColor,
		arg.Icon,
		arg.IconSize,
		arg.Width,
	)
	var i MapPinType
	err := row.Scan(
		&i.ID,
		&i.MapID,
		&i.Shape,
		&i.BackgroundColor,
		&i.BorderColor,
		&i.IconColor,
		&i.Icon,
		&i.IconSize,
		&i.Width,
	)
	return i, err
}

const createWorldMap = `-- name: CreateWorldMap :one
INSERT INTO world_maps (world_id, map_id)
VALUES ($1, $2)
RETURNING world_id, map_id
`

type CreateWorldMapParams struct {
	WorldID int32 `json:"world_id"`
	MapID   int32 `json:"map_id"`
}

func (q *Queries) CreateWorldMap(ctx context.Context, arg CreateWorldMapParams) (WorldMap, error) {
	row := q.db.QueryRowContext(ctx, createWorldMap, arg.WorldID, arg.MapID)
	var i WorldMap
	err := row.Scan(&i.WorldID, &i.MapID)
	return i, err
}

const deleteMap = `-- name: DeleteMap :exec
DELETE FROM maps WHERE id = $1
`

func (q *Queries) DeleteMap(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMap, id)
	return err
}

const deleteMapLayer = `-- name: DeleteMapLayer :exec
DELETE FROM map_layers WHERE id = $1
`

func (q *Queries) DeleteMapLayer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapLayer, id)
	return err
}

const deleteMapLayersForMap = `-- name: DeleteMapLayersForMap :exec
DELETE FROM map_layers WHERE map_id = $1
`

func (q *Queries) DeleteMapLayersForMap(ctx context.Context, mapID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapLayersForMap, mapID)
	return err
}

const deleteMapPin = `-- name: DeleteMapPin :exec
DELETE FROM map_pins WHERE id = $1
`

func (q *Queries) DeleteMapPin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPin, id)
	return err
}

const deleteMapPinType = `-- name: DeleteMapPinType :exec
DELETE FROM map_pin_types WHERE id = $1
`

func (q *Queries) DeleteMapPinType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinType, id)
	return err
}

const deleteMapPinsForMap = `-- name: DeleteMapPinsForMap :exec
DELETE FROM map_pins WHERE map_id = $1
`

func (q *Queries) DeleteMapPinsForMap(ctx context.Context, mapID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinsForMap, mapID)
	return err
}

const deleteMapPinsForMapLayer = `-- name: DeleteMapPinsForMapLayer :exec
DELETE FROM map_pins WHERE map_layer_id = $1
`

func (q *Queries) DeleteMapPinsForMapLayer(ctx context.Context, mapLayerID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinsForMapLayer, mapLayerID)
	return err
}

const deleteWorldMap = `-- name: DeleteWorldMap :exec
DELETE FROM world_maps
WHERE world_id = $1 AND map_id = $2
`

type DeleteWorldMapParams struct {
	WorldID int32 `json:"world_id"`
	MapID   int32 `json:"map_id"`
}

func (q *Queries) DeleteWorldMap(ctx context.Context, arg DeleteWorldMapParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorldMap, arg.WorldID, arg.MapID)
	return err
}

const getMapAssignments = `-- name: GetMapAssignments :one
SELECT
    CAST(MAX(COALESCE(wl.world_id, 0)) as integer) AS world_id,
    0 AS quest_id
FROM
    maps m
    LEFT JOIN world_maps wm ON m.id = wm.location_id
WHERE m.id = $1
GROUP BY m.id
`

type GetMapAssignmentsRow struct {
	WorldID int32       `json:"world_id"`
	QuestID interface{} `json:"quest_id"`
}

func (q *Queries) GetMapAssignments(ctx context.Context, mapID int32) (GetMapAssignmentsRow, error) {
	row := q.db.QueryRowContext(ctx, getMapAssignments, mapID)
	var i GetMapAssignmentsRow
	err := row.Scan(&i.WorldID, &i.QuestID)
	return i, err
}

const getMapByID = `-- name: GetMapByID :one
SELECT id, name, type, description, width, height, thumbnail_image_id, thumbnail_image_url FROM view_maps WHERE id = $1
`

func (q *Queries) GetMapByID(ctx context.Context, id int32) (ViewMap, error) {
	row := q.db.QueryRowContext(ctx, getMapByID, id)
	var i ViewMap
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
		&i.ThumbnailImageUrl,
	)
	return i, err
}

const getMapLayerByID = `-- name: GetMapLayerByID :one
SELECT id, name, map_id, image_id, is_main, enabled, sublayer, image_url FROM view_map_layers WHERE id = $1
`

func (q *Queries) GetMapLayerByID(ctx context.Context, mapLayerID int32) (ViewMapLayer, error) {
	row := q.db.QueryRowContext(ctx, getMapLayerByID, mapLayerID)
	var i ViewMapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.IsMain,
		&i.Enabled,
		&i.Sublayer,
		&i.ImageUrl,
	)
	return i, err
}

const getMapLayers = `-- name: GetMapLayers :many
SELECT id, name, map_id, image_id, is_main, enabled, sublayer, image_url FROM view_map_layers WHERE map_id = $1
`

func (q *Queries) GetMapLayers(ctx context.Context, mapID int32) ([]ViewMapLayer, error) {
	rows, err := q.db.QueryContext(ctx, getMapLayers, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMapLayer{}
	for rows.Next() {
		var i ViewMapLayer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MapID,
			&i.ImageID,
			&i.IsMain,
			&i.Enabled,
			&i.Sublayer,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPinByID = `-- name: GetMapPinByID :one
SELECT id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y, location_name, location_post_id, location_description, location_thumbnail_image_id, location_thumbnail_image_url FROM view_map_pins WHERE id = $1
`

func (q *Queries) GetMapPinByID(ctx context.Context, id int32) (ViewMapPin, error) {
	row := q.db.QueryRowContext(ctx, getMapPinByID, id)
	var i ViewMapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
		&i.LocationName,
		&i.LocationPostID,
		&i.LocationDescription,
		&i.LocationThumbnailImageID,
		&i.LocationThumbnailImageUrl,
	)
	return i, err
}

const getMapPinTypesForMap = `-- name: GetMapPinTypesForMap :many
SELECT id, map_id, shape, background_color, border_color, icon_color, icon, icon_size, width FROM map_pin_types WHERE map_id = $1
`

func (q *Queries) GetMapPinTypesForMap(ctx context.Context, mapID int32) ([]MapPinType, error) {
	rows, err := q.db.QueryContext(ctx, getMapPinTypesForMap, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MapPinType{}
	for rows.Next() {
		var i MapPinType
		if err := rows.Scan(
			&i.ID,
			&i.MapID,
			&i.Shape,
			&i.BackgroundColor,
			&i.BorderColor,
			&i.IconColor,
			&i.Icon,
			&i.IconSize,
			&i.Width,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPins = `-- name: GetMapPins :many
SELECT id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y, location_name, location_post_id, location_description, location_thumbnail_image_id, location_thumbnail_image_url FROM view_map_pins WHERE map_id = $1
`

func (q *Queries) GetMapPins(ctx context.Context, mapID int32) ([]ViewMapPin, error) {
	rows, err := q.db.QueryContext(ctx, getMapPins, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMapPin{}
	for rows.Next() {
		var i ViewMapPin
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MapID,
			&i.MapPinTypeID,
			&i.LocationID,
			&i.MapLayerID,
			&i.X,
			&i.Y,
			&i.LocationName,
			&i.LocationPostID,
			&i.LocationDescription,
			&i.LocationThumbnailImageID,
			&i.LocationThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldMaps = `-- name: GetWorldMaps :many
SELECT
    vm.id, vm.name, vm.type, vm.description, vm.width, vm.height, vm.thumbnail_image_id, vm.thumbnail_image_url
FROM
    view_maps vm
    JOIN world_maps wm ON wm.map_id = vm.id
WHERE
    wm.world_id = $1
`

func (q *Queries) GetWorldMaps(ctx context.Context, worldID int32) ([]ViewMap, error) {
	rows, err := q.db.QueryContext(ctx, getWorldMaps, worldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMap{}
	for rows.Next() {
		var i ViewMap
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.Width,
			&i.Height,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMap = `-- name: UpdateMap :one
UPDATE maps
SET
    name = COALESCE($1, name),
    type = COALESCE($2, type),
    description = COALESCE($3, description),
    width = COALESCE($4, width),
    height = COALESCE($5, height),
    thumbnail_image_id = COALESCE($6, thumbnail_image_id)
WHERE id = $7
RETURNING id, name, type, description, width, height, thumbnail_image_id
`

type UpdateMapParams struct {
	Name             sql.NullString `json:"name"`
	Type             sql.NullString `json:"type"`
	Description      sql.NullString `json:"description"`
	Width            sql.NullInt32  `json:"width"`
	Height           sql.NullInt32  `json:"height"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateMap(ctx context.Context, arg UpdateMapParams) (Map, error) {
	row := q.db.QueryRowContext(ctx, updateMap,
		arg.Name,
		arg.Type,
		arg.Description,
		arg.Width,
		arg.Height,
		arg.ThumbnailImageID,
		arg.ID,
	)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
	)
	return i, err
}

const updateMapLayer = `-- name: UpdateMapLayer :one
UPDATE map_layers
SET
    name = COALESCE($1, name),
    image_id = COALESCE($2, image_id),
    enabled = COALESCE($3, enabled),
    sublayer = COALESCE($4, sublayer)
WHERE id = $5
RETURNING id, name, map_id, image_id, is_main, enabled, sublayer
`

type UpdateMapLayerParams struct {
	Name     sql.NullString `json:"name"`
	ImageID  sql.NullInt32  `json:"image_id"`
	Enabled  sql.NullBool   `json:"enabled"`
	Sublayer sql.NullBool   `json:"sublayer"`
	ID       int32          `json:"id"`
}

func (q *Queries) UpdateMapLayer(ctx context.Context, arg UpdateMapLayerParams) (MapLayer, error) {
	row := q.db.QueryRowContext(ctx, updateMapLayer,
		arg.Name,
		arg.ImageID,
		arg.Enabled,
		arg.Sublayer,
		arg.ID,
	)
	var i MapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.IsMain,
		&i.Enabled,
		&i.Sublayer,
	)
	return i, err
}

const updateMapLayerIsMain = `-- name: UpdateMapLayerIsMain :exec
CALL update_map_layer_is_main($1)
`

func (q *Queries) UpdateMapLayerIsMain(ctx context.Context, mapLayerID int32) error {
	_, err := q.db.ExecContext(ctx, updateMapLayerIsMain, mapLayerID)
	return err
}

const updateMapPin = `-- name: UpdateMapPin :one
UPDATE map_pins
SET
    name = COALESCE($1, name),
    map_pin_type_id = COALESCE($2, map_pin_type_id),
    location_id = COALESCE($3, location_id),
    map_layer_id = COALESCE($4, map_layer_id),
    x = COALESCE($5, x),
    y = COALESCE($6, y)
WHERE id = $7
RETURNING id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y
`

type UpdateMapPinParams struct {
	Name         sql.NullString `json:"name"`
	MapPinTypeID sql.NullInt32  `json:"map_pin_type_id"`
	LocationID   sql.NullInt32  `json:"location_id"`
	MapLayerID   sql.NullInt32  `json:"map_layer_id"`
	X            sql.NullInt32  `json:"x"`
	Y            sql.NullInt32  `json:"y"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateMapPin(ctx context.Context, arg UpdateMapPinParams) (MapPin, error) {
	row := q.db.QueryRowContext(ctx, updateMapPin,
		arg.Name,
		arg.MapPinTypeID,
		arg.LocationID,
		arg.MapLayerID,
		arg.X,
		arg.Y,
		arg.ID,
	)
	var i MapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
	)
	return i, err
}

const updateMapPinType = `-- name: UpdateMapPinType :one
UPDATE map_pin_types
SET
    shape = COALESCE($1, shape),
    background_color = COALESCE($2, background_color),
    border_color = COALESCE($3, border_color),
    icon_color = COALESCE($4, icon_color),
    icon = COALESCE($5, icon),
    icon_size = COALESCE($6, icon_size),
    width = COALESCE($7, width)
WHERE id = $8
RETURNING id, map_id, shape, background_color, border_color, icon_color, icon, icon_size, width
`

type UpdateMapPinTypeParams struct {
	Shape           NullPinShape   `json:"shape"`
	BackgroundColor sql.NullString `json:"background_color"`
	BorderColor     sql.NullString `json:"border_color"`
	IconColor       sql.NullString `json:"icon_color"`
	Icon            sql.NullString `json:"icon"`
	IconSize        sql.NullInt32  `json:"icon_size"`
	Width           sql.NullInt32  `json:"width"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateMapPinType(ctx context.Context, arg UpdateMapPinTypeParams) (MapPinType, error) {
	row := q.db.QueryRowContext(ctx, updateMapPinType,
		arg.Shape,
		arg.BackgroundColor,
		arg.BorderColor,
		arg.IconColor,
		arg.Icon,
		arg.IconSize,
		arg.Width,
		arg.ID,
	)
	var i MapPinType
	err := row.Scan(
		&i.ID,
		&i.MapID,
		&i.Shape,
		&i.BackgroundColor,
		&i.BorderColor,
		&i.IconColor,
		&i.Icon,
		&i.IconSize,
		&i.Width,
	)
	return i, err
}
