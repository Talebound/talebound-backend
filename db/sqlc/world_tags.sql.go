// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: world_tags.sql

package db

import (
	"context"
	"database/sql"
)

const createWorldTag = `-- name: CreateWorldTag :one
INSERT INTO world_tags (world_id, tag_id)
VALUES ($1, $2)
RETURNING world_id, tag_id
`

type CreateWorldTagParams struct {
	WorldID int32 `json:"world_id"`
	TagID   int32 `json:"tag_id"`
}

func (q *Queries) CreateWorldTag(ctx context.Context, arg CreateWorldTagParams) (WorldTag, error) {
	row := q.db.QueryRowContext(ctx, createWorldTag, arg.WorldID, arg.TagID)
	var i WorldTag
	err := row.Scan(&i.WorldID, &i.TagID)
	return i, err
}

const createWorldTagAvailable = `-- name: CreateWorldTagAvailable :one
INSERT INTO world_tags_available (tag)
VALUES ($1)
RETURNING id, tag
`

func (q *Queries) CreateWorldTagAvailable(ctx context.Context, tag string) (WorldTagsAvailable, error) {
	row := q.db.QueryRowContext(ctx, createWorldTagAvailable, tag)
	var i WorldTagsAvailable
	err := row.Scan(&i.ID, &i.Tag)
	return i, err
}

const deleteWorldTag = `-- name: DeleteWorldTag :exec
DELETE FROM world_tags
WHERE
    world_id = COALESCE($1, world_id) AND
    tag_id = COALESCE($2, tag_id) AND
    (NOT ($1 IS NULL AND $2 IS NULL))
`

type DeleteWorldTagParams struct {
	WorldID sql.NullInt32 `json:"world_id"`
	TagID   sql.NullInt32 `json:"tag_id"`
}

func (q *Queries) DeleteWorldTag(ctx context.Context, arg DeleteWorldTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorldTag, arg.WorldID, arg.TagID)
	return err
}

const deleteWorldTagAvailable = `-- name: DeleteWorldTagAvailable :exec
DELETE FROM world_tags_available WHERE id = $1
`

func (q *Queries) DeleteWorldTagAvailable(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorldTagAvailable, id)
	return err
}

const getWorldTag = `-- name: GetWorldTag :one
SELECT world_id, tag_id FROM world_tags WHERE world_id = $1 AND tag_id = $2
`

type GetWorldTagParams struct {
	WorldID int32 `json:"world_id"`
	TagID   int32 `json:"tag_id"`
}

func (q *Queries) GetWorldTag(ctx context.Context, arg GetWorldTagParams) (WorldTag, error) {
	row := q.db.QueryRowContext(ctx, getWorldTag, arg.WorldID, arg.TagID)
	var i WorldTag
	err := row.Scan(&i.WorldID, &i.TagID)
	return i, err
}

const getWorldTagAvailable = `-- name: GetWorldTagAvailable :one
SELECT id, tag FROM world_tags_available WHERE id = $1
`

func (q *Queries) GetWorldTagAvailable(ctx context.Context, tagID int32) (WorldTagsAvailable, error) {
	row := q.db.QueryRowContext(ctx, getWorldTagAvailable, tagID)
	var i WorldTagsAvailable
	err := row.Scan(&i.ID, &i.Tag)
	return i, err
}

const getWorldTags = `-- name: GetWorldTags :many
SELECT world_id, tag_id FROM world_tags
`

func (q *Queries) GetWorldTags(ctx context.Context) ([]WorldTag, error) {
	rows, err := q.db.QueryContext(ctx, getWorldTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorldTag{}
	for rows.Next() {
		var i WorldTag
		if err := rows.Scan(&i.WorldID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldTagsAvailable = `-- name: GetWorldTagsAvailable :many
SELECT id, tag FROM world_tags_available
`

func (q *Queries) GetWorldTagsAvailable(ctx context.Context) ([]WorldTagsAvailable, error) {
	rows, err := q.db.QueryContext(ctx, getWorldTagsAvailable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorldTagsAvailable{}
	for rows.Next() {
		var i WorldTagsAvailable
		if err := rows.Scan(&i.ID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorldTagAvailable = `-- name: UpdateWorldTagAvailable :one
UPDATE world_tags_available
SET tag = $1
WHERE id = $2
RETURNING id, tag
`

type UpdateWorldTagAvailableParams struct {
	Tag string `json:"tag"`
	ID  int32  `json:"id"`
}

func (q *Queries) UpdateWorldTagAvailable(ctx context.Context, arg UpdateWorldTagAvailableParams) (WorldTagsAvailable, error) {
	row := q.db.QueryRowContext(ctx, updateWorldTagAvailable, arg.Tag, arg.ID)
	var i WorldTagsAvailable
	err := row.Scan(&i.ID, &i.Tag)
	return i, err
}
