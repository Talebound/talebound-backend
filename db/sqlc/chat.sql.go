// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: chat.sql

package db

import (
	"context"
	"database/sql"
)

const addChatPost = `-- name: AddChatPost :one
INSERT INTO chat
(
    user_id,
    text
)
VALUES ($1, $2)
RETURNING id, user_id, text, created_at
`

type AddChatPostParams struct {
	UserID int32  `json:"user_id"`
	Text   string `json:"text"`
}

func (q *Queries) AddChatPost(ctx context.Context, arg AddChatPostParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, addChatPost, arg.UserID, arg.Text)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChatPost = `-- name: DeleteChatPost :exec
DELETE FROM chat WHERE id = $1
`

func (q *Queries) DeleteChatPost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChatPost, id)
	return err
}

const getChatPost = `-- name: GetChatPost :one
SELECT
    c.id as chat_id,
    c.text as text,
    c.created_at as created_at,
    c.user_id as user_id,
    u.username as username
FROM
    chat c
    JOIN users u ON c.user_id = u.id
WHERE c.id = $1
`

type GetChatPostRow struct {
	ChatID    int64        `json:"chat_id"`
	Text      string       `json:"text"`
	CreatedAt sql.NullTime `json:"created_at"`
	UserID    int32        `json:"user_id"`
	Username  string       `json:"username"`
}

func (q *Queries) GetChatPost(ctx context.Context, id int64) (GetChatPostRow, error) {
	row := q.db.QueryRowContext(ctx, getChatPost, id)
	var i GetChatPostRow
	err := row.Scan(
		&i.ChatID,
		&i.Text,
		&i.CreatedAt,
		&i.UserID,
		&i.Username,
	)
	return i, err
}

const getChatPosts = `-- name: GetChatPosts :many
SELECT
    c.id as chat_id,
    c.text as text,
    c.created_at as created_at,
    c.user_id as user_id,
    u.username as username
FROM
    chat c
    JOIN users u ON c.user_id = u.id
ORDER BY c.id DESC
LIMIT $2
OFFSET $1
`

type GetChatPostsParams struct {
	PageOffset int32 `json:"page_offset"`
	PageLimit  int32 `json:"page_limit"`
}

type GetChatPostsRow struct {
	ChatID    int64        `json:"chat_id"`
	Text      string       `json:"text"`
	CreatedAt sql.NullTime `json:"created_at"`
	UserID    int32        `json:"user_id"`
	Username  string       `json:"username"`
}

func (q *Queries) GetChatPosts(ctx context.Context, arg GetChatPostsParams) ([]GetChatPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatPosts, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatPostsRow{}
	for rows.Next() {
		var i GetChatPostsRow
		if err := rows.Scan(
			&i.ChatID,
			&i.Text,
			&i.CreatedAt,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
