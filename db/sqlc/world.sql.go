// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: world.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createWorld = `-- name: CreateWorld :one
INSERT INTO worlds (
    name,
    based_on,
    description
) VALUES (
     $1, $2, $3
 ) RETURNING id, name, public, created_at, description, based_on
`

type CreateWorldParams struct {
	Name        string `json:"name"`
	BasedOn     string `json:"based_on"`
	Description string `json:"description"`
}

func (q *Queries) CreateWorld(ctx context.Context, arg CreateWorldParams) (World, error) {
	row := q.db.QueryRowContext(ctx, createWorld, arg.Name, arg.BasedOn, arg.Description)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.Description,
		&i.BasedOn,
	)
	return i, err
}

const deleteWorld = `-- name: DeleteWorld :exec
DELETE FROM worlds WHERE id = $1
`

func (q *Queries) DeleteWorld(ctx context.Context, worldID int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorld, worldID)
	return err
}

const getAdminsOfWorld = `-- name: GetAdminsOfWorld :many
SELECT
    vu.id, vu.username, vu.hashed_password, vu.email, vu.img_id, vu.password_changed_at, vu.created_at, vu.is_email_verified, vu.introduction_post_id, vu.avatar_image_id, vu.avatar_image_url, vu.avatar_image_guid, vu.introduction_post_deleted_at,
    wa.super_admin as super_admin
FROM
    view_users vu
    JOIN world_admins wa on wa.user_id = vu.id
WHERE
    wa.world_id = $1 AND
    wa.approved = 1
`

type GetAdminsOfWorldRow struct {
	ID                        int32          `json:"id"`
	Username                  string         `json:"username"`
	HashedPassword            string         `json:"hashed_password"`
	Email                     string         `json:"email"`
	ImgID                     sql.NullInt32  `json:"img_id"`
	PasswordChangedAt         time.Time      `json:"password_changed_at"`
	CreatedAt                 time.Time      `json:"created_at"`
	IsEmailVerified           bool           `json:"is_email_verified"`
	IntroductionPostID        sql.NullInt32  `json:"introduction_post_id"`
	AvatarImageID             sql.NullInt32  `json:"avatar_image_id"`
	AvatarImageUrl            sql.NullString `json:"avatar_image_url"`
	AvatarImageGuid           uuid.NullUUID  `json:"avatar_image_guid"`
	IntroductionPostDeletedAt sql.NullTime   `json:"introduction_post_deleted_at"`
	SuperAdmin                bool           `json:"super_admin"`
}

func (q *Queries) GetAdminsOfWorld(ctx context.Context, worldID int32) ([]GetAdminsOfWorldRow, error) {
	rows, err := q.db.QueryContext(ctx, getAdminsOfWorld, worldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAdminsOfWorldRow{}
	for rows.Next() {
		var i GetAdminsOfWorldRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.ImgID,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.IsEmailVerified,
			&i.IntroductionPostID,
			&i.AvatarImageID,
			&i.AvatarImageUrl,
			&i.AvatarImageGuid,
			&i.IntroductionPostDeletedAt,
			&i.SuperAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldByID = `-- name: GetWorldByID :one
SELECT id, name, public, created_at, description, based_on, image_header, image_thumbnail, image_avatar FROM view_worlds WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorldByID(ctx context.Context, worldID int32) (ViewWorld, error) {
	row := q.db.QueryRowContext(ctx, getWorldByID, worldID)
	var i ViewWorld
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.Description,
		&i.BasedOn,
		&i.ImageHeader,
		&i.ImageThumbnail,
		&i.ImageAvatar,
	)
	return i, err
}

const getWorlds = `-- name: GetWorlds :many
SELECT id, name, public, created_at, description, based_on, image_header, image_thumbnail, image_avatar FROM view_worlds
WHERE ($1::boolean IS NULL OR public = $1)
ORDER BY
    CASE
     WHEN $2::bool
         THEN $3::VARCHAR
     ELSE 'created_at'
     END
DESC
LIMIT $5
OFFSET $4
`

type GetWorldsParams struct {
	IsPublic    bool   `json:"is_public"`
	OrderResult bool   `json:"order_result"`
	OrderBy     string `json:"order_by"`
	PageOffset  int32  `json:"page_offset"`
	PageLimit   int32  `json:"page_limit"`
}

func (q *Queries) GetWorlds(ctx context.Context, arg GetWorldsParams) ([]ViewWorld, error) {
	rows, err := q.db.QueryContext(ctx, getWorlds,
		arg.IsPublic,
		arg.OrderResult,
		arg.OrderBy,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewWorld{}
	for rows.Next() {
		var i ViewWorld
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Public,
			&i.CreatedAt,
			&i.Description,
			&i.BasedOn,
			&i.ImageHeader,
			&i.ImageThumbnail,
			&i.ImageAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldsOfUser = `-- name: GetWorldsOfUser :many
SELECT
    vw.id, vw.name, vw.public, vw.created_at, vw.description, vw.based_on, vw.image_header, vw.image_thumbnail, vw.image_avatar,
    1 as world_admin,
    wa.super_admin as world_super_admin
FROM
    view_worlds vw
    JOIN world_admins wa ON wa.world_id = vw.id
WHERE
    wa.user_id = $1 AND wa.approved = 1
`

type GetWorldsOfUserRow struct {
	ID              int32          `json:"id"`
	Name            string         `json:"name"`
	Public          bool           `json:"public"`
	CreatedAt       time.Time      `json:"created_at"`
	Description     string         `json:"description"`
	BasedOn         string         `json:"based_on"`
	ImageHeader     sql.NullString `json:"image_header"`
	ImageThumbnail  sql.NullString `json:"image_thumbnail"`
	ImageAvatar     sql.NullString `json:"image_avatar"`
	WorldAdmin      interface{}    `json:"world_admin"`
	WorldSuperAdmin bool           `json:"world_super_admin"`
}

func (q *Queries) GetWorldsOfUser(ctx context.Context, userID int32) ([]GetWorldsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorldsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorldsOfUserRow{}
	for rows.Next() {
		var i GetWorldsOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Public,
			&i.CreatedAt,
			&i.Description,
			&i.BasedOn,
			&i.ImageHeader,
			&i.ImageThumbnail,
			&i.ImageAvatar,
			&i.WorldAdmin,
			&i.WorldSuperAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWorldAdmin = `-- name: InsertWorldAdmin :one
INSERT INTO world_admins (
    world_id,
    user_id,
    super_admin,
    approved,
    motivational_letter
) VALUES ($1, $2, $3, $4, $5) RETURNING world_id, user_id, created_at, super_admin, approved, motivational_letter
`

type InsertWorldAdminParams struct {
	WorldID            int32  `json:"world_id"`
	UserID             int32  `json:"user_id"`
	SuperAdmin         bool   `json:"super_admin"`
	Approved           int32  `json:"approved"`
	MotivationalLetter string `json:"motivational_letter"`
}

func (q *Queries) InsertWorldAdmin(ctx context.Context, arg InsertWorldAdminParams) (WorldAdmin, error) {
	row := q.db.QueryRowContext(ctx, insertWorldAdmin,
		arg.WorldID,
		arg.UserID,
		arg.SuperAdmin,
		arg.Approved,
		arg.MotivationalLetter,
	)
	var i WorldAdmin
	err := row.Scan(
		&i.WorldID,
		&i.UserID,
		&i.CreatedAt,
		&i.SuperAdmin,
		&i.Approved,
		&i.MotivationalLetter,
	)
	return i, err
}

const isWorldAdmin = `-- name: IsWorldAdmin :one
SELECT world_id, user_id, created_at, super_admin, approved, motivational_letter FROM world_admins WHERE user_id = $1 AND world_id = $2 AND approved = 1
`

type IsWorldAdminParams struct {
	UserID  int32 `json:"user_id"`
	WorldID int32 `json:"world_id"`
}

func (q *Queries) IsWorldAdmin(ctx context.Context, arg IsWorldAdminParams) (WorldAdmin, error) {
	row := q.db.QueryRowContext(ctx, isWorldAdmin, arg.UserID, arg.WorldID)
	var i WorldAdmin
	err := row.Scan(
		&i.WorldID,
		&i.UserID,
		&i.CreatedAt,
		&i.SuperAdmin,
		&i.Approved,
		&i.MotivationalLetter,
	)
	return i, err
}

const isWorldSuperAdmin = `-- name: IsWorldSuperAdmin :one
SELECT world_id, user_id, created_at, super_admin, approved, motivational_letter FROM world_admins WHERE user_id = $1 AND world_id = $2 AND approved = 1 AND super_admin = 1
`

type IsWorldSuperAdminParams struct {
	UserID  int32 `json:"user_id"`
	WorldID int32 `json:"world_id"`
}

func (q *Queries) IsWorldSuperAdmin(ctx context.Context, arg IsWorldSuperAdminParams) (WorldAdmin, error) {
	row := q.db.QueryRowContext(ctx, isWorldSuperAdmin, arg.UserID, arg.WorldID)
	var i WorldAdmin
	err := row.Scan(
		&i.WorldID,
		&i.UserID,
		&i.CreatedAt,
		&i.SuperAdmin,
		&i.Approved,
		&i.MotivationalLetter,
	)
	return i, err
}

const updateWorld = `-- name: UpdateWorld :one
UPDATE worlds
SET
    name = COALESCE($1, name),
    based_on = COALESCE($2, based_on),
    public = COALESCE($3, public),
    description = COALESCE($4, description)
WHERE
    id = $5
RETURNING id, name, public, created_at, description, based_on
`

type UpdateWorldParams struct {
	Name        sql.NullString `json:"name"`
	BasedOn     sql.NullString `json:"based_on"`
	Public      sql.NullBool   `json:"public"`
	Description sql.NullString `json:"description"`
	WorldID     int32          `json:"world_id"`
}

func (q *Queries) UpdateWorld(ctx context.Context, arg UpdateWorldParams) (World, error) {
	row := q.db.QueryRowContext(ctx, updateWorld,
		arg.Name,
		arg.BasedOn,
		arg.Public,
		arg.Description,
		arg.WorldID,
	)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.Description,
		&i.BasedOn,
	)
	return i, err
}
