// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/worlds/service_worlds.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Worlds_CreateWorld_FullMethodName             = "/pb.Worlds/CreateWorld"
	Worlds_UpdateWorld_FullMethodName             = "/pb.Worlds/UpdateWorld"
	Worlds_UploadWorldImage_FullMethodName        = "/pb.Worlds/UploadWorldImage"
	Worlds_GetWorlds_FullMethodName               = "/pb.Worlds/GetWorlds"
	Worlds_GetWorldById_FullMethodName            = "/pb.Worlds/GetWorldById"
	Worlds_UpdateWorldIntroduction_FullMethodName = "/pb.Worlds/UpdateWorldIntroduction"
)

// WorldsClient is the client API for Worlds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldsClient interface {
	CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error)
	UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*World, error)
	UploadWorldImage(ctx context.Context, in *UploadWorldImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error)
	GetWorldById(ctx context.Context, in *GetWorldByIdRequest, opts ...grpc.CallOption) (*World, error)
	UpdateWorldIntroduction(ctx context.Context, in *UpdateWorldIntroductionRequest, opts ...grpc.CallOption) (*Post, error)
}

type worldsClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldsClient(cc grpc.ClientConnInterface) WorldsClient {
	return &worldsClient{cc}
}

func (c *worldsClient) CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error) {
	out := new(CreateWorldResponse)
	err := c.cc.Invoke(ctx, Worlds_CreateWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsClient) UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, Worlds_UpdateWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsClient) UploadWorldImage(ctx context.Context, in *UploadWorldImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Worlds_UploadWorldImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsClient) GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error) {
	out := new(GetWorldsResponse)
	err := c.cc.Invoke(ctx, Worlds_GetWorlds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsClient) GetWorldById(ctx context.Context, in *GetWorldByIdRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, Worlds_GetWorldById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsClient) UpdateWorldIntroduction(ctx context.Context, in *UpdateWorldIntroductionRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, Worlds_UpdateWorldIntroduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldsServer is the server API for Worlds service.
// All implementations must embed UnimplementedWorldsServer
// for forward compatibility
type WorldsServer interface {
	CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error)
	UpdateWorld(context.Context, *UpdateWorldRequest) (*World, error)
	UploadWorldImage(context.Context, *UploadWorldImageRequest) (*Image, error)
	GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error)
	GetWorldById(context.Context, *GetWorldByIdRequest) (*World, error)
	UpdateWorldIntroduction(context.Context, *UpdateWorldIntroductionRequest) (*Post, error)
	mustEmbedUnimplementedWorldsServer()
}

// UnimplementedWorldsServer must be embedded to have forward compatible implementations.
type UnimplementedWorldsServer struct {
}

func (UnimplementedWorldsServer) CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedWorldsServer) UpdateWorld(context.Context, *UpdateWorldRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorld not implemented")
}
func (UnimplementedWorldsServer) UploadWorldImage(context.Context, *UploadWorldImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWorldImage not implemented")
}
func (UnimplementedWorldsServer) GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorlds not implemented")
}
func (UnimplementedWorldsServer) GetWorldById(context.Context, *GetWorldByIdRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldById not implemented")
}
func (UnimplementedWorldsServer) UpdateWorldIntroduction(context.Context, *UpdateWorldIntroductionRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorldIntroduction not implemented")
}
func (UnimplementedWorldsServer) mustEmbedUnimplementedWorldsServer() {}

// UnsafeWorldsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldsServer will
// result in compilation errors.
type UnsafeWorldsServer interface {
	mustEmbedUnimplementedWorldsServer()
}

func RegisterWorldsServer(s grpc.ServiceRegistrar, srv WorldsServer) {
	s.RegisterService(&Worlds_ServiceDesc, srv)
}

func _Worlds_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_CreateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).CreateWorld(ctx, req.(*CreateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worlds_UpdateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).UpdateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_UpdateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).UpdateWorld(ctx, req.(*UpdateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worlds_UploadWorldImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadWorldImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).UploadWorldImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_UploadWorldImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).UploadWorldImage(ctx, req.(*UploadWorldImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worlds_GetWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).GetWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_GetWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).GetWorlds(ctx, req.(*GetWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worlds_GetWorldById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).GetWorldById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_GetWorldById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).GetWorldById(ctx, req.(*GetWorldByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worlds_UpdateWorldIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldIntroductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServer).UpdateWorldIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worlds_UpdateWorldIntroduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServer).UpdateWorldIntroduction(ctx, req.(*UpdateWorldIntroductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worlds_ServiceDesc is the grpc.ServiceDesc for Worlds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worlds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Worlds",
	HandlerType: (*WorldsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorld",
			Handler:    _Worlds_CreateWorld_Handler,
		},
		{
			MethodName: "UpdateWorld",
			Handler:    _Worlds_UpdateWorld_Handler,
		},
		{
			MethodName: "UploadWorldImage",
			Handler:    _Worlds_UploadWorldImage_Handler,
		},
		{
			MethodName: "GetWorlds",
			Handler:    _Worlds_GetWorlds_Handler,
		},
		{
			MethodName: "GetWorldById",
			Handler:    _Worlds_GetWorldById_Handler,
		},
		{
			MethodName: "UpdateWorldIntroduction",
			Handler:    _Worlds_UpdateWorldIntroduction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/worlds/service_worlds.proto",
}
