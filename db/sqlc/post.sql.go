// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts
(
    user_id,
    title,
    post_type_id,
    content
)
VALUES
    ($1, $2, $3, $4)
RETURNING id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id
`

type CreatePostParams struct {
	UserID     int32  `json:"user_id"`
	Title      string `json:"title"`
	PostTypeID int32  `json:"post_type_id"`
	Content    string `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.PostTypeID,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
SET
    deleted_at = now()
WHERE
    id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, postID int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, postID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
	)
	return i, err
}

const getPostHistoryById = `-- name: GetPostHistoryById :one
SELECT
    id as post_history_id,
    post_id,
    post_type_id,
    user_id,
    title,
    content,
    created_at,
    deleted_at,
    last_updated_at,
    last_updated_user_id
FROM post_history WHERE id = $1
`

type GetPostHistoryByIdRow struct {
	PostHistoryID     int32         `json:"post_history_id"`
	PostID            int32         `json:"post_id"`
	PostTypeID        int32         `json:"post_type_id"`
	UserID            int32         `json:"user_id"`
	Title             string        `json:"title"`
	Content           string        `json:"content"`
	CreatedAt         time.Time     `json:"created_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
	LastUpdatedAt     sql.NullTime  `json:"last_updated_at"`
	LastUpdatedUserID sql.NullInt32 `json:"last_updated_user_id"`
}

func (q *Queries) GetPostHistoryById(ctx context.Context, postHistoryID int32) (GetPostHistoryByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostHistoryById, postHistoryID)
	var i GetPostHistoryByIdRow
	err := row.Scan(
		&i.PostHistoryID,
		&i.PostID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
	)
	return i, err
}

const getPostHistoryByPostId = `-- name: GetPostHistoryByPostId :many
SELECT
    id as post_history_id,
    post_id,
    post_type_id,
    user_id,
    title,
    created_at,
    deleted_at,
    last_updated_at,
    last_updated_user_id
FROM post_history WHERE post_id = $1 ORDER BY created_at DESC
`

type GetPostHistoryByPostIdRow struct {
	PostHistoryID     int32         `json:"post_history_id"`
	PostID            int32         `json:"post_id"`
	PostTypeID        int32         `json:"post_type_id"`
	UserID            int32         `json:"user_id"`
	Title             string        `json:"title"`
	CreatedAt         time.Time     `json:"created_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
	LastUpdatedAt     sql.NullTime  `json:"last_updated_at"`
	LastUpdatedUserID sql.NullInt32 `json:"last_updated_user_id"`
}

func (q *Queries) GetPostHistoryByPostId(ctx context.Context, postID int32) ([]GetPostHistoryByPostIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostHistoryByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostHistoryByPostIdRow{}
	for rows.Next() {
		var i GetPostHistoryByPostIdRow
		if err := rows.Scan(
			&i.PostHistoryID,
			&i.PostID,
			&i.PostTypeID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserId = `-- name: GetPostsByUserId :many
SELECT
    id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id
FROM
    posts
WHERE
    user_id = $1 AND
    post_type_id = COALESCE($2, post_type_id) AND
    deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $4
OFFSET $3
`

type GetPostsByUserIdParams struct {
	UserID     int32         `json:"user_id"`
	PostTypeID sql.NullInt32 `json:"post_type_id"`
	PageOffset int32         `json:"page_offset"`
	PageLimit  int32         `json:"page_limit"`
}

func (q *Queries) GetPostsByUserId(ctx context.Context, arg GetPostsByUserIdParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId,
		arg.UserID,
		arg.PostTypeID,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostTypeID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPostHistory = `-- name: InsertPostHistory :one
INSERT INTO post_history (
    post_id,
    post_type_id,
    user_id,
    title,
    content,
    created_at,
    deleted_at,
    last_updated_at,
    last_updated_user_id
)
SELECT
    id,
    post_type_id,
    user_id,
    title,
    content,
    created_at,
    deleted_at,
    last_updated_at,
    last_updated_user_id
FROM
    posts
WHERE
    posts.id = $1
RETURNING id, post_id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id
`

func (q *Queries) InsertPostHistory(ctx context.Context, postID int32) (PostHistory, error) {
	row := q.db.QueryRowContext(ctx, insertPostHistory, postID)
	var i PostHistory
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
    title = COALESCE($1, title),
    content = COALESCE($2, content),
    post_type_id = COALESCE($3, post_type_id),
    last_updated_user_id = $4,
    last_updated_at = now()
WHERE
    id = $5
RETURNING id, post_type_id, user_id, title, content, created_at, deleted_at, last_updated_at, last_updated_user_id
`

type UpdatePostParams struct {
	Title             sql.NullString `json:"title"`
	Content           sql.NullString `json:"content"`
	PostTypeID        sql.NullInt32  `json:"post_type_id"`
	LastUpdatedUserID sql.NullInt32  `json:"last_updated_user_id"`
	PostID            int32          `json:"post_id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.PostTypeID,
		arg.LastUpdatedUserID,
		arg.PostID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
	)
	return i, err
}
