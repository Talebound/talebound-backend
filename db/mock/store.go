// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/the-medo/talebound-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/the-medo/talebound-backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddChatMessage mocks base method.
func (m *MockStore) AddChatMessage(arg0 context.Context, arg1 db.AddChatMessageParams) (db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChatMessage indicates an expected call of AddChatMessage.
func (mr *MockStoreMockRecorder) AddChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMessage", reflect.TypeOf((*MockStore)(nil).AddChatMessage), arg0, arg1)
}

// AddUserPasswordReset mocks base method.
func (m *MockStore) AddUserPasswordReset(arg0 context.Context, arg1 db.AddUserPasswordResetParams) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserPasswordReset indicates an expected call of AddUserPasswordReset.
func (mr *MockStoreMockRecorder) AddUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPasswordReset", reflect.TypeOf((*MockStore)(nil).AddUserPasswordReset), arg0, arg1)
}

// AddUserRole mocks base method.
func (m *MockStore) AddUserRole(arg0 context.Context, arg1 db.AddUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockStoreMockRecorder) AddUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockStore)(nil).AddUserRole), arg0, arg1)
}

// CreateEntity mocks base method.
func (m *MockStore) CreateEntity(arg0 context.Context, arg1 db.CreateEntityParams) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockStoreMockRecorder) CreateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockStore)(nil).CreateEntity), arg0, arg1)
}

// CreateEntityGroup mocks base method.
func (m *MockStore) CreateEntityGroup(arg0 context.Context, arg1 db.CreateEntityGroupParams) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityGroup indicates an expected call of CreateEntityGroup.
func (mr *MockStoreMockRecorder) CreateEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityGroup", reflect.TypeOf((*MockStore)(nil).CreateEntityGroup), arg0, arg1)
}

// CreateEntityGroupContent mocks base method.
func (m *MockStore) CreateEntityGroupContent(arg0 context.Context, arg1 db.CreateEntityGroupContentParams) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityGroupContent indicates an expected call of CreateEntityGroupContent.
func (mr *MockStoreMockRecorder) CreateEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityGroupContent", reflect.TypeOf((*MockStore)(nil).CreateEntityGroupContent), arg0, arg1)
}

// CreateEvaluationVote mocks base method.
func (m *MockStore) CreateEvaluationVote(arg0 context.Context, arg1 db.CreateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationVote indicates an expected call of CreateEvaluationVote.
func (mr *MockStoreMockRecorder) CreateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationVote", reflect.TypeOf((*MockStore)(nil).CreateEvaluationVote), arg0, arg1)
}

// CreateImage mocks base method.
func (m *MockStore) CreateImage(arg0 context.Context, arg1 db.CreateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockStoreMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockStore)(nil).CreateImage), arg0, arg1)
}

// CreateLocation mocks base method.
func (m *MockStore) CreateLocation(arg0 context.Context, arg1 db.CreateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockStoreMockRecorder) CreateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStore)(nil).CreateLocation), arg0, arg1)
}

// CreateMap mocks base method.
func (m *MockStore) CreateMap(arg0 context.Context, arg1 db.CreateMapParams) (db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", arg0, arg1)
	ret0, _ := ret[0].(db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockStoreMockRecorder) CreateMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockStore)(nil).CreateMap), arg0, arg1)
}

// CreateMapLayer mocks base method.
func (m *MockStore) CreateMapLayer(arg0 context.Context, arg1 db.CreateMapLayerParams) (db.MapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapLayer", arg0, arg1)
	ret0, _ := ret[0].(db.MapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapLayer indicates an expected call of CreateMapLayer.
func (mr *MockStoreMockRecorder) CreateMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapLayer", reflect.TypeOf((*MockStore)(nil).CreateMapLayer), arg0, arg1)
}

// CreateMapPin mocks base method.
func (m *MockStore) CreateMapPin(arg0 context.Context, arg1 db.CreateMapPinParams) (db.MapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPin", arg0, arg1)
	ret0, _ := ret[0].(db.MapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPin indicates an expected call of CreateMapPin.
func (mr *MockStoreMockRecorder) CreateMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPin", reflect.TypeOf((*MockStore)(nil).CreateMapPin), arg0, arg1)
}

// CreateMapPinType mocks base method.
func (m *MockStore) CreateMapPinType(arg0 context.Context, arg1 db.CreateMapPinTypeParams) (db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPinType", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPinType indicates an expected call of CreateMapPinType.
func (mr *MockStoreMockRecorder) CreateMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPinType", reflect.TypeOf((*MockStore)(nil).CreateMapPinType), arg0, arg1)
}

// CreateMapPinTypeGroup mocks base method.
func (m *MockStore) CreateMapPinTypeGroup(arg0 context.Context, arg1 string) (db.MapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPinTypeGroup indicates an expected call of CreateMapPinTypeGroup.
func (mr *MockStoreMockRecorder) CreateMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).CreateMapPinTypeGroup), arg0, arg1)
}

// CreateMenu mocks base method.
func (m *MockStore) CreateMenu(arg0 context.Context, arg1 db.CreateMenuParams) (db.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenu", arg0, arg1)
	ret0, _ := ret[0].(db.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenu indicates an expected call of CreateMenu.
func (mr *MockStoreMockRecorder) CreateMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenu", reflect.TypeOf((*MockStore)(nil).CreateMenu), arg0, arg1)
}

// CreateMenuItem mocks base method.
func (m *MockStore) CreateMenuItem(arg0 context.Context, arg1 db.CreateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenuItem indicates an expected call of CreateMenuItem.
func (mr *MockStoreMockRecorder) CreateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenuItem", reflect.TypeOf((*MockStore)(nil).CreateMenuItem), arg0, arg1)
}

// CreateMenuItemPost mocks base method.
func (m *MockStore) CreateMenuItemPost(arg0 context.Context, arg1 db.CreateMenuItemPostParams) (db.MenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenuItemPost", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenuItemPost indicates an expected call of CreateMenuItemPost.
func (mr *MockStoreMockRecorder) CreateMenuItemPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenuItemPost", reflect.TypeOf((*MockStore)(nil).CreateMenuItemPost), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// CreateWorld mocks base method.
func (m *MockStore) CreateWorld(arg0 context.Context, arg1 db.CreateWorldParams) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorld", arg0, arg1)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorld indicates an expected call of CreateWorld.
func (mr *MockStoreMockRecorder) CreateWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorld", reflect.TypeOf((*MockStore)(nil).CreateWorld), arg0, arg1)
}

// CreateWorldActivity mocks base method.
func (m *MockStore) CreateWorldActivity(arg0 context.Context, arg1 db.CreateWorldActivityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorldActivity indicates an expected call of CreateWorldActivity.
func (mr *MockStoreMockRecorder) CreateWorldActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldActivity", reflect.TypeOf((*MockStore)(nil).CreateWorldActivity), arg0, arg1)
}

// CreateWorldImages mocks base method.
func (m *MockStore) CreateWorldImages(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldImages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorldImages indicates an expected call of CreateWorldImages.
func (mr *MockStoreMockRecorder) CreateWorldImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldImages", reflect.TypeOf((*MockStore)(nil).CreateWorldImages), arg0, arg1)
}

// CreateWorldLocation mocks base method.
func (m *MockStore) CreateWorldLocation(arg0 context.Context, arg1 db.CreateWorldLocationParams) (db.WorldLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldLocation", arg0, arg1)
	ret0, _ := ret[0].(db.WorldLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldLocation indicates an expected call of CreateWorldLocation.
func (mr *MockStoreMockRecorder) CreateWorldLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldLocation", reflect.TypeOf((*MockStore)(nil).CreateWorldLocation), arg0, arg1)
}

// CreateWorldMap mocks base method.
func (m *MockStore) CreateWorldMap(arg0 context.Context, arg1 db.CreateWorldMapParams) (db.WorldMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldMap", arg0, arg1)
	ret0, _ := ret[0].(db.WorldMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldMap indicates an expected call of CreateWorldMap.
func (mr *MockStoreMockRecorder) CreateWorldMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldMap", reflect.TypeOf((*MockStore)(nil).CreateWorldMap), arg0, arg1)
}

// CreateWorldMapPinTypeGroup mocks base method.
func (m *MockStore) CreateWorldMapPinTypeGroup(arg0 context.Context, arg1 db.CreateWorldMapPinTypeGroupParams) (db.WorldMapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.WorldMapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldMapPinTypeGroup indicates an expected call of CreateWorldMapPinTypeGroup.
func (mr *MockStoreMockRecorder) CreateWorldMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).CreateWorldMapPinTypeGroup), arg0, arg1)
}

// CreateWorldMenu mocks base method.
func (m *MockStore) CreateWorldMenu(arg0 context.Context, arg1 db.CreateWorldMenuParams) (db.WorldMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldMenu", arg0, arg1)
	ret0, _ := ret[0].(db.WorldMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldMenu indicates an expected call of CreateWorldMenu.
func (mr *MockStoreMockRecorder) CreateWorldMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldMenu", reflect.TypeOf((*MockStore)(nil).CreateWorldMenu), arg0, arg1)
}

// CreateWorldTag mocks base method.
func (m *MockStore) CreateWorldTag(arg0 context.Context, arg1 db.CreateWorldTagParams) (db.WorldTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTag", arg0, arg1)
	ret0, _ := ret[0].(db.WorldTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTag indicates an expected call of CreateWorldTag.
func (mr *MockStoreMockRecorder) CreateWorldTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTag", reflect.TypeOf((*MockStore)(nil).CreateWorldTag), arg0, arg1)
}

// CreateWorldTagAvailable mocks base method.
func (m *MockStore) CreateWorldTagAvailable(arg0 context.Context, arg1 string) (db.WorldTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.WorldTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTagAvailable indicates an expected call of CreateWorldTagAvailable.
func (mr *MockStoreMockRecorder) CreateWorldTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTagAvailable", reflect.TypeOf((*MockStore)(nil).CreateWorldTagAvailable), arg0, arg1)
}

// CreateWorldTx mocks base method.
func (m *MockStore) CreateWorldTx(arg0 context.Context, arg1 db.CreateWorldTxParams) (db.ViewWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTx", arg0, arg1)
	ret0, _ := ret[0].(db.ViewWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTx indicates an expected call of CreateWorldTx.
func (mr *MockStoreMockRecorder) CreateWorldTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTx", reflect.TypeOf((*MockStore)(nil).CreateWorldTx), arg0, arg1)
}

// DeleteAllWorldActivity mocks base method.
func (m *MockStore) DeleteAllWorldActivity(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWorldActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllWorldActivity indicates an expected call of DeleteAllWorldActivity.
func (mr *MockStoreMockRecorder) DeleteAllWorldActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWorldActivity", reflect.TypeOf((*MockStore)(nil).DeleteAllWorldActivity), arg0, arg1)
}

// DeleteChatMessage mocks base method.
func (m *MockStore) DeleteChatMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatMessage indicates an expected call of DeleteChatMessage.
func (mr *MockStoreMockRecorder) DeleteChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessage", reflect.TypeOf((*MockStore)(nil).DeleteChatMessage), arg0, arg1)
}

// DeleteEntity mocks base method.
func (m *MockStore) DeleteEntity(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockStoreMockRecorder) DeleteEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockStore)(nil).DeleteEntity), arg0, arg1)
}

// DeleteEntityGroup mocks base method.
func (m *MockStore) DeleteEntityGroup(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntityGroup indicates an expected call of DeleteEntityGroup.
func (mr *MockStoreMockRecorder) DeleteEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityGroup", reflect.TypeOf((*MockStore)(nil).DeleteEntityGroup), arg0, arg1)
}

// DeleteEntityGroupContent mocks base method.
func (m *MockStore) DeleteEntityGroupContent(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntityGroupContent indicates an expected call of DeleteEntityGroupContent.
func (mr *MockStoreMockRecorder) DeleteEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityGroupContent", reflect.TypeOf((*MockStore)(nil).DeleteEntityGroupContent), arg0, arg1)
}

// DeleteEvaluationVote mocks base method.
func (m *MockStore) DeleteEvaluationVote(arg0 context.Context, arg1 db.DeleteEvaluationVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluationVote indicates an expected call of DeleteEvaluationVote.
func (mr *MockStoreMockRecorder) DeleteEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationVote", reflect.TypeOf((*MockStore)(nil).DeleteEvaluationVote), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockStore) DeleteImage(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockStoreMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), arg0, arg1)
}

// DeleteLocation mocks base method.
func (m *MockStore) DeleteLocation(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockStoreMockRecorder) DeleteLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockStore)(nil).DeleteLocation), arg0, arg1)
}

// DeleteMap mocks base method.
func (m *MockStore) DeleteMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMap indicates an expected call of DeleteMap.
func (mr *MockStoreMockRecorder) DeleteMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMap", reflect.TypeOf((*MockStore)(nil).DeleteMap), arg0, arg1)
}

// DeleteMapLayer mocks base method.
func (m *MockStore) DeleteMapLayer(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapLayer indicates an expected call of DeleteMapLayer.
func (mr *MockStoreMockRecorder) DeleteMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapLayer", reflect.TypeOf((*MockStore)(nil).DeleteMapLayer), arg0, arg1)
}

// DeleteMapLayersForMap mocks base method.
func (m *MockStore) DeleteMapLayersForMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapLayersForMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapLayersForMap indicates an expected call of DeleteMapLayersForMap.
func (mr *MockStoreMockRecorder) DeleteMapLayersForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapLayersForMap", reflect.TypeOf((*MockStore)(nil).DeleteMapLayersForMap), arg0, arg1)
}

// DeleteMapPin mocks base method.
func (m *MockStore) DeleteMapPin(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPin indicates an expected call of DeleteMapPin.
func (mr *MockStoreMockRecorder) DeleteMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPin", reflect.TypeOf((*MockStore)(nil).DeleteMapPin), arg0, arg1)
}

// DeleteMapPinType mocks base method.
func (m *MockStore) DeleteMapPinType(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinType indicates an expected call of DeleteMapPinType.
func (mr *MockStoreMockRecorder) DeleteMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinType", reflect.TypeOf((*MockStore)(nil).DeleteMapPinType), arg0, arg1)
}

// DeleteMapPinTypeGroup mocks base method.
func (m *MockStore) DeleteMapPinTypeGroup(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinTypeGroup indicates an expected call of DeleteMapPinTypeGroup.
func (mr *MockStoreMockRecorder) DeleteMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).DeleteMapPinTypeGroup), arg0, arg1)
}

// DeleteMapPinsForMap mocks base method.
func (m *MockStore) DeleteMapPinsForMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinsForMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinsForMap indicates an expected call of DeleteMapPinsForMap.
func (mr *MockStoreMockRecorder) DeleteMapPinsForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinsForMap", reflect.TypeOf((*MockStore)(nil).DeleteMapPinsForMap), arg0, arg1)
}

// DeleteMapPinsForMapLayer mocks base method.
func (m *MockStore) DeleteMapPinsForMapLayer(arg0 context.Context, arg1 sql.NullInt32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinsForMapLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinsForMapLayer indicates an expected call of DeleteMapPinsForMapLayer.
func (mr *MockStoreMockRecorder) DeleteMapPinsForMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinsForMapLayer", reflect.TypeOf((*MockStore)(nil).DeleteMapPinsForMapLayer), arg0, arg1)
}

// DeleteMenu mocks base method.
func (m *MockStore) DeleteMenu(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenu indicates an expected call of DeleteMenu.
func (mr *MockStoreMockRecorder) DeleteMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenu", reflect.TypeOf((*MockStore)(nil).DeleteMenu), arg0, arg1)
}

// DeleteMenuItem mocks base method.
func (m *MockStore) DeleteMenuItem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenuItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenuItem indicates an expected call of DeleteMenuItem.
func (mr *MockStoreMockRecorder) DeleteMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenuItem", reflect.TypeOf((*MockStore)(nil).DeleteMenuItem), arg0, arg1)
}

// DeleteMenuItemPost mocks base method.
func (m *MockStore) DeleteMenuItemPost(arg0 context.Context, arg1 db.DeleteMenuItemPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenuItemPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenuItemPost indicates an expected call of DeleteMenuItemPost.
func (mr *MockStoreMockRecorder) DeleteMenuItemPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenuItemPost", reflect.TypeOf((*MockStore)(nil).DeleteMenuItemPost), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteUserPasswordReset mocks base method.
func (m *MockStore) DeleteUserPasswordReset(arg0 context.Context, arg1 db.DeleteUserPasswordResetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPasswordReset indicates an expected call of DeleteUserPasswordReset.
func (mr *MockStoreMockRecorder) DeleteUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPasswordReset", reflect.TypeOf((*MockStore)(nil).DeleteUserPasswordReset), arg0, arg1)
}

// DeleteWorld mocks base method.
func (m *MockStore) DeleteWorld(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorld", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorld indicates an expected call of DeleteWorld.
func (mr *MockStoreMockRecorder) DeleteWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorld", reflect.TypeOf((*MockStore)(nil).DeleteWorld), arg0, arg1)
}

// DeleteWorldActivityForDate mocks base method.
func (m *MockStore) DeleteWorldActivityForDate(arg0 context.Context, arg1 db.DeleteWorldActivityForDateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldActivityForDate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldActivityForDate indicates an expected call of DeleteWorldActivityForDate.
func (mr *MockStoreMockRecorder) DeleteWorldActivityForDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldActivityForDate", reflect.TypeOf((*MockStore)(nil).DeleteWorldActivityForDate), arg0, arg1)
}

// DeleteWorldAdmin mocks base method.
func (m *MockStore) DeleteWorldAdmin(arg0 context.Context, arg1 db.DeleteWorldAdminParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldAdmin indicates an expected call of DeleteWorldAdmin.
func (mr *MockStoreMockRecorder) DeleteWorldAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldAdmin", reflect.TypeOf((*MockStore)(nil).DeleteWorldAdmin), arg0, arg1)
}

// DeleteWorldImages mocks base method.
func (m *MockStore) DeleteWorldImages(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldImages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldImages indicates an expected call of DeleteWorldImages.
func (mr *MockStoreMockRecorder) DeleteWorldImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldImages", reflect.TypeOf((*MockStore)(nil).DeleteWorldImages), arg0, arg1)
}

// DeleteWorldLocation mocks base method.
func (m *MockStore) DeleteWorldLocation(arg0 context.Context, arg1 db.DeleteWorldLocationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldLocation indicates an expected call of DeleteWorldLocation.
func (mr *MockStoreMockRecorder) DeleteWorldLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldLocation", reflect.TypeOf((*MockStore)(nil).DeleteWorldLocation), arg0, arg1)
}

// DeleteWorldMap mocks base method.
func (m *MockStore) DeleteWorldMap(arg0 context.Context, arg1 db.DeleteWorldMapParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldMap indicates an expected call of DeleteWorldMap.
func (mr *MockStoreMockRecorder) DeleteWorldMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldMap", reflect.TypeOf((*MockStore)(nil).DeleteWorldMap), arg0, arg1)
}

// DeleteWorldMapPinTypeGroup mocks base method.
func (m *MockStore) DeleteWorldMapPinTypeGroup(arg0 context.Context, arg1 db.DeleteWorldMapPinTypeGroupParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldMapPinTypeGroup indicates an expected call of DeleteWorldMapPinTypeGroup.
func (mr *MockStoreMockRecorder) DeleteWorldMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).DeleteWorldMapPinTypeGroup), arg0, arg1)
}

// DeleteWorldMenu mocks base method.
func (m *MockStore) DeleteWorldMenu(arg0 context.Context, arg1 db.DeleteWorldMenuParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldMenu indicates an expected call of DeleteWorldMenu.
func (mr *MockStoreMockRecorder) DeleteWorldMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldMenu", reflect.TypeOf((*MockStore)(nil).DeleteWorldMenu), arg0, arg1)
}

// DeleteWorldTag mocks base method.
func (m *MockStore) DeleteWorldTag(arg0 context.Context, arg1 db.DeleteWorldTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldTag indicates an expected call of DeleteWorldTag.
func (mr *MockStoreMockRecorder) DeleteWorldTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldTag", reflect.TypeOf((*MockStore)(nil).DeleteWorldTag), arg0, arg1)
}

// DeleteWorldTagAvailable mocks base method.
func (m *MockStore) DeleteWorldTagAvailable(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorldTagAvailable indicates an expected call of DeleteWorldTagAvailable.
func (mr *MockStoreMockRecorder) DeleteWorldTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldTagAvailable", reflect.TypeOf((*MockStore)(nil).DeleteWorldTagAvailable), arg0, arg1)
}

// EntityGroupContentChangePositions mocks base method.
func (m *MockStore) EntityGroupContentChangePositions(arg0 context.Context, arg1 db.EntityGroupContentChangePositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityGroupContentChangePositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EntityGroupContentChangePositions indicates an expected call of EntityGroupContentChangePositions.
func (mr *MockStoreMockRecorder) EntityGroupContentChangePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityGroupContentChangePositions", reflect.TypeOf((*MockStore)(nil).EntityGroupContentChangePositions), arg0, arg1)
}

// GetAverageUserEvaluationsByType mocks base method.
func (m *MockStore) GetAverageUserEvaluationsByType(arg0 context.Context, arg1 db.GetAverageUserEvaluationsByTypeParams) ([]db.GetAverageUserEvaluationsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageUserEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAverageUserEvaluationsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageUserEvaluationsByType indicates an expected call of GetAverageUserEvaluationsByType.
func (mr *MockStoreMockRecorder) GetAverageUserEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageUserEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetAverageUserEvaluationsByType), arg0, arg1)
}

// GetChatMessage mocks base method.
func (m *MockStore) GetChatMessage(arg0 context.Context, arg1 int64) (db.GetChatMessageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessage", arg0, arg1)
	ret0, _ := ret[0].(db.GetChatMessageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessage indicates an expected call of GetChatMessage.
func (mr *MockStoreMockRecorder) GetChatMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessage", reflect.TypeOf((*MockStore)(nil).GetChatMessage), arg0, arg1)
}

// GetChatMessages mocks base method.
func (m *MockStore) GetChatMessages(arg0 context.Context, arg1 db.GetChatMessagesParams) ([]db.GetChatMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetChatMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockStoreMockRecorder) GetChatMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockStore)(nil).GetChatMessages), arg0, arg1)
}

// GetEntityByID mocks base method.
func (m *MockStore) GetEntityByID(arg0 context.Context, arg1 int32) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByID", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockStoreMockRecorder) GetEntityByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockStore)(nil).GetEntityByID), arg0, arg1)
}

// GetEntityGroupByID mocks base method.
func (m *MockStore) GetEntityGroupByID(arg0 context.Context, arg1 int32) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupByID", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupByID indicates an expected call of GetEntityGroupByID.
func (mr *MockStoreMockRecorder) GetEntityGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupByID", reflect.TypeOf((*MockStore)(nil).GetEntityGroupByID), arg0, arg1)
}

// GetEntityGroupContentByID mocks base method.
func (m *MockStore) GetEntityGroupContentByID(arg0 context.Context, arg1 int32) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContentByID", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContentByID indicates an expected call of GetEntityGroupContentByID.
func (mr *MockStoreMockRecorder) GetEntityGroupContentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContentByID", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContentByID), arg0, arg1)
}

// GetEntityGroupContentCount mocks base method.
func (m *MockStore) GetEntityGroupContentCount(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContentCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContentCount indicates an expected call of GetEntityGroupContentCount.
func (mr *MockStoreMockRecorder) GetEntityGroupContentCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContentCount", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContentCount), arg0, arg1)
}

// GetEntityGroupContents mocks base method.
func (m *MockStore) GetEntityGroupContents(arg0 context.Context, arg1 int32) ([]db.GetEntityGroupContentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContents", arg0, arg1)
	ret0, _ := ret[0].([]db.GetEntityGroupContentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContents indicates an expected call of GetEntityGroupContents.
func (mr *MockStoreMockRecorder) GetEntityGroupContents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContents", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContents), arg0, arg1)
}

// GetEntityIDsOfGroup mocks base method.
func (m *MockStore) GetEntityIDsOfGroup(arg0 context.Context, arg1 int32) (db.GetEntityIDsOfGroupRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityIDsOfGroup", arg0, arg1)
	ret0, _ := ret[0].(db.GetEntityIDsOfGroupRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityIDsOfGroup indicates an expected call of GetEntityIDsOfGroup.
func (mr *MockStoreMockRecorder) GetEntityIDsOfGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityIDsOfGroup", reflect.TypeOf((*MockStore)(nil).GetEntityIDsOfGroup), arg0, arg1)
}

// GetEvaluationById mocks base method.
func (m *MockStore) GetEvaluationById(arg0 context.Context, arg1 int32) (db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationById", arg0, arg1)
	ret0, _ := ret[0].(db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationById indicates an expected call of GetEvaluationById.
func (mr *MockStoreMockRecorder) GetEvaluationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationById", reflect.TypeOf((*MockStore)(nil).GetEvaluationById), arg0, arg1)
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVoteByEvaluationIdUserIdAndVoterParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter indicates an expected call of GetEvaluationVoteByEvaluationIdUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVoteByEvaluationIdUserIdAndVoter), arg0, arg1)
}

// GetEvaluationVotesByUserId mocks base method.
func (m *MockStore) GetEvaluationVotesByUserId(arg0 context.Context, arg1 int32) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserId indicates an expected call of GetEvaluationVotesByUserId.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserId", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserId), arg0, arg1)
}

// GetEvaluationVotesByUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVotesByUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVotesByUserIdAndVoterParams) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserIdAndVoter indicates an expected call of GetEvaluationVotesByUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserIdAndVoter), arg0, arg1)
}

// GetEvaluationsByType mocks base method.
func (m *MockStore) GetEvaluationsByType(arg0 context.Context, arg1 db.EvaluationType) ([]db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationsByType indicates an expected call of GetEvaluationsByType.
func (mr *MockStoreMockRecorder) GetEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetEvaluationsByType), arg0, arg1)
}

// GetImageByGUID mocks base method.
func (m *MockStore) GetImageByGUID(arg0 context.Context, arg1 uuid.NullUUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByGUID", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByGUID indicates an expected call of GetImageByGUID.
func (mr *MockStoreMockRecorder) GetImageByGUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByGUID", reflect.TypeOf((*MockStore)(nil).GetImageByGUID), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockStore) GetImageById(arg0 context.Context, arg1 int32) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockStoreMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockStore)(nil).GetImageById), arg0, arg1)
}

// GetImageTypeById mocks base method.
func (m *MockStore) GetImageTypeById(arg0 context.Context, arg1 int32) (db.ImageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageTypeById", arg0, arg1)
	ret0, _ := ret[0].(db.ImageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageTypeById indicates an expected call of GetImageTypeById.
func (mr *MockStoreMockRecorder) GetImageTypeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageTypeById", reflect.TypeOf((*MockStore)(nil).GetImageTypeById), arg0, arg1)
}

// GetImageTypeByName mocks base method.
func (m *MockStore) GetImageTypeByName(arg0 context.Context, arg1 string) (db.ImageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageTypeByName", arg0, arg1)
	ret0, _ := ret[0].(db.ImageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageTypeByName indicates an expected call of GetImageTypeByName.
func (mr *MockStoreMockRecorder) GetImageTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageTypeByName", reflect.TypeOf((*MockStore)(nil).GetImageTypeByName), arg0, arg1)
}

// GetImages mocks base method.
func (m *MockStore) GetImages(arg0 context.Context, arg1 db.GetImagesParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockStoreMockRecorder) GetImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockStore)(nil).GetImages), arg0, arg1)
}

// GetImagesByImageTypeId mocks base method.
func (m *MockStore) GetImagesByImageTypeId(arg0 context.Context, arg1 sql.NullInt32) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByImageTypeId", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByImageTypeId indicates an expected call of GetImagesByImageTypeId.
func (mr *MockStoreMockRecorder) GetImagesByImageTypeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByImageTypeId", reflect.TypeOf((*MockStore)(nil).GetImagesByImageTypeId), arg0, arg1)
}

// GetImagesCount mocks base method.
func (m *MockStore) GetImagesCount(arg0 context.Context, arg1 db.GetImagesCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesCount indicates an expected call of GetImagesCount.
func (mr *MockStoreMockRecorder) GetImagesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesCount", reflect.TypeOf((*MockStore)(nil).GetImagesCount), arg0, arg1)
}

// GetLocationAssignments mocks base method.
func (m *MockStore) GetLocationAssignments(arg0 context.Context, arg1 int32) (db.GetLocationAssignmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationAssignments", arg0, arg1)
	ret0, _ := ret[0].(db.GetLocationAssignmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationAssignments indicates an expected call of GetLocationAssignments.
func (mr *MockStoreMockRecorder) GetLocationAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationAssignments", reflect.TypeOf((*MockStore)(nil).GetLocationAssignments), arg0, arg1)
}

// GetLocationByID mocks base method.
func (m *MockStore) GetLocationByID(arg0 context.Context, arg1 int32) (db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByID indicates an expected call of GetLocationByID.
func (mr *MockStoreMockRecorder) GetLocationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByID", reflect.TypeOf((*MockStore)(nil).GetLocationByID), arg0, arg1)
}

// GetLocations mocks base method.
func (m *MockStore) GetLocations(arg0 context.Context) ([]db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocations", arg0)
	ret0, _ := ret[0].([]db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations.
func (mr *MockStoreMockRecorder) GetLocations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*MockStore)(nil).GetLocations), arg0)
}

// GetLocationsForPlacement mocks base method.
func (m *MockStore) GetLocationsForPlacement(arg0 context.Context, arg1 int32) ([]db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationsForPlacement", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationsForPlacement indicates an expected call of GetLocationsForPlacement.
func (mr *MockStoreMockRecorder) GetLocationsForPlacement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationsForPlacement", reflect.TypeOf((*MockStore)(nil).GetLocationsForPlacement), arg0, arg1)
}

// GetMapAssignments mocks base method.
func (m *MockStore) GetMapAssignments(arg0 context.Context, arg1 int32) (db.GetMapAssignmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapAssignments", arg0, arg1)
	ret0, _ := ret[0].(db.GetMapAssignmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapAssignments indicates an expected call of GetMapAssignments.
func (mr *MockStoreMockRecorder) GetMapAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapAssignments", reflect.TypeOf((*MockStore)(nil).GetMapAssignments), arg0, arg1)
}

// GetMapByID mocks base method.
func (m *MockStore) GetMapByID(arg0 context.Context, arg1 int32) (db.ViewMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapByID indicates an expected call of GetMapByID.
func (mr *MockStoreMockRecorder) GetMapByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapByID", reflect.TypeOf((*MockStore)(nil).GetMapByID), arg0, arg1)
}

// GetMapLayerByID mocks base method.
func (m *MockStore) GetMapLayerByID(arg0 context.Context, arg1 int32) (db.ViewMapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapLayerByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayerByID indicates an expected call of GetMapLayerByID.
func (mr *MockStoreMockRecorder) GetMapLayerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayerByID", reflect.TypeOf((*MockStore)(nil).GetMapLayerByID), arg0, arg1)
}

// GetMapLayers mocks base method.
func (m *MockStore) GetMapLayers(arg0 context.Context, arg1 int32) ([]db.ViewMapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapLayers", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayers indicates an expected call of GetMapLayers.
func (mr *MockStoreMockRecorder) GetMapLayers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayers", reflect.TypeOf((*MockStore)(nil).GetMapLayers), arg0, arg1)
}

// GetMapPinByID mocks base method.
func (m *MockStore) GetMapPinByID(arg0 context.Context, arg1 int32) (db.ViewMapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinByID indicates an expected call of GetMapPinByID.
func (mr *MockStoreMockRecorder) GetMapPinByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinByID", reflect.TypeOf((*MockStore)(nil).GetMapPinByID), arg0, arg1)
}

// GetMapPinTypeGroupIdForMap mocks base method.
func (m *MockStore) GetMapPinTypeGroupIdForMap(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypeGroupIdForMap", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypeGroupIdForMap indicates an expected call of GetMapPinTypeGroupIdForMap.
func (mr *MockStoreMockRecorder) GetMapPinTypeGroupIdForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypeGroupIdForMap", reflect.TypeOf((*MockStore)(nil).GetMapPinTypeGroupIdForMap), arg0, arg1)
}

// GetMapPinTypesForMap mocks base method.
func (m *MockStore) GetMapPinTypesForMap(arg0 context.Context, arg1 int32) ([]db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypesForMap", arg0, arg1)
	ret0, _ := ret[0].([]db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypesForMap indicates an expected call of GetMapPinTypesForMap.
func (mr *MockStoreMockRecorder) GetMapPinTypesForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypesForMap", reflect.TypeOf((*MockStore)(nil).GetMapPinTypesForMap), arg0, arg1)
}

// GetMapPinTypesForWorld mocks base method.
func (m *MockStore) GetMapPinTypesForWorld(arg0 context.Context, arg1 int32) ([]db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypesForWorld", arg0, arg1)
	ret0, _ := ret[0].([]db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypesForWorld indicates an expected call of GetMapPinTypesForWorld.
func (mr *MockStoreMockRecorder) GetMapPinTypesForWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypesForWorld", reflect.TypeOf((*MockStore)(nil).GetMapPinTypesForWorld), arg0, arg1)
}

// GetMapPins mocks base method.
func (m *MockStore) GetMapPins(arg0 context.Context, arg1 int32) ([]db.ViewMapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPins", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPins indicates an expected call of GetMapPins.
func (mr *MockStoreMockRecorder) GetMapPins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPins", reflect.TypeOf((*MockStore)(nil).GetMapPins), arg0, arg1)
}

// GetMaps mocks base method.
func (m *MockStore) GetMaps(arg0 context.Context, arg1 sql.NullInt32) ([]db.ViewMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaps", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaps indicates an expected call of GetMaps.
func (mr *MockStoreMockRecorder) GetMaps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaps", reflect.TypeOf((*MockStore)(nil).GetMaps), arg0, arg1)
}

// GetMenu mocks base method.
func (m *MockStore) GetMenu(arg0 context.Context, arg1 int32) (db.ViewMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockStoreMockRecorder) GetMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockStore)(nil).GetMenu), arg0, arg1)
}

// GetMenuIdOfEntityGroup mocks base method.
func (m *MockStore) GetMenuIdOfEntityGroup(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuIdOfEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuIdOfEntityGroup indicates an expected call of GetMenuIdOfEntityGroup.
func (mr *MockStoreMockRecorder) GetMenuIdOfEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuIdOfEntityGroup", reflect.TypeOf((*MockStore)(nil).GetMenuIdOfEntityGroup), arg0, arg1)
}

// GetMenuItemById mocks base method.
func (m *MockStore) GetMenuItemById(arg0 context.Context, arg1 int32) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItemById", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItemById indicates an expected call of GetMenuItemById.
func (mr *MockStoreMockRecorder) GetMenuItemById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItemById", reflect.TypeOf((*MockStore)(nil).GetMenuItemById), arg0, arg1)
}

// GetMenuItemPost mocks base method.
func (m *MockStore) GetMenuItemPost(arg0 context.Context, arg1 db.GetMenuItemPostParams) (db.ViewMenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItemPost", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItemPost indicates an expected call of GetMenuItemPost.
func (mr *MockStoreMockRecorder) GetMenuItemPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItemPost", reflect.TypeOf((*MockStore)(nil).GetMenuItemPost), arg0, arg1)
}

// GetMenuItemPosts mocks base method.
func (m *MockStore) GetMenuItemPosts(arg0 context.Context, arg1 sql.NullInt32) ([]db.ViewMenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItemPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItemPosts indicates an expected call of GetMenuItemPosts.
func (mr *MockStoreMockRecorder) GetMenuItemPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItemPosts", reflect.TypeOf((*MockStore)(nil).GetMenuItemPosts), arg0, arg1)
}

// GetMenuItemPostsByMenuId mocks base method.
func (m *MockStore) GetMenuItemPostsByMenuId(arg0 context.Context, arg1 int32) ([]db.ViewMenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItemPostsByMenuId", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItemPostsByMenuId indicates an expected call of GetMenuItemPostsByMenuId.
func (mr *MockStoreMockRecorder) GetMenuItemPostsByMenuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItemPostsByMenuId", reflect.TypeOf((*MockStore)(nil).GetMenuItemPostsByMenuId), arg0, arg1)
}

// GetMenuItems mocks base method.
func (m *MockStore) GetMenuItems(arg0 context.Context, arg1 int32) ([]db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItems", arg0, arg1)
	ret0, _ := ret[0].([]db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItems indicates an expected call of GetMenuItems.
func (mr *MockStoreMockRecorder) GetMenuItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItems", reflect.TypeOf((*MockStore)(nil).GetMenuItems), arg0, arg1)
}

// GetPostById mocks base method.
func (m *MockStore) GetPostById(arg0 context.Context, arg1 int32) (db.ViewPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", arg0, arg1)
	ret0, _ := ret[0].(db.ViewPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockStoreMockRecorder) GetPostById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockStore)(nil).GetPostById), arg0, arg1)
}

// GetPostHistoryById mocks base method.
func (m *MockStore) GetPostHistoryById(arg0 context.Context, arg1 int32) (db.GetPostHistoryByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostHistoryById", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostHistoryByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostHistoryById indicates an expected call of GetPostHistoryById.
func (mr *MockStoreMockRecorder) GetPostHistoryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostHistoryById", reflect.TypeOf((*MockStore)(nil).GetPostHistoryById), arg0, arg1)
}

// GetPostHistoryByPostId mocks base method.
func (m *MockStore) GetPostHistoryByPostId(arg0 context.Context, arg1 int32) ([]db.GetPostHistoryByPostIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostHistoryByPostId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostHistoryByPostIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostHistoryByPostId indicates an expected call of GetPostHistoryByPostId.
func (mr *MockStoreMockRecorder) GetPostHistoryByPostId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostHistoryByPostId", reflect.TypeOf((*MockStore)(nil).GetPostHistoryByPostId), arg0, arg1)
}

// GetPostTypeById mocks base method.
func (m *MockStore) GetPostTypeById(arg0 context.Context, arg1 int32) (db.PostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTypeById", arg0, arg1)
	ret0, _ := ret[0].(db.PostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTypeById indicates an expected call of GetPostTypeById.
func (mr *MockStoreMockRecorder) GetPostTypeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTypeById", reflect.TypeOf((*MockStore)(nil).GetPostTypeById), arg0, arg1)
}

// GetPostTypes mocks base method.
func (m *MockStore) GetPostTypes(arg0 context.Context) ([]db.PostType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTypes", arg0)
	ret0, _ := ret[0].([]db.PostType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostTypes indicates an expected call of GetPostTypes.
func (mr *MockStoreMockRecorder) GetPostTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTypes", reflect.TypeOf((*MockStore)(nil).GetPostTypes), arg0)
}

// GetPostsByUserId mocks base method.
func (m *MockStore) GetPostsByUserId(arg0 context.Context, arg1 db.GetPostsByUserIdParams) ([]db.ViewPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserId indicates an expected call of GetPostsByUserId.
func (mr *MockStoreMockRecorder) GetPostsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserId", reflect.TypeOf((*MockStore)(nil).GetPostsByUserId), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.ViewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.ViewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int32) (db.ViewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.ViewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.ViewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.ViewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserPasswordReset mocks base method.
func (m *MockStore) GetUserPasswordReset(arg0 context.Context, arg1 string) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordReset indicates an expected call of GetUserPasswordReset.
func (mr *MockStoreMockRecorder) GetUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordReset", reflect.TypeOf((*MockStore)(nil).GetUserPasswordReset), arg0, arg1)
}

// GetUserRoles mocks base method.
func (m *MockStore) GetUserRoles(arg0 context.Context, arg1 int32) ([]db.GetUserRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStoreMockRecorder) GetUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStore)(nil).GetUserRoles), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.GetUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// GetWorldAdmins mocks base method.
func (m *MockStore) GetWorldAdmins(arg0 context.Context, arg1 int32) ([]db.GetWorldAdminsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldAdmins", arg0, arg1)
	ret0, _ := ret[0].([]db.GetWorldAdminsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldAdmins indicates an expected call of GetWorldAdmins.
func (mr *MockStoreMockRecorder) GetWorldAdmins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldAdmins", reflect.TypeOf((*MockStore)(nil).GetWorldAdmins), arg0, arg1)
}

// GetWorldByID mocks base method.
func (m *MockStore) GetWorldByID(arg0 context.Context, arg1 int32) (db.ViewWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldByID indicates an expected call of GetWorldByID.
func (mr *MockStoreMockRecorder) GetWorldByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldByID", reflect.TypeOf((*MockStore)(nil).GetWorldByID), arg0, arg1)
}

// GetWorldDailyActivity mocks base method.
func (m *MockStore) GetWorldDailyActivity(arg0 context.Context, arg1 db.GetWorldDailyActivityParams) ([]db.WorldActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldDailyActivity", arg0, arg1)
	ret0, _ := ret[0].([]db.WorldActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldDailyActivity indicates an expected call of GetWorldDailyActivity.
func (mr *MockStoreMockRecorder) GetWorldDailyActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldDailyActivity", reflect.TypeOf((*MockStore)(nil).GetWorldDailyActivity), arg0, arg1)
}

// GetWorldImages mocks base method.
func (m *MockStore) GetWorldImages(arg0 context.Context, arg1 int32) (db.WorldImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldImages", arg0, arg1)
	ret0, _ := ret[0].(db.WorldImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldImages indicates an expected call of GetWorldImages.
func (mr *MockStoreMockRecorder) GetWorldImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldImages", reflect.TypeOf((*MockStore)(nil).GetWorldImages), arg0, arg1)
}

// GetWorldLocations mocks base method.
func (m *MockStore) GetWorldLocations(arg0 context.Context, arg1 int32) ([]db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldLocations", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldLocations indicates an expected call of GetWorldLocations.
func (mr *MockStoreMockRecorder) GetWorldLocations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldLocations", reflect.TypeOf((*MockStore)(nil).GetWorldLocations), arg0, arg1)
}

// GetWorldMaps mocks base method.
func (m *MockStore) GetWorldMaps(arg0 context.Context, arg1 int32) ([]db.ViewMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldMaps", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldMaps indicates an expected call of GetWorldMaps.
func (mr *MockStoreMockRecorder) GetWorldMaps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldMaps", reflect.TypeOf((*MockStore)(nil).GetWorldMaps), arg0, arg1)
}

// GetWorldMenu mocks base method.
func (m *MockStore) GetWorldMenu(arg0 context.Context, arg1 db.GetWorldMenuParams) (db.WorldMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldMenu", arg0, arg1)
	ret0, _ := ret[0].(db.WorldMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldMenu indicates an expected call of GetWorldMenu.
func (mr *MockStoreMockRecorder) GetWorldMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldMenu", reflect.TypeOf((*MockStore)(nil).GetWorldMenu), arg0, arg1)
}

// GetWorldMenuByMenuId mocks base method.
func (m *MockStore) GetWorldMenuByMenuId(arg0 context.Context, arg1 int32) (db.WorldMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldMenuByMenuId", arg0, arg1)
	ret0, _ := ret[0].(db.WorldMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldMenuByMenuId indicates an expected call of GetWorldMenuByMenuId.
func (mr *MockStoreMockRecorder) GetWorldMenuByMenuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldMenuByMenuId", reflect.TypeOf((*MockStore)(nil).GetWorldMenuByMenuId), arg0, arg1)
}

// GetWorldMonthlyActivity mocks base method.
func (m *MockStore) GetWorldMonthlyActivity(arg0 context.Context, arg1 db.GetWorldMonthlyActivityParams) ([]db.GetWorldMonthlyActivityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldMonthlyActivity", arg0, arg1)
	ret0, _ := ret[0].([]db.GetWorldMonthlyActivityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldMonthlyActivity indicates an expected call of GetWorldMonthlyActivity.
func (mr *MockStoreMockRecorder) GetWorldMonthlyActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldMonthlyActivity", reflect.TypeOf((*MockStore)(nil).GetWorldMonthlyActivity), arg0, arg1)
}

// GetWorldTag mocks base method.
func (m *MockStore) GetWorldTag(arg0 context.Context, arg1 db.GetWorldTagParams) (db.WorldTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTag", arg0, arg1)
	ret0, _ := ret[0].(db.WorldTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTag indicates an expected call of GetWorldTag.
func (mr *MockStoreMockRecorder) GetWorldTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTag", reflect.TypeOf((*MockStore)(nil).GetWorldTag), arg0, arg1)
}

// GetWorldTagAvailable mocks base method.
func (m *MockStore) GetWorldTagAvailable(arg0 context.Context, arg1 int32) (db.ViewWorldTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ViewWorldTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTagAvailable indicates an expected call of GetWorldTagAvailable.
func (mr *MockStoreMockRecorder) GetWorldTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTagAvailable", reflect.TypeOf((*MockStore)(nil).GetWorldTagAvailable), arg0, arg1)
}

// GetWorldTagCount mocks base method.
func (m *MockStore) GetWorldTagCount(arg0 context.Context) ([]db.GetWorldTagCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTagCount", arg0)
	ret0, _ := ret[0].([]db.GetWorldTagCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTagCount indicates an expected call of GetWorldTagCount.
func (mr *MockStoreMockRecorder) GetWorldTagCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTagCount", reflect.TypeOf((*MockStore)(nil).GetWorldTagCount), arg0)
}

// GetWorldTags mocks base method.
func (m *MockStore) GetWorldTags(arg0 context.Context) ([]db.WorldTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTags", arg0)
	ret0, _ := ret[0].([]db.WorldTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTags indicates an expected call of GetWorldTags.
func (mr *MockStoreMockRecorder) GetWorldTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTags", reflect.TypeOf((*MockStore)(nil).GetWorldTags), arg0)
}

// GetWorldTagsAvailable mocks base method.
func (m *MockStore) GetWorldTagsAvailable(arg0 context.Context) ([]db.ViewWorldTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTagsAvailable", arg0)
	ret0, _ := ret[0].([]db.ViewWorldTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTagsAvailable indicates an expected call of GetWorldTagsAvailable.
func (mr *MockStoreMockRecorder) GetWorldTagsAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTagsAvailable", reflect.TypeOf((*MockStore)(nil).GetWorldTagsAvailable), arg0)
}

// GetWorlds mocks base method.
func (m *MockStore) GetWorlds(arg0 context.Context, arg1 db.GetWorldsParams) ([]db.ViewWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorlds", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorlds indicates an expected call of GetWorlds.
func (mr *MockStoreMockRecorder) GetWorlds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorlds", reflect.TypeOf((*MockStore)(nil).GetWorlds), arg0, arg1)
}

// GetWorldsCount mocks base method.
func (m *MockStore) GetWorldsCount(arg0 context.Context, arg1 db.GetWorldsCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldsCount indicates an expected call of GetWorldsCount.
func (mr *MockStoreMockRecorder) GetWorldsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldsCount", reflect.TypeOf((*MockStore)(nil).GetWorldsCount), arg0, arg1)
}

// GetWorldsOfUser mocks base method.
func (m *MockStore) GetWorldsOfUser(arg0 context.Context, arg1 int32) ([]db.GetWorldsOfUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldsOfUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetWorldsOfUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldsOfUser indicates an expected call of GetWorldsOfUser.
func (mr *MockStoreMockRecorder) GetWorldsOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldsOfUser", reflect.TypeOf((*MockStore)(nil).GetWorldsOfUser), arg0, arg1)
}

// HasUserRole mocks base method.
func (m *MockStore) HasUserRole(arg0 context.Context, arg1 db.HasUserRoleParams) (db.HasUserRoleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.HasUserRoleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserRole indicates an expected call of HasUserRole.
func (mr *MockStoreMockRecorder) HasUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserRole", reflect.TypeOf((*MockStore)(nil).HasUserRole), arg0, arg1)
}

// InsertPostHistory mocks base method.
func (m *MockStore) InsertPostHistory(arg0 context.Context, arg1 int32) (db.PostHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPostHistory", arg0, arg1)
	ret0, _ := ret[0].(db.PostHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPostHistory indicates an expected call of InsertPostHistory.
func (mr *MockStoreMockRecorder) InsertPostHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPostHistory", reflect.TypeOf((*MockStore)(nil).InsertPostHistory), arg0, arg1)
}

// InsertWorldAdmin mocks base method.
func (m *MockStore) InsertWorldAdmin(arg0 context.Context, arg1 db.InsertWorldAdminParams) (db.WorldAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWorldAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.WorldAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWorldAdmin indicates an expected call of InsertWorldAdmin.
func (mr *MockStoreMockRecorder) InsertWorldAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWorldAdmin", reflect.TypeOf((*MockStore)(nil).InsertWorldAdmin), arg0, arg1)
}

// IsWorldAdmin mocks base method.
func (m *MockStore) IsWorldAdmin(arg0 context.Context, arg1 db.IsWorldAdminParams) (db.WorldAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorldAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.WorldAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWorldAdmin indicates an expected call of IsWorldAdmin.
func (mr *MockStoreMockRecorder) IsWorldAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorldAdmin", reflect.TypeOf((*MockStore)(nil).IsWorldAdmin), arg0, arg1)
}

// IsWorldSuperAdmin mocks base method.
func (m *MockStore) IsWorldSuperAdmin(arg0 context.Context, arg1 db.IsWorldSuperAdminParams) (db.WorldAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorldSuperAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.WorldAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWorldSuperAdmin indicates an expected call of IsWorldSuperAdmin.
func (mr *MockStoreMockRecorder) IsWorldSuperAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorldSuperAdmin", reflect.TypeOf((*MockStore)(nil).IsWorldSuperAdmin), arg0, arg1)
}

// MenuItemChangePositions mocks base method.
func (m *MockStore) MenuItemChangePositions(arg0 context.Context, arg1 db.MenuItemChangePositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuItemChangePositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MenuItemChangePositions indicates an expected call of MenuItemChangePositions.
func (mr *MockStoreMockRecorder) MenuItemChangePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuItemChangePositions", reflect.TypeOf((*MockStore)(nil).MenuItemChangePositions), arg0, arg1)
}

// MenuItemMoveGroupUp mocks base method.
func (m *MockStore) MenuItemMoveGroupUp(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuItemMoveGroupUp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MenuItemMoveGroupUp indicates an expected call of MenuItemMoveGroupUp.
func (mr *MockStoreMockRecorder) MenuItemMoveGroupUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuItemMoveGroupUp", reflect.TypeOf((*MockStore)(nil).MenuItemMoveGroupUp), arg0, arg1)
}

// MenuItemPostChangePositions mocks base method.
func (m *MockStore) MenuItemPostChangePositions(arg0 context.Context, arg1 db.MenuItemPostChangePositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuItemPostChangePositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MenuItemPostChangePositions indicates an expected call of MenuItemPostChangePositions.
func (mr *MockStoreMockRecorder) MenuItemPostChangePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuItemPostChangePositions", reflect.TypeOf((*MockStore)(nil).MenuItemPostChangePositions), arg0, arg1)
}

// RemoveUserRole mocks base method.
func (m *MockStore) RemoveUserRole(arg0 context.Context, arg1 db.RemoveUserRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRole indicates an expected call of RemoveUserRole.
func (mr *MockStoreMockRecorder) RemoveUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRole", reflect.TypeOf((*MockStore)(nil).RemoveUserRole), arg0, arg1)
}

// ResetPasswordRequestTx mocks base method.
func (m *MockStore) ResetPasswordRequestTx(arg0 context.Context, arg1 db.ResetPasswordRequestTxParams) (db.ResetPasswordRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordRequestTx indicates an expected call of ResetPasswordRequestTx.
func (mr *MockStoreMockRecorder) ResetPasswordRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordRequestTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordRequestTx), arg0, arg1)
}

// ResetPasswordVerifyTx mocks base method.
func (m *MockStore) ResetPasswordVerifyTx(arg0 context.Context, arg1 db.ResetPasswordVerifyTxParams) (db.ResetPasswordVerifyTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordVerifyTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordVerifyTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordVerifyTx indicates an expected call of ResetPasswordVerifyTx.
func (mr *MockStoreMockRecorder) ResetPasswordVerifyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordVerifyTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordVerifyTx), arg0, arg1)
}

// UnassignMenuItemPost mocks base method.
func (m *MockStore) UnassignMenuItemPost(arg0 context.Context, arg1 db.UnassignMenuItemPostParams) (db.MenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignMenuItemPost", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignMenuItemPost indicates an expected call of UnassignMenuItemPost.
func (mr *MockStoreMockRecorder) UnassignMenuItemPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignMenuItemPost", reflect.TypeOf((*MockStore)(nil).UnassignMenuItemPost), arg0, arg1)
}

// UpdateEntity mocks base method.
func (m *MockStore) UpdateEntity(arg0 context.Context, arg1 db.UpdateEntityParams) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockStoreMockRecorder) UpdateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockStore)(nil).UpdateEntity), arg0, arg1)
}

// UpdateEntityGroup mocks base method.
func (m *MockStore) UpdateEntityGroup(arg0 context.Context, arg1 db.UpdateEntityGroupParams) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityGroup indicates an expected call of UpdateEntityGroup.
func (mr *MockStoreMockRecorder) UpdateEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityGroup", reflect.TypeOf((*MockStore)(nil).UpdateEntityGroup), arg0, arg1)
}

// UpdateEntityGroupContent mocks base method.
func (m *MockStore) UpdateEntityGroupContent(arg0 context.Context, arg1 db.UpdateEntityGroupContentParams) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityGroupContent indicates an expected call of UpdateEntityGroupContent.
func (mr *MockStoreMockRecorder) UpdateEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityGroupContent", reflect.TypeOf((*MockStore)(nil).UpdateEntityGroupContent), arg0, arg1)
}

// UpdateEvaluationVote mocks base method.
func (m *MockStore) UpdateEvaluationVote(arg0 context.Context, arg1 db.UpdateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationVote indicates an expected call of UpdateEvaluationVote.
func (mr *MockStoreMockRecorder) UpdateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationVote", reflect.TypeOf((*MockStore)(nil).UpdateEvaluationVote), arg0, arg1)
}

// UpdateImage mocks base method.
func (m *MockStore) UpdateImage(arg0 context.Context, arg1 db.UpdateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockStoreMockRecorder) UpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockStore)(nil).UpdateImage), arg0, arg1)
}

// UpdateLocation mocks base method.
func (m *MockStore) UpdateLocation(arg0 context.Context, arg1 db.UpdateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockStoreMockRecorder) UpdateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockStore)(nil).UpdateLocation), arg0, arg1)
}

// UpdateMap mocks base method.
func (m *MockStore) UpdateMap(arg0 context.Context, arg1 db.UpdateMapParams) (db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMap", arg0, arg1)
	ret0, _ := ret[0].(db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMap indicates an expected call of UpdateMap.
func (mr *MockStoreMockRecorder) UpdateMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMap", reflect.TypeOf((*MockStore)(nil).UpdateMap), arg0, arg1)
}

// UpdateMapLayer mocks base method.
func (m *MockStore) UpdateMapLayer(arg0 context.Context, arg1 db.UpdateMapLayerParams) (db.MapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapLayer", arg0, arg1)
	ret0, _ := ret[0].(db.MapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapLayer indicates an expected call of UpdateMapLayer.
func (mr *MockStoreMockRecorder) UpdateMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapLayer", reflect.TypeOf((*MockStore)(nil).UpdateMapLayer), arg0, arg1)
}

// UpdateMapLayerIsMain mocks base method.
func (m *MockStore) UpdateMapLayerIsMain(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapLayerIsMain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMapLayerIsMain indicates an expected call of UpdateMapLayerIsMain.
func (mr *MockStoreMockRecorder) UpdateMapLayerIsMain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapLayerIsMain", reflect.TypeOf((*MockStore)(nil).UpdateMapLayerIsMain), arg0, arg1)
}

// UpdateMapPin mocks base method.
func (m *MockStore) UpdateMapPin(arg0 context.Context, arg1 db.UpdateMapPinParams) (db.MapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPin", arg0, arg1)
	ret0, _ := ret[0].(db.MapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPin indicates an expected call of UpdateMapPin.
func (mr *MockStoreMockRecorder) UpdateMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPin", reflect.TypeOf((*MockStore)(nil).UpdateMapPin), arg0, arg1)
}

// UpdateMapPinType mocks base method.
func (m *MockStore) UpdateMapPinType(arg0 context.Context, arg1 db.UpdateMapPinTypeParams) (db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPinType", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPinType indicates an expected call of UpdateMapPinType.
func (mr *MockStoreMockRecorder) UpdateMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPinType", reflect.TypeOf((*MockStore)(nil).UpdateMapPinType), arg0, arg1)
}

// UpdateMapPinTypeGroup mocks base method.
func (m *MockStore) UpdateMapPinTypeGroup(arg0 context.Context, arg1 db.UpdateMapPinTypeGroupParams) (db.MapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPinTypeGroup indicates an expected call of UpdateMapPinTypeGroup.
func (mr *MockStoreMockRecorder) UpdateMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).UpdateMapPinTypeGroup), arg0, arg1)
}

// UpdateMenu mocks base method.
func (m *MockStore) UpdateMenu(arg0 context.Context, arg1 db.UpdateMenuParams) (db.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", arg0, arg1)
	ret0, _ := ret[0].(db.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockStoreMockRecorder) UpdateMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockStore)(nil).UpdateMenu), arg0, arg1)
}

// UpdateMenuItem mocks base method.
func (m *MockStore) UpdateMenuItem(arg0 context.Context, arg1 db.UpdateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenuItem indicates an expected call of UpdateMenuItem.
func (mr *MockStoreMockRecorder) UpdateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuItem", reflect.TypeOf((*MockStore)(nil).UpdateMenuItem), arg0, arg1)
}

// UpdateMenuItemPost mocks base method.
func (m *MockStore) UpdateMenuItemPost(arg0 context.Context, arg1 db.UpdateMenuItemPostParams) (db.MenuItemPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuItemPost", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItemPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenuItemPost indicates an expected call of UpdateMenuItemPost.
func (mr *MockStoreMockRecorder) UpdateMenuItemPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuItemPost", reflect.TypeOf((*MockStore)(nil).UpdateMenuItemPost), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// UpdateWorld mocks base method.
func (m *MockStore) UpdateWorld(arg0 context.Context, arg1 db.UpdateWorldParams) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorld", arg0, arg1)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorld indicates an expected call of UpdateWorld.
func (mr *MockStoreMockRecorder) UpdateWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorld", reflect.TypeOf((*MockStore)(nil).UpdateWorld), arg0, arg1)
}

// UpdateWorldActivity mocks base method.
func (m *MockStore) UpdateWorldActivity(arg0 context.Context, arg1 db.UpdateWorldActivityParams) (db.WorldActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldActivity", arg0, arg1)
	ret0, _ := ret[0].(db.WorldActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldActivity indicates an expected call of UpdateWorldActivity.
func (mr *MockStoreMockRecorder) UpdateWorldActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldActivity", reflect.TypeOf((*MockStore)(nil).UpdateWorldActivity), arg0, arg1)
}

// UpdateWorldAdmin mocks base method.
func (m *MockStore) UpdateWorldAdmin(arg0 context.Context, arg1 db.UpdateWorldAdminParams) (db.WorldAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.WorldAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldAdmin indicates an expected call of UpdateWorldAdmin.
func (mr *MockStoreMockRecorder) UpdateWorldAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldAdmin", reflect.TypeOf((*MockStore)(nil).UpdateWorldAdmin), arg0, arg1)
}

// UpdateWorldImages mocks base method.
func (m *MockStore) UpdateWorldImages(arg0 context.Context, arg1 db.UpdateWorldImagesParams) (db.WorldImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldImages", arg0, arg1)
	ret0, _ := ret[0].(db.WorldImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldImages indicates an expected call of UpdateWorldImages.
func (mr *MockStoreMockRecorder) UpdateWorldImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldImages", reflect.TypeOf((*MockStore)(nil).UpdateWorldImages), arg0, arg1)
}

// UpdateWorldTagAvailable mocks base method.
func (m *MockStore) UpdateWorldTagAvailable(arg0 context.Context, arg1 db.UpdateWorldTagAvailableParams) (db.WorldTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.WorldTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldTagAvailable indicates an expected call of UpdateWorldTagAvailable.
func (mr *MockStoreMockRecorder) UpdateWorldTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldTagAvailable", reflect.TypeOf((*MockStore)(nil).UpdateWorldTagAvailable), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
