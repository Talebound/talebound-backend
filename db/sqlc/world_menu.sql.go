// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: world_menu.sql

package db

import (
	"context"
)

const createWorldMenu = `-- name: CreateWorldMenu :one
INSERT INTO world_menu (world_id, menu_id)
VALUES ($1, $2)
RETURNING world_id, menu_id
`

type CreateWorldMenuParams struct {
	WorldID int32 `json:"world_id"`
	MenuID  int32 `json:"menu_id"`
}

func (q *Queries) CreateWorldMenu(ctx context.Context, arg CreateWorldMenuParams) (WorldMenu, error) {
	row := q.db.QueryRowContext(ctx, createWorldMenu, arg.WorldID, arg.MenuID)
	var i WorldMenu
	err := row.Scan(&i.WorldID, &i.MenuID)
	return i, err
}

const deleteWorldMenu = `-- name: DeleteWorldMenu :exec
DELETE FROM world_menu WHERE world_id = $1 AND menu_id = $2
`

type DeleteWorldMenuParams struct {
	WorldID int32 `json:"world_id"`
	MenuID  int32 `json:"menu_id"`
}

func (q *Queries) DeleteWorldMenu(ctx context.Context, arg DeleteWorldMenuParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorldMenu, arg.WorldID, arg.MenuID)
	return err
}

const getWorldMenu = `-- name: GetWorldMenu :one
SELECT world_id, menu_id FROM world_menu WHERE world_id = $1 AND menu_id = $2
`

type GetWorldMenuParams struct {
	WorldID int32 `json:"world_id"`
	MenuID  int32 `json:"menu_id"`
}

func (q *Queries) GetWorldMenu(ctx context.Context, arg GetWorldMenuParams) (WorldMenu, error) {
	row := q.db.QueryRowContext(ctx, getWorldMenu, arg.WorldID, arg.MenuID)
	var i WorldMenu
	err := row.Scan(&i.WorldID, &i.MenuID)
	return i, err
}
