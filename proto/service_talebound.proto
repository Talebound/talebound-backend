syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_update_user.proto";
import "rpc_login_user.proto";
import "rpc_verify_email.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_user_roles.proto";
import "rpc_chat.proto";
import "rpc_get_user.proto";
import "rpc_reset_password.proto";
import "rpc_user_evaluations.proto";
import "rpc_upload_image.proto";
import "rpc_world.proto";
import "rpc_post.proto";
import "image.proto";
import "world.proto";
import "post.proto";
import "google/protobuf/empty.proto";


option go_package = "github.com/the-medo/talebound-backend/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Talebound API";
    version: "1.0";
    contact: {
      name: "Medo";
      url: "https://github.com/the-medo/talebound-backend";
      email: "martinmederly@gmail.com";
    };
  };
};


service Talebound {


  // ============= USER ROLES =================
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (google.api.http) = {
      get: "/users/roles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns full list of user roles";
      summary: "Get user roles (admin, moderator, etc.)";
    };
  };

  rpc AddRoleToUser(AddRoleToUserRequest) returns (AddRoleToUserResponse) {
    option (google.api.http) = {
      post: "/users/roles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new role to user";
      summary: "Add role to user";
    };
  };

  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (RemoveRoleFromUserResponse) {
    option (google.api.http) = {
      delete: "/users/{userId}/roles/{roleId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Remove role from user";
    };
  };


  // ============= CHAT MESSAGES =================

  rpc GetChatMessages(GetChatMessagesRequest) returns (GetChatMessagesResponse) {
    option (google.api.http) = {
      get: "/chat"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of chat messages";
      summary: "Get list of chat messages";
    };
  };

  rpc AddChatMessage(AddChatMessageRequest) returns (AddChatMessageResponse) {
    option (google.api.http) = {
      post: "/chat"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "adds new chat message";
      summary: "Add new chat message";
    };
  };

  rpc DeleteChatMessage(DeleteChatMessageRequest) returns (DeleteChatMessageResponse) {
    option (google.api.http) = {
      delete: "/chat/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "removes role from user";
      summary: "Delete chat message";
    };
  };

  // ============= USERS =================

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get: "/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "returns list of users";
      summary: "Get list of users";
    };
  };

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create new user";
    };
  };

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user";
      summary: "Update user";
    };
  };

  // ============= LOGIN & LOGOUT =================
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/users/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Login user - get user object and set HttpOnly cookies";
      summary: "Login user";
    };
  };

  rpc LogoutUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/users/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Logout user - it clears HttpOnly cookies - no request data required";
      summary: "Logout user";
    };
  };

  rpc ResetPasswordSendCode(ResetPasswordSendCodeRequest) returns (ResetPasswordSendCodeResponse) {
    option (google.api.http) = {
      post: "/users/reset/send-code"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "In case a user forgot their password, they can request a password reset using this endpoint";
      summary: "Request password reset";
    };
  };

  rpc ResetPasswordVerifyCode(ResetPasswordVerifyCodeRequest) returns (ResetPasswordVerifyCodeResponse) {
    option (google.api.http) = {
      post: "/users/reset/verify-code"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "In case a user forgot their password, they can confirm the password reset using this endpoint";
      summary: "Confirm password reset";
    };
  };

  rpc ResetPasswordVerifyCodeValidity(ResetPasswordVerifyCodeValidityRequest) returns (ResetPasswordVerifyCodeValidityResponse) {
    option (google.api.http) = {
      get: "/users/reset/verify-code-validity"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Validate reset password secret code";
      summary: "Validate reset password secret code";
    };
  };

  // ============= VERIFY =================
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      get: "/verify"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Verify user email";
      summary: "Verify email";
    };
  };

  // ============= USER EVALUATION =================
  rpc GetEvaluationById(GetEvaluationByIdRequest) returns (GetEvaluationByIdResponse) {
    option (google.api.http) = {
      get: "/evaluations/id/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "";
      summary: "";
    };
  };

  rpc GetEvaluationsByType(GetEvaluationsByTypeRequest) returns (GetEvaluationsByTypeResponse) {
    option (google.api.http) = {
      get: "/evaluations/type/{type}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get evaluations by type";
      summary: "Get evaluations by type";
    };
  };

  rpc CreateOrUpdateEvaluationVote(CreateOrUpdateEvaluationVoteRequest) returns (CreateOrUpdateEvaluationVoteResponse) {
    option (google.api.http) = {
      post: "/users/{userId}/evaluation-vote"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Create or update evaluation vote";
      summary: "Create or update evaluation vote";
    };
  };

  rpc GetEvaluationVotesByUserId(GetEvaluationVotesByUserIdRequest) returns (GetEvaluationVotesByUserIdResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get evaluation votes by user id";
      summary: "Get evaluation votes by user id";
    };
  };

  rpc GetEvaluationVotesByUserIdAndVoter(GetEvaluationVotesByUserIdAndVoterRequest) returns (GetEvaluationVotesByUserIdAndVoterResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote/voter/{userIdVoter}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get evaluation votes by user id and voter";
      summary: "Get evaluation votes by user id and voter";
    };
  };

  rpc DeleteEvaluationVote(DeleteEvaluationVoteRequest) returns (DeleteEvaluationVoteResponse) {
    option (google.api.http) = {
      delete: "/users/{userId}/evaluation-vote/{evaluationId}/voter/{userIdVoter}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Delete evaluation vote";
      summary: "Delete evaluation vote";
    };
  };

  rpc GetAverageUserEvaluationsByType(GetAverageUserEvaluationsByTypeRequest) returns (GetAverageUserEvaluationsByTypeResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/evaluation-vote/type/{type}/average"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get average user evaluation by type";
      summary: "Get average user evaluation";
    };
  };

  // ============= FILE UPLOAD ================
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse) {
    option (google.api.http) = {
      post: "/files/upload"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads an image file";
      summary: "Upload image";
    };
  };
  rpc UploadUserAvatar(UploadUserAvatarRequest) returns (UploadUserAvatarResponse) {
    option (google.api.http) = {
      post: "/users/{userId}/avatar"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads an user avatar";
      summary: "Upload user avatar";
    };
  };

  // ============= POSTS =================

  rpc GetPostById(GetPostByIdRequest) returns (Post) {
    option (google.api.http) = {
      get: "/posts/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get content of post by its ID";
      summary: "Get post by id";
    };
  };

  rpc GetPostsByUserId(GetPostsByUserIdRequest) returns (GetPostsByUserIdResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/posts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get posts of user by userID";
      summary: "Get user posts";
    };
  };

  rpc GetPostHistory(GetPostHistoryRequest) returns (GetPostHistoryResponse) {
    option (google.api.http) = {
      get: "/post_history/post/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get list of history changes of post by its ID - without content";
      summary: "Get post history";
    };
  };

  rpc GetPostHistoryById(GetPostHistoryByIdRequest) returns (HistoryPost) {
    option (google.api.http) = {
      get: "/post_history/content/{postHistoryId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get content of single update iteration of post";
      summary: "Get post history content";
    };
  };

  rpc CreatePost(CreatePostRequest) returns (Post) {
    option (google.api.http) = {
      post: "/posts"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Create completely new post";
      summary: "Create post";
    };
  };

  rpc UpdatePost(UpdatePostRequest) returns (World) {
    option (google.api.http) = {
      patch: "/posts/{postId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Update title or content of the post";
      summary: "Update post";
    };
  };

  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/posts/{postId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Deletes post";
      summary: "Delete post";
    };
  };

  // ============= WORLD =================

  rpc GetWorldsOfCreator(GetWorldsOfCreatorRequest) returns (GetWorldsOfCreatorResponse) {
    option (google.api.http) = {
      get: "/users/{userId}/worlds_creator"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Get list of worlds that the creator is part of";
      summary: "Get creator's worlds";
    };
  };

  rpc CreateWorld(CreateWorldRequest) returns (World) {
    option (google.api.http) = {
      post: "/worlds"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Create completely new world";
      summary: "Create world";
    };
  };

  rpc UpdateWorld(UpdateWorldRequest) returns (World) {
    option (google.api.http) = {
      patch: "/worlds/{worldId}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Update world properties (NO images or stats!)";
      summary: "Update world";
    };
  };

  rpc UploadWorldImage(UploadWorldImageRequest) returns (Image) {
    option (google.api.http) = {
      post: "/worlds/{worldId}/images"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "uploads and sets new image for given world";
      summary: "Upload image for world";
    };
  };

}