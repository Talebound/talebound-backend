// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type EvaluationType string

const (
	EvaluationTypeSelf EvaluationType = "self"
	EvaluationTypeDm   EvaluationType = "dm"
)

func (e *EvaluationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EvaluationType(s)
	case string:
		*e = EvaluationType(s)
	default:
		return fmt.Errorf("unsupported scan type for EvaluationType: %T", src)
	}
	return nil
}

type NullEvaluationType struct {
	EvaluationType EvaluationType
	Valid          bool // Valid is true if EvaluationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEvaluationType) Scan(value interface{}) error {
	if value == nil {
		ns.EvaluationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EvaluationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEvaluationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EvaluationType), nil
}

type ImageVariant string

const (
	ImageVariant100x100  ImageVariant = "100x100"
	ImageVariant1200x800 ImageVariant = "1200x800"
	ImageVariant150x150  ImageVariant = "150x150"
	ImageVariant1920x200 ImageVariant = "1920x200"
	ImageVariant200x200  ImageVariant = "200x200"
	ImageVariant300x300  ImageVariant = "300x300"
	ImageVariant30x30    ImageVariant = "30x30"
	ImageVariantPublic   ImageVariant = "public"
	ImageVariantOriginal ImageVariant = "original"
	ImageVariant600x400  ImageVariant = "600x400"
	ImageVariant400x600  ImageVariant = "400x600"
	ImageVariant300x200  ImageVariant = "300x200"
	ImageVariant200x300  ImageVariant = "200x300"
	ImageVariant250x50   ImageVariant = "250x50"
)

func (e *ImageVariant) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageVariant(s)
	case string:
		*e = ImageVariant(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageVariant: %T", src)
	}
	return nil
}

type NullImageVariant struct {
	ImageVariant ImageVariant
	Valid        bool // Valid is true if ImageVariant is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageVariant) Scan(value interface{}) error {
	if value == nil {
		ns.ImageVariant, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageVariant.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageVariant) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageVariant), nil
}

type Character struct {
	ID             int32         `json:"id"`
	UserID         int32         `json:"user_id"`
	WorldID        int32         `json:"world_id"`
	RaceID         int32         `json:"race_id"`
	ImgID          sql.NullInt32 `json:"img_id"`
	Name           string        `json:"name"`
	Level          int32         `json:"level"`
	Experience     int32         `json:"experience"`
	SkillPoints    int32         `json:"skill_points"`
	PropertyPoints int32         `json:"property_points"`
	CreatedAt      time.Time     `json:"created_at"`
}

type CharacterProperty struct {
	CharacterID int32 `json:"character_id"`
	PropertyID  int32 `json:"property_id"`
	Value       int32 `json:"value"`
}

type CharacterSkill struct {
	CharacterID int32 `json:"character_id"`
	SkillID     int32 `json:"skill_id"`
	SkillLevel  int32 `json:"skill_level"`
}

type Chat struct {
	ID        int64     `json:"id"`
	UserID    int32     `json:"user_id"`
	Text      string    `json:"text"`
	CreatedAt time.Time `json:"created_at"`
}

type Evaluation struct {
	ID             int32          `json:"id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	EvaluationType EvaluationType `json:"evaluation_type"`
}

type EvaluationVote struct {
	EvaluationID int32     `json:"evaluation_id"`
	UserID       int32     `json:"user_id"`
	UserIDVoter  int32     `json:"user_id_voter"`
	Value        float64   `json:"value"`
	CreatedAt    time.Time `json:"created_at"`
}

type Image struct {
	ID          int32          `json:"id"`
	ImageTypeID sql.NullInt32  `json:"image_type_id"`
	Name        sql.NullString `json:"name"`
	Url         string         `json:"url"`
	CreatedAt   time.Time      `json:"created_at"`
	BaseUrl     string         `json:"base_url"`
	ImgGuid     uuid.NullUUID  `json:"img_guid"`
	UserID      int32          `json:"user_id"`
}

type ImageType struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	// Variant name from cloudflare.
	Variant ImageVariant `json:"variant"`
}

type Menu struct {
	ID              int32         `json:"id"`
	MenuCode        string        `json:"menu_code"`
	MenuHeaderImgID sql.NullInt32 `json:"menu_header_img_id"`
}

type MenuItem struct {
	ID                int32         `json:"id"`
	MenuID            int32         `json:"menu_id"`
	MenuItemCode      string        `json:"menu_item_code"`
	Name              string        `json:"name"`
	Position          int32         `json:"position"`
	ParentItemID      sql.NullInt32 `json:"parent_item_id"`
	MenuItemImgID     sql.NullInt32 `json:"menu_item_img_id"`
	DescriptionPostID sql.NullInt32 `json:"description_post_id"`
}

type MenuItemPost struct {
	MenuItemID int32 `json:"menu_item_id"`
	PostID     int32 `json:"post_id"`
	Position   int32 `json:"position"`
}

type Post struct {
	ID                int32         `json:"id"`
	PostTypeID        int32         `json:"post_type_id"`
	UserID            int32         `json:"user_id"`
	Title             string        `json:"title"`
	Content           string        `json:"content"`
	CreatedAt         time.Time     `json:"created_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
	LastUpdatedAt     sql.NullTime  `json:"last_updated_at"`
	LastUpdatedUserID sql.NullInt32 `json:"last_updated_user_id"`
	IsDraft           bool          `json:"is_draft"`
	IsPrivate         bool          `json:"is_private"`
}

type PostHistory struct {
	ID                int32         `json:"id"`
	PostID            int32         `json:"post_id"`
	PostTypeID        int32         `json:"post_type_id"`
	UserID            int32         `json:"user_id"`
	Title             string        `json:"title"`
	Content           string        `json:"content"`
	CreatedAt         time.Time     `json:"created_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
	LastUpdatedAt     sql.NullTime  `json:"last_updated_at"`
	LastUpdatedUserID sql.NullInt32 `json:"last_updated_user_id"`
	IsDraft           bool          `json:"is_draft"`
	IsPrivate         bool          `json:"is_private"`
}

type PostType struct {
	ID         int32  `json:"id"`
	Name       string `json:"name"`
	Draftable  bool   `json:"draftable"`
	Privatable bool   `json:"privatable"`
}

type Property struct {
	ID      int32  `json:"id"`
	WorldID int32  `json:"world_id"`
	Name    string `json:"name"`
}

type Race struct {
	ID         int32         `json:"id"`
	WorldID    int32         `json:"world_id"`
	Name       string        `json:"name"`
	ImgID      sql.NullInt32 `json:"img_id"`
	IsPlayable bool          `json:"is_playable"`
}

type RaceProperty struct {
	RaceID     int32 `json:"race_id"`
	PropertyID int32 `json:"property_id"`
	MinValue   int32 `json:"min_value"`
	MaxValue   int32 `json:"max_value"`
}

type Role struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	UserID       int32     `json:"user_id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	CreatedAt    time.Time `json:"created_at"`
	ExpiredAt    time.Time `json:"expired_at"`
}

type Skill struct {
	ID       int32         `json:"id"`
	WorldID  int32         `json:"world_id"`
	ImgID    sql.NullInt32 `json:"img_id"`
	Name     string        `json:"name"`
	MaxLevel int32         `json:"max_level"`
}

type SkillRequirement struct {
	ID      int32         `json:"id"`
	SkillID int32         `json:"skill_id"`
	Level   sql.NullInt32 `json:"level"`
	RaceID  sql.NullInt32 `json:"race_id"`
}

type SkillRequirementProperty struct {
	SkillRequirementID int32 `json:"skill_requirement_id"`
	PropertyID         int32 `json:"property_id"`
	Value              int32 `json:"value"`
}

type SkillRequirementSkill struct {
	SkillRequirementID int32 `json:"skill_requirement_id"`
	SkillID            int32 `json:"skill_id"`
	Level              int32 `json:"level"`
}

type User struct {
	ID                 int32         `json:"id"`
	Username           string        `json:"username"`
	HashedPassword     string        `json:"hashed_password"`
	Email              string        `json:"email"`
	ImgID              sql.NullInt32 `json:"img_id"`
	PasswordChangedAt  time.Time     `json:"password_changed_at"`
	CreatedAt          time.Time     `json:"created_at"`
	IsEmailVerified    bool          `json:"is_email_verified"`
	IntroductionPostID sql.NullInt32 `json:"introduction_post_id"`
}

type UserPasswordReset struct {
	UserID    int32     `json:"user_id"`
	Code      string    `json:"code"`
	ExpiredAt time.Time `json:"expired_at"`
}

type UserRole struct {
	UserID    int32     `json:"user_id"`
	RoleID    int32     `json:"role_id"`
	CreatedAt time.Time `json:"created_at"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	UserID     int32     `json:"user_id"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}

type ViewPost struct {
	ID                 int32         `json:"id"`
	PostTypeID         int32         `json:"post_type_id"`
	UserID             int32         `json:"user_id"`
	Title              string        `json:"title"`
	Content            string        `json:"content"`
	CreatedAt          time.Time     `json:"created_at"`
	DeletedAt          sql.NullTime  `json:"deleted_at"`
	LastUpdatedAt      sql.NullTime  `json:"last_updated_at"`
	LastUpdatedUserID  sql.NullInt32 `json:"last_updated_user_id"`
	IsDraft            bool          `json:"is_draft"`
	IsPrivate          bool          `json:"is_private"`
	PostTypeName       string        `json:"post_type_name"`
	PostTypeDraftable  bool          `json:"post_type_draftable"`
	PostTypePrivatable bool          `json:"post_type_privatable"`
}

type ViewUser struct {
	ID                        int32          `json:"id"`
	Username                  string         `json:"username"`
	HashedPassword            string         `json:"hashed_password"`
	Email                     string         `json:"email"`
	ImgID                     sql.NullInt32  `json:"img_id"`
	PasswordChangedAt         time.Time      `json:"password_changed_at"`
	CreatedAt                 time.Time      `json:"created_at"`
	IsEmailVerified           bool           `json:"is_email_verified"`
	IntroductionPostID        sql.NullInt32  `json:"introduction_post_id"`
	AvatarImageID             sql.NullInt32  `json:"avatar_image_id"`
	AvatarImageUrl            sql.NullString `json:"avatar_image_url"`
	AvatarImageGuid           uuid.NullUUID  `json:"avatar_image_guid"`
	IntroductionPostDeletedAt sql.NullTime   `json:"introduction_post_deleted_at"`
}

type ViewWorld struct {
	ID                    int32          `json:"id"`
	Name                  string         `json:"name"`
	Public                bool           `json:"public"`
	CreatedAt             time.Time      `json:"created_at"`
	ShortDescription      string         `json:"short_description"`
	BasedOn               string         `json:"based_on"`
	DescriptionPostID     sql.NullInt32  `json:"description_post_id"`
	ImageHeader           sql.NullString `json:"image_header"`
	ImageThumbnail        sql.NullString `json:"image_thumbnail"`
	ImageAvatar           sql.NullString `json:"image_avatar"`
	Tags                  []string       `json:"tags"`
	ActivityPostCount     int32          `json:"activity_post_count"`
	ActivityQuestCount    int32          `json:"activity_quest_count"`
	ActivityResourceCount int32          `json:"activity_resource_count"`
}

type World struct {
	ID                int32         `json:"id"`
	Name              string        `json:"name"`
	Public            bool          `json:"public"`
	CreatedAt         time.Time     `json:"created_at"`
	ShortDescription  string        `json:"short_description"`
	BasedOn           string        `json:"based_on"`
	DescriptionPostID sql.NullInt32 `json:"description_post_id"`
}

type WorldActivity struct {
	WorldID       int32     `json:"world_id"`
	Date          time.Time `json:"date"`
	PostCount     int32     `json:"post_count"`
	QuestCount    int32     `json:"quest_count"`
	ResourceCount int32     `json:"resource_count"`
}

type WorldAdmin struct {
	WorldID    int32     `json:"world_id"`
	UserID     int32     `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	SuperAdmin bool      `json:"super_admin"`
	// 0 = NO, 1 = YES, 2 = PENDING
	Approved           int32  `json:"approved"`
	MotivationalLetter string `json:"motivational_letter"`
}

type WorldImage struct {
	WorldID        int32         `json:"world_id"`
	HeaderImgID    sql.NullInt32 `json:"header_img_id"`
	ImageAvatar    sql.NullInt32 `json:"image_avatar"`
	ThumbnailImgID sql.NullInt32 `json:"thumbnail_img_id"`
	AvatarImgID    sql.NullInt32 `json:"avatar_img_id"`
}

type WorldMenu struct {
	WorldID int32 `json:"world_id"`
	MenuID  int32 `json:"menu_id"`
}

type WorldTag struct {
	WorldID int32 `json:"world_id"`
	TagID   int32 `json:"tag_id"`
}

type WorldTagsAvailable struct {
	ID  int32  `json:"id"`
	Tag string `json:"tag"`
}
