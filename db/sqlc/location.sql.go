// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: location.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, description, post_id, thumbnail_image_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, post_id, thumbnail_image_id
`

type CreateLocationParams struct {
	Name             string         `json:"name"`
	Description      sql.NullString `json:"description"`
	PostID           sql.NullInt32  `json:"post_id"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.Name,
		arg.Description,
		arg.PostID,
		arg.ThumbnailImageID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
CALL delete_location($1)
`

func (q *Queries) DeleteLocation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, description, post_id, thumbnail_image_id, thumbnail_image_url, post_title, entity_id, module_id, module_type, module_type_id, tags FROM view_locations WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (ViewLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i ViewLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
		&i.ThumbnailImageUrl,
		&i.PostTitle,
		&i.EntityID,
		&i.ModuleID,
		&i.ModuleType,
		&i.ModuleTypeID,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, name, description, post_id, thumbnail_image_id, thumbnail_image_url, post_title, entity_id, module_id, module_type, module_type_id, tags FROM view_locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]ViewLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewLocation{}
	for rows.Next() {
		var i ViewLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
			&i.PostTitle,
			&i.EntityID,
			&i.ModuleID,
			&i.ModuleType,
			&i.ModuleTypeID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsByIDs = `-- name: GetLocationsByIDs :many
SELECT id, name, description, post_id, thumbnail_image_id FROM locations WHERE id = ANY($1::int[])
`

func (q *Queries) GetLocationsByIDs(ctx context.Context, locationIds []int32) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByIDs, pq.Array(locationIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsByModule = `-- name: GetLocationsByModule :many
SELECT id, name, description, post_id, thumbnail_image_id, thumbnail_image_url, post_title, entity_id, module_id, module_type, module_type_id, tags FROM view_locations
WHERE module_id = $1
`

func (q *Queries) GetLocationsByModule(ctx context.Context, moduleID int32) ([]ViewLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByModule, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewLocation{}
	for rows.Next() {
		var i ViewLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PostID,
			&i.ThumbnailImageID,
			&i.ThumbnailImageUrl,
			&i.PostTitle,
			&i.EntityID,
			&i.ModuleID,
			&i.ModuleType,
			&i.ModuleTypeID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    post_id = COALESCE($3, post_id),
    thumbnail_image_id = COALESCE($4, thumbnail_image_id)
WHERE id = $5
RETURNING id, name, description, post_id, thumbnail_image_id
`

type UpdateLocationParams struct {
	Name             sql.NullString `json:"name"`
	Description      sql.NullString `json:"description"`
	PostID           sql.NullInt32  `json:"post_id"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
	ID               int32          `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.Name,
		arg.Description,
		arg.PostID,
		arg.ThumbnailImageID,
		arg.ID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PostID,
		&i.ThumbnailImageID,
	)
	return i, err
}
