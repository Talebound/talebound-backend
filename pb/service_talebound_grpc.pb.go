// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: service_talebound.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Talebound_GetUserRoles_FullMethodName                       = "/pb.Talebound/GetUserRoles"
	Talebound_AddRoleToUser_FullMethodName                      = "/pb.Talebound/AddRoleToUser"
	Talebound_RemoveRoleFromUser_FullMethodName                 = "/pb.Talebound/RemoveRoleFromUser"
	Talebound_GetChatMessages_FullMethodName                    = "/pb.Talebound/GetChatMessages"
	Talebound_AddChatMessage_FullMethodName                     = "/pb.Talebound/AddChatMessage"
	Talebound_DeleteChatMessage_FullMethodName                  = "/pb.Talebound/DeleteChatMessage"
	Talebound_GetUsers_FullMethodName                           = "/pb.Talebound/GetUsers"
	Talebound_CreateUser_FullMethodName                         = "/pb.Talebound/CreateUser"
	Talebound_UpdateUser_FullMethodName                         = "/pb.Talebound/UpdateUser"
	Talebound_LoginUser_FullMethodName                          = "/pb.Talebound/LoginUser"
	Talebound_LogoutUser_FullMethodName                         = "/pb.Talebound/LogoutUser"
	Talebound_ResetPasswordSendCode_FullMethodName              = "/pb.Talebound/ResetPasswordSendCode"
	Talebound_ResetPasswordVerifyCode_FullMethodName            = "/pb.Talebound/ResetPasswordVerifyCode"
	Talebound_ResetPasswordVerifyCodeValidity_FullMethodName    = "/pb.Talebound/ResetPasswordVerifyCodeValidity"
	Talebound_VerifyEmail_FullMethodName                        = "/pb.Talebound/VerifyEmail"
	Talebound_GetEvaluationById_FullMethodName                  = "/pb.Talebound/GetEvaluationById"
	Talebound_GetEvaluationsByType_FullMethodName               = "/pb.Talebound/GetEvaluationsByType"
	Talebound_CreateOrUpdateEvaluationVote_FullMethodName       = "/pb.Talebound/CreateOrUpdateEvaluationVote"
	Talebound_GetEvaluationVotesByUserId_FullMethodName         = "/pb.Talebound/GetEvaluationVotesByUserId"
	Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName = "/pb.Talebound/GetEvaluationVotesByUserIdAndVoter"
	Talebound_DeleteEvaluationVote_FullMethodName               = "/pb.Talebound/DeleteEvaluationVote"
	Talebound_GetAverageUserEvaluationsByType_FullMethodName    = "/pb.Talebound/GetAverageUserEvaluationsByType"
	Talebound_UploadImage_FullMethodName                        = "/pb.Talebound/UploadImage"
	Talebound_UploadUserAvatar_FullMethodName                   = "/pb.Talebound/UploadUserAvatar"
)

// TaleboundClient is the client API for Talebound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaleboundClient interface {
	// ============= USER ROLES =================
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error)
	AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error)
	DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error)
	ResetPasswordVerifyCodeValidity(ctx context.Context, in *ResetPasswordVerifyCodeValidityRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeValidityResponse, error)
	// ============= VERIFY =================
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// ============= USER EVALUATION =================
	GetEvaluationById(ctx context.Context, in *GetEvaluationByIdRequest, opts ...grpc.CallOption) (*GetEvaluationByIdResponse, error)
	GetEvaluationsByType(ctx context.Context, in *GetEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetEvaluationsByTypeResponse, error)
	CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error)
	// ============= FILE UPLOAD ================
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error)
}

type taleboundClient struct {
	cc grpc.ClientConnInterface
}

func NewTaleboundClient(cc grpc.ClientConnInterface) TaleboundClient {
	return &taleboundClient{cc}
}

func (c *taleboundClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUserRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddRoleToUser(ctx context.Context, in *AddRoleToUserRequest, opts ...grpc.CallOption) (*AddRoleToUserResponse, error) {
	out := new(AddRoleToUserResponse)
	err := c.cc.Invoke(ctx, Talebound_AddRoleToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveRoleFromUserResponse, error) {
	out := new(RemoveRoleFromUserResponse)
	err := c.cc.Invoke(ctx, Talebound_RemoveRoleFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetChatMessages(ctx context.Context, in *GetChatMessagesRequest, opts ...grpc.CallOption) (*GetChatMessagesResponse, error) {
	out := new(GetChatMessagesResponse)
	err := c.cc.Invoke(ctx, Talebound_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) AddChatMessage(ctx context.Context, in *AddChatMessageRequest, opts ...grpc.CallOption) (*AddChatMessageResponse, error) {
	out := new(AddChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_AddChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteChatMessage(ctx context.Context, in *DeleteChatMessageRequest, opts ...grpc.CallOption) (*DeleteChatMessageResponse, error) {
	out := new(DeleteChatMessageResponse)
	err := c.cc.Invoke(ctx, Talebound_DeleteChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, Talebound_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Talebound_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Talebound_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Talebound_LogoutUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordSendCode(ctx context.Context, in *ResetPasswordSendCodeRequest, opts ...grpc.CallOption) (*ResetPasswordSendCodeResponse, error) {
	out := new(ResetPasswordSendCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordSendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordVerifyCode(ctx context.Context, in *ResetPasswordVerifyCodeRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeResponse, error) {
	out := new(ResetPasswordVerifyCodeResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) ResetPasswordVerifyCodeValidity(ctx context.Context, in *ResetPasswordVerifyCodeValidityRequest, opts ...grpc.CallOption) (*ResetPasswordVerifyCodeValidityResponse, error) {
	out := new(ResetPasswordVerifyCodeValidityResponse)
	err := c.cc.Invoke(ctx, Talebound_ResetPasswordVerifyCodeValidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Talebound_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationById(ctx context.Context, in *GetEvaluationByIdRequest, opts ...grpc.CallOption) (*GetEvaluationByIdResponse, error) {
	out := new(GetEvaluationByIdResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationsByType(ctx context.Context, in *GetEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetEvaluationsByTypeResponse, error) {
	out := new(GetEvaluationsByTypeResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) CreateOrUpdateEvaluationVote(ctx context.Context, in *CreateOrUpdateEvaluationVoteRequest, opts ...grpc.CallOption) (*CreateOrUpdateEvaluationVoteResponse, error) {
	out := new(CreateOrUpdateEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Talebound_CreateOrUpdateEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationVotesByUserId(ctx context.Context, in *GetEvaluationVotesByUserIdRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdResponse, error) {
	out := new(GetEvaluationVotesByUserIdResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationVotesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetEvaluationVotesByUserIdAndVoter(ctx context.Context, in *GetEvaluationVotesByUserIdAndVoterRequest, opts ...grpc.CallOption) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	out := new(GetEvaluationVotesByUserIdAndVoterResponse)
	err := c.cc.Invoke(ctx, Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) DeleteEvaluationVote(ctx context.Context, in *DeleteEvaluationVoteRequest, opts ...grpc.CallOption) (*DeleteEvaluationVoteResponse, error) {
	out := new(DeleteEvaluationVoteResponse)
	err := c.cc.Invoke(ctx, Talebound_DeleteEvaluationVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) GetAverageUserEvaluationsByType(ctx context.Context, in *GetAverageUserEvaluationsByTypeRequest, opts ...grpc.CallOption) (*GetAverageUserEvaluationsByTypeResponse, error) {
	out := new(GetAverageUserEvaluationsByTypeResponse)
	err := c.cc.Invoke(ctx, Talebound_GetAverageUserEvaluationsByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, Talebound_UploadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taleboundClient) UploadUserAvatar(ctx context.Context, in *UploadUserAvatarRequest, opts ...grpc.CallOption) (*UploadUserAvatarResponse, error) {
	out := new(UploadUserAvatarResponse)
	err := c.cc.Invoke(ctx, Talebound_UploadUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaleboundServer is the server API for Talebound service.
// All implementations must embed UnimplementedTaleboundServer
// for forward compatibility
type TaleboundServer interface {
	// ============= USER ROLES =================
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error)
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error)
	GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error)
	AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error)
	DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// ============= LOGIN & LOGOUT =================
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error)
	ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error)
	ResetPasswordVerifyCodeValidity(context.Context, *ResetPasswordVerifyCodeValidityRequest) (*ResetPasswordVerifyCodeValidityResponse, error)
	// ============= VERIFY =================
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// ============= USER EVALUATION =================
	GetEvaluationById(context.Context, *GetEvaluationByIdRequest) (*GetEvaluationByIdResponse, error)
	GetEvaluationsByType(context.Context, *GetEvaluationsByTypeRequest) (*GetEvaluationsByTypeResponse, error)
	CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error)
	GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error)
	GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error)
	DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error)
	GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error)
	// ============= FILE UPLOAD ================
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error)
	mustEmbedUnimplementedTaleboundServer()
}

// UnimplementedTaleboundServer must be embedded to have forward compatible implementations.
type UnimplementedTaleboundServer struct {
}

func (UnimplementedTaleboundServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedTaleboundServer) AddRoleToUser(context.Context, *AddRoleToUserRequest) (*AddRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToUser not implemented")
}
func (UnimplementedTaleboundServer) RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*RemoveRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromUser not implemented")
}
func (UnimplementedTaleboundServer) GetChatMessages(context.Context, *GetChatMessagesRequest) (*GetChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedTaleboundServer) AddChatMessage(context.Context, *AddChatMessageRequest) (*AddChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatMessage not implemented")
}
func (UnimplementedTaleboundServer) DeleteChatMessage(context.Context, *DeleteChatMessageRequest) (*DeleteChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatMessage not implemented")
}
func (UnimplementedTaleboundServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedTaleboundServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTaleboundServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedTaleboundServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedTaleboundServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordSendCode(context.Context, *ResetPasswordSendCodeRequest) (*ResetPasswordSendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordSendCode not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordVerifyCode(context.Context, *ResetPasswordVerifyCodeRequest) (*ResetPasswordVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordVerifyCode not implemented")
}
func (UnimplementedTaleboundServer) ResetPasswordVerifyCodeValidity(context.Context, *ResetPasswordVerifyCodeValidityRequest) (*ResetPasswordVerifyCodeValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordVerifyCodeValidity not implemented")
}
func (UnimplementedTaleboundServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationById(context.Context, *GetEvaluationByIdRequest) (*GetEvaluationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationById not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationsByType(context.Context, *GetEvaluationsByTypeRequest) (*GetEvaluationsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationsByType not implemented")
}
func (UnimplementedTaleboundServer) CreateOrUpdateEvaluationVote(context.Context, *CreateOrUpdateEvaluationVoteRequest) (*CreateOrUpdateEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateEvaluationVote not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationVotesByUserId(context.Context, *GetEvaluationVotesByUserIdRequest) (*GetEvaluationVotesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserId not implemented")
}
func (UnimplementedTaleboundServer) GetEvaluationVotesByUserIdAndVoter(context.Context, *GetEvaluationVotesByUserIdAndVoterRequest) (*GetEvaluationVotesByUserIdAndVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationVotesByUserIdAndVoter not implemented")
}
func (UnimplementedTaleboundServer) DeleteEvaluationVote(context.Context, *DeleteEvaluationVoteRequest) (*DeleteEvaluationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluationVote not implemented")
}
func (UnimplementedTaleboundServer) GetAverageUserEvaluationsByType(context.Context, *GetAverageUserEvaluationsByTypeRequest) (*GetAverageUserEvaluationsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageUserEvaluationsByType not implemented")
}
func (UnimplementedTaleboundServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedTaleboundServer) UploadUserAvatar(context.Context, *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedTaleboundServer) mustEmbedUnimplementedTaleboundServer() {}

// UnsafeTaleboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaleboundServer will
// result in compilation errors.
type UnsafeTaleboundServer interface {
	mustEmbedUnimplementedTaleboundServer()
}

func RegisterTaleboundServer(s grpc.ServiceRegistrar, srv TaleboundServer) {
	s.RegisterService(&Talebound_ServiceDesc, srv)
}

func _Talebound_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddRoleToUser(ctx, req.(*AddRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_RemoveRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_RemoveRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetChatMessages(ctx, req.(*GetChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_AddChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).AddChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_AddChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).AddChatMessage(ctx, req.(*AddChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteChatMessage(ctx, req.(*DeleteChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordSendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordSendCode(ctx, req.(*ResetPasswordSendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordVerifyCode(ctx, req.(*ResetPasswordVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_ResetPasswordVerifyCodeValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordVerifyCodeValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).ResetPasswordVerifyCodeValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_ResetPasswordVerifyCodeValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).ResetPasswordVerifyCodeValidity(ctx, req.(*ResetPasswordVerifyCodeValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationById(ctx, req.(*GetEvaluationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationsByType(ctx, req.(*GetEvaluationsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_CreateOrUpdateEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).CreateOrUpdateEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_CreateOrUpdateEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).CreateOrUpdateEvaluationVote(ctx, req.(*CreateOrUpdateEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationVotesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationVotesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationVotesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationVotesByUserId(ctx, req.(*GetEvaluationVotesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetEvaluationVotesByUserIdAndVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationVotesByUserIdAndVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetEvaluationVotesByUserIdAndVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetEvaluationVotesByUserIdAndVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetEvaluationVotesByUserIdAndVoter(ctx, req.(*GetEvaluationVotesByUserIdAndVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_DeleteEvaluationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).DeleteEvaluationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_DeleteEvaluationVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).DeleteEvaluationVote(ctx, req.(*DeleteEvaluationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_GetAverageUserEvaluationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageUserEvaluationsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).GetAverageUserEvaluationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_GetAverageUserEvaluationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).GetAverageUserEvaluationsByType(ctx, req.(*GetAverageUserEvaluationsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talebound_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaleboundServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talebound_UploadUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaleboundServer).UploadUserAvatar(ctx, req.(*UploadUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Talebound_ServiceDesc is the grpc.ServiceDesc for Talebound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Talebound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talebound",
	HandlerType: (*TaleboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRoles",
			Handler:    _Talebound_GetUserRoles_Handler,
		},
		{
			MethodName: "AddRoleToUser",
			Handler:    _Talebound_AddRoleToUser_Handler,
		},
		{
			MethodName: "RemoveRoleFromUser",
			Handler:    _Talebound_RemoveRoleFromUser_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _Talebound_GetChatMessages_Handler,
		},
		{
			MethodName: "AddChatMessage",
			Handler:    _Talebound_AddChatMessage_Handler,
		},
		{
			MethodName: "DeleteChatMessage",
			Handler:    _Talebound_DeleteChatMessage_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Talebound_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Talebound_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Talebound_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Talebound_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _Talebound_LogoutUser_Handler,
		},
		{
			MethodName: "ResetPasswordSendCode",
			Handler:    _Talebound_ResetPasswordSendCode_Handler,
		},
		{
			MethodName: "ResetPasswordVerifyCode",
			Handler:    _Talebound_ResetPasswordVerifyCode_Handler,
		},
		{
			MethodName: "ResetPasswordVerifyCodeValidity",
			Handler:    _Talebound_ResetPasswordVerifyCodeValidity_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Talebound_VerifyEmail_Handler,
		},
		{
			MethodName: "GetEvaluationById",
			Handler:    _Talebound_GetEvaluationById_Handler,
		},
		{
			MethodName: "GetEvaluationsByType",
			Handler:    _Talebound_GetEvaluationsByType_Handler,
		},
		{
			MethodName: "CreateOrUpdateEvaluationVote",
			Handler:    _Talebound_CreateOrUpdateEvaluationVote_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserId",
			Handler:    _Talebound_GetEvaluationVotesByUserId_Handler,
		},
		{
			MethodName: "GetEvaluationVotesByUserIdAndVoter",
			Handler:    _Talebound_GetEvaluationVotesByUserIdAndVoter_Handler,
		},
		{
			MethodName: "DeleteEvaluationVote",
			Handler:    _Talebound_DeleteEvaluationVote_Handler,
		},
		{
			MethodName: "GetAverageUserEvaluationsByType",
			Handler:    _Talebound_GetAverageUserEvaluationsByType_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Talebound_UploadImage_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _Talebound_UploadUserAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_talebound.proto",
}
